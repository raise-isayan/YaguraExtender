package yagura.view;

import burp.BurpExtension;
import extension.burp.BurpConfig;
import extension.burp.FilterProperty;
import extension.burp.FilterSiteMapProperty;
import extension.view.base.JavaSyntaxDocument;
import extension.view.layout.VerticalFlowLayout;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;
import javax.tools.Diagnostic;
import yagura.dynamic.BambdaTemplete;

/**
 *
 * @author isayan
 */
public class FilterSiteMapPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterSiteMapPanel
     */
    public FilterSiteMapPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbetFilter = new javax.swing.JTabbedPane();
        pnlSettings = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        pnlHttpFilterByRequest = new javax.swing.JPanel();
        chkShowOnlyinscopeItem = new javax.swing.JCheckBox();
        chkHideItemsWithoutResponses = new javax.swing.JCheckBox();
        chkShowOnlyParameterizedRequests = new javax.swing.JCheckBox();
        pnlHttp = new javax.swing.JPanel();
        pnlEast = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlSettings.setLayout(new java.awt.BorderLayout());

        pnlCenter.setLayout(new java.awt.BorderLayout());

        pnlHeader.setLayout(new java.awt.BorderLayout());

        pnlHttpFilterByRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by request type"));
        pnlHttpFilterByRequest.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        pnlHttpFilterByRequest.setMinimumSize(new java.awt.Dimension(200, 150));
        pnlHttpFilterByRequest.setPreferredSize(new java.awt.Dimension(200, 150));
        pnlHttpFilterByRequest.setLayout(new javax.swing.BoxLayout(pnlHttpFilterByRequest, javax.swing.BoxLayout.Y_AXIS));

        chkShowOnlyinscopeItem.setText("Show only in-scope items");
        pnlHttpFilterByRequest.add(chkShowOnlyinscopeItem);

        chkHideItemsWithoutResponses.setText("Hide items without responses");
        pnlHttpFilterByRequest.add(chkHideItemsWithoutResponses);

        chkShowOnlyParameterizedRequests.setText("Show only parameterized requests");
        pnlHttpFilterByRequest.add(chkShowOnlyParameterizedRequests);

        pnlHeader.add(pnlHttpFilterByRequest, java.awt.BorderLayout.CENTER);

        pnlCenter.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlHttp.setMinimumSize(new java.awt.Dimension(217, 300));
        pnlHttp.setName(""); // NOI18N
        pnlHttp.setPreferredSize(new java.awt.Dimension(500, 300));
        pnlHttp.setLayout(new java.awt.BorderLayout());
        pnlCenter.add(pnlHttp, java.awt.BorderLayout.CENTER);

        pnlSettings.add(pnlCenter, java.awt.BorderLayout.CENTER);

        pnlEast.setLayout(new java.awt.BorderLayout());
        pnlSettings.add(pnlEast, java.awt.BorderLayout.EAST);

        tabbetFilter.addTab("Settings", pnlSettings);

        add(tabbetFilter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkHideItemsWithoutResponses;
    private javax.swing.JCheckBox chkShowOnlyParameterizedRequests;
    private javax.swing.JCheckBox chkShowOnlyinscopeItem;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlEast;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlHttp;
    private javax.swing.JPanel pnlHttpFilterByRequest;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JTabbedPane tabbetFilter;
    // End of variables declaration//GEN-END:variables

    private final EditorKit javaStyleEditorKit = new StyledEditorKit() {
        @Override
        public Document createDefaultDocument() {
            return new JavaSyntaxDocument();
        }
    };

    private final FilterAnnotationPanel pnlAnnotation = new FilterAnnotationPanel();
    private final FilterRequestResponsePanel pnlRequestResponse = new FilterRequestResponsePanel();

    private final FilterBambdaPanel pnlFilterBambda = new FilterBambdaPanel();

//    private final javax.swing.JPanel pnlBambda = new javax.swing.JPanel();
//    private final javax.swing.JScrollPane scrollBabda = new javax.swing.JScrollPane();
//    private final javax.swing.JEditorPane txtBambda = new javax.swing.JEditorPane();

    private void customizeComponents() {
//        this.scrollBabda.setViewportView(this.txtBambda);

//        this.txtBambda.setEditorKitForContentType("text/java", this.javaStyleEditorKit);
//        this.txtBambda.setContentType("text/java");

//        this.pnlBambda.setLayout(new java.awt.BorderLayout());
//        this.scrollBabda.setViewportView(this.txtBambda);
//        this.pnlBambda.add(scrollBabda, java.awt.BorderLayout.CENTER);
        this.pnlFilterBambda.setFilterCategory(FilterProperty.FilterCategory.SITE_MAP);
        this.tabbetFilter.addTab("Bambda", this.pnlFilterBambda);

        this.pnlHttpFilterByRequest.setLayout(new VerticalFlowLayout());
        this.pnlHttp.add(this.pnlRequestResponse, java.awt.BorderLayout.CENTER);
        this.pnlEast.add(this.pnlAnnotation, java.awt.BorderLayout.CENTER);

    }

    public void addTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.addChangeListener(listener);
    }

    public void removeTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.removeChangeListener(listener);
    }

    public boolean isFilterModeSettings() {
        return this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Settings");
    }

    public boolean isFilterModeBambda() {
        return this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Bambda");
    }

    public void converToBambda(FilterProperty filter) {
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.pnlFilterBambda.setCode(filter.build());
    }

    public void importBambda(FilterProperty.FilterCategory filterCategory) {
        String bambda = BurpConfig.getBambda(BurpExtension.api(), filterCategory);
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.pnlFilterBambda.setCode(bambda);
    }

    public void setBambaMode(boolean bamba) {
        this.tabbetFilter.remove(this.pnlFilterBambda);
        if (bamba) {
            this.tabbetFilter.addTab("Bambda", this.pnlFilterBambda);
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        }
    }

    public void setProperty(FilterSiteMapProperty filterProp) {
        if (filterProp.getFilterMode() == FilterProperty.FilterMode.SETTING) {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        } else {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        }
        this.chkShowOnlyinscopeItem.setSelected(filterProp.isShowOnlyScopeItems());
        this.chkHideItemsWithoutResponses.setSelected(filterProp.isHideItemsWithoutResponses());
        this.chkShowOnlyParameterizedRequests.setSelected(filterProp.isShowOnlyParameterizedRequests());

        this.pnlFilterBambda.setCode(filterProp.getBambdaQuery());

        this.pnlAnnotation.setAnnotationProperty(filterProp);
        this.pnlRequestResponse.setProperty(filterProp);
    }

    public FilterProperty getProperty() {
        FilterProperty filterProp = new FilterProperty();
        filterProp.setFilterCategory(FilterProperty.FilterCategory.SITE_MAP);
        if (this.isFilterModeSettings()) {
            filterProp.setFilterMode(FilterProperty.FilterMode.SETTING);
        } else {
            filterProp.setFilterMode(FilterProperty.FilterMode.BAMBDA);
        }
        filterProp.setShowOnlyScopeItems(this.chkShowOnlyinscopeItem.isSelected());
        filterProp.setHideItemsWithoutResponses(this.chkHideItemsWithoutResponses.isSelected());
        filterProp.setShowOnlyParameterizedRequests(this.chkShowOnlyParameterizedRequests.isSelected());

        this.pnlAnnotation.getAnnotationProperty(filterProp);
        this.pnlRequestResponse.getRequestResponseProperty(filterProp);

        filterProp.setBambda(this.pnlFilterBambda.getCode());
        return filterProp;
    }

    public boolean comple() {
        BambdaTemplete templete = this.pnlFilterBambda.source();
        this.pnlFilterBambda.compile(templete);
        Diagnostic report = this.pnlFilterBambda.getReport();
        return (report != null);
    }

    public void clearReport() {
        this.pnlFilterBambda.clearReport();
    }

    public void setBambdaDividerClose(boolean visible) {
        this.pnlFilterBambda.setBambdaDividerClose(visible);
    }

}
