package yagura.view;

import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.util.Base64URL;
import com.nimbusds.jwt.JWTClaimsSet;
import extension.helpers.json.JsonUtil;
import java.text.ParseException;

/**
 *
 * @author isayan
 */
public class JWSViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form JWEView
     */
    public JWSViewPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJWT = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        scrollHeaderJSON = new javax.swing.JScrollPane();
        txtHeaderJSON = new javax.swing.JEditorPane();
        pnlPayload = new javax.swing.JPanel();
        lblPayload = new javax.swing.JLabel();
        scrollPayloadJSON = new javax.swing.JScrollPane();
        txtPayloadJSON = new javax.swing.JEditorPane();
        Signature = new javax.swing.JPanel();
        lblSignature = new javax.swing.JLabel();
        scrollSignatureJSON = new javax.swing.JScrollPane();
        txtSignatureSign = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        pnlJWT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlJWT.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlJWT.setPreferredSize(new java.awt.Dimension(100, 454));
        pnlJWT.setLayout(new java.awt.BorderLayout());

        pnlHeader.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlHeader.setPreferredSize(new java.awt.Dimension(100, 100));
        pnlHeader.setLayout(new java.awt.BorderLayout());

        lblHeader.setText("Header");
        pnlHeader.add(lblHeader, java.awt.BorderLayout.NORTH);

        scrollHeaderJSON.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollHeaderJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        scrollHeaderJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtHeaderJSON.setEditable(false);
        txtHeaderJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        txtHeaderJSON.setPreferredSize(new java.awt.Dimension(80, 19));
        scrollHeaderJSON.setViewportView(txtHeaderJSON);

        pnlHeader.add(scrollHeaderJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlPayload.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlPayload.setPreferredSize(new java.awt.Dimension(100, 300));
        pnlPayload.setLayout(new java.awt.BorderLayout());

        lblPayload.setText("Payload");
        pnlPayload.add(lblPayload, java.awt.BorderLayout.NORTH);

        scrollPayloadJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtPayloadJSON.setEditable(false);
        txtPayloadJSON.setMinimumSize(new java.awt.Dimension(80, 19));
        scrollPayloadJSON.setViewportView(txtPayloadJSON);

        pnlPayload.add(scrollPayloadJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(pnlPayload, java.awt.BorderLayout.CENTER);

        Signature.setMinimumSize(new java.awt.Dimension(0, 0));
        Signature.setPreferredSize(new java.awt.Dimension(100, 50));
        Signature.setLayout(new java.awt.BorderLayout());

        lblSignature.setText("Signature");
        Signature.add(lblSignature, java.awt.BorderLayout.NORTH);

        scrollSignatureJSON.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollSignatureJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        scrollSignatureJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtSignatureSign.setEditable(false);
        txtSignatureSign.setMinimumSize(new java.awt.Dimension(0, 0));
        txtSignatureSign.setPreferredSize(new java.awt.Dimension(80, 19));
        scrollSignatureJSON.setViewportView(txtSignatureSign);

        Signature.add(scrollSignatureJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(Signature, java.awt.BorderLayout.SOUTH);

        add(pnlJWT, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Signature;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPayload;
    private javax.swing.JLabel lblSignature;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlJWT;
    private javax.swing.JPanel pnlPayload;
    private javax.swing.JScrollPane scrollHeaderJSON;
    private javax.swing.JScrollPane scrollPayloadJSON;
    private javax.swing.JScrollPane scrollSignatureJSON;
    private javax.swing.JEditorPane txtHeaderJSON;
    private javax.swing.JEditorPane txtPayloadJSON;
    private javax.swing.JEditorPane txtSignatureSign;
    // End of variables declaration//GEN-END:variables

    public boolean isEditable() {
        return this.txtPayloadJSON.isEditable();
    }

    public void setEditable(boolean editable) {
        this.txtPayloadJSON.setEditable(editable);
    }

    private boolean format = true;

    /**
     * @return the format
     */
    public boolean isFormat() {
        return format;
    }

    /**
     * @param format the format to set
     */
    public void setFormat(boolean format) {
        this.format = format;
    }

    public JWSHeader getHeader() throws ParseException {
        return JWSHeader.parse(this.txtHeaderJSON.getText());
    }

    public Payload getPayload() throws ParseException {
        return JWTClaimsSet.parse(this.txtPayloadJSON.getText()).toPayload();
    }

    public Base64URL getSignature() throws ParseException {
        return Base64URL.from(this.txtSignatureSign.getText());
    }

    public void setJWS(JWSObject jwstoken) {
        if (this.format) {
            this.txtHeaderJSON.setText(JsonUtil.prettyJson(jwstoken.getHeader().toBase64URL().decodeToString(), true));
            this.txtPayloadJSON.setText(JsonUtil.prettyJson(jwstoken.getPayload().toBase64URL().decodeToString(), true));
            this.txtSignatureSign.setText(jwstoken.getSignature().toString());
        }
        else {
            this.txtHeaderJSON.setText(jwstoken.getHeader().toBase64URL().decodeToString());
            this.txtPayloadJSON.setText(jwstoken.getPayload().toBase64URL().decodeToString());
            this.txtSignatureSign.setText(jwstoken.getSignature().toString());
        }
    }


}
