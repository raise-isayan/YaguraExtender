buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    classpath "org.asciidoctor:asciidoctor-gradle-jvm-pdf:3.3.2"
  }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: "org.asciidoctor.jvm.base"
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.asciidoctor.jvm.pdf'

sourceCompatibility = '17' // -source
targetCompatibility = '17' // -target

mainClassName = 'yagura.view.MainFrame'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

asciidoctor {
    sourceDir = file('src/main/help')
    sources {
      include 'help.adoc', 'help-ja.adoc'
    }

    outputDir = file('help')
}

processResources {
    filteringCharset = 'UTF-8'
    filesMatching ('**/*.properties') {
       expand(project.properties)
       // naitive2ascii
       filter(org.apache.tools.ant.filters.EscapeUnicode)
    }
}

clean.doFirst {
    delete fileTree('release') {
      include '*.jar'
    }
}

jar {
    // Keep jar clean:
    exclude 'META-INF/**', 'about.html', 'module-info.class'

    manifest {
        attributes 'Main-Class': mainClassName
    }

    from {
        configurations.runtimeClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }

    destinationDirectory = file('release')
    archiveVersion =  "v${release_version_major}"
}

task release(type: Zip, dependsOn: ['build', 'asciidoctor']) {
    archiveBaseName ="${rootProject.name}_v${release_version_major}.${release_version_minor}"
    destinationDirectory = file("${projectDir}")
    from rootProject.rootDir
    include '*'
    include 'gradle/**'
    include 'src/**'
    include 'help/**'
    include 'libs/**'
    include 'sample/**'
    include 'release/*.jar'
    exclude 'build'
    exclude '.git'
    exclude '.gradle'
    exclude '*.zip'
}

dependencies {

    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
    compileOnly 'org.bouncycastle:bcpkix-jdk15on:1.67'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    compileOnly 'org.bouncycastle:bcprov-jdk15on:1.67'

    // https://github.com/raise-isayan/BurpExtensionCommons
    implementation fileTree(dir: 'libs', include: ['*.jar'])
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation 'com.google.code.gson:gson:2.10.1'
        // https://mvnrepository.com/artifact/com.googlecode.juniversalchardet/juniversalchardet
        implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'

    // standalone 利用のため
    // https://mvnrepository.com/artifact/net.portswigger.burp.extensions/montoya-api
    implementation 'net.portswigger.burp.extensions:montoya-api:2023.2'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'
    // https://mvnrepository.com/artifact/com.fifesoft/rsyntaxtextarea
    implementation 'com.fifesoft:rsyntaxtextarea:3.3.1'

    // Unit Test
    testImplementation 'net.portswigger.burp.extensions:montoya-api:1.0.0'
    testImplementation fileTree(dir: 'libs', include: ['*.jar'])
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
    testImplementation 'org.bouncycastle:bcpkix-jdk15on:1.67'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.67'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
