package yagura.view;

import burp.BurpPreferences;
import extension.helpers.CertUtil;
import extension.helpers.BouncyUtil;
import extension.burp.IBurpTab;
import extension.helpers.ConvertUtil;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.view.base.CustomTableModel;
import extension.view.layout.VerticalFlowLayout;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.security.InvalidParameterException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.ProviderException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;

import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import okio.Buffer;
import org.bouncycastle.asn1.x500.style.BCStyle;
import org.bouncycastle.pkcs.PKCS10CertificationRequest;
import yagura.Version;
import yagura.model.CertificateItem;

/**
 *
 * @author isayan
 */
public class CertificateTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(CertificateTab.class.getName());

    protected final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    // https://docs.oracle.com/javase/jp/11/docs/specs/security/standard-names.html#keypairgenerator-algorithms
    private final static String [] ALGORITHM = new String [] {"RSA", "DSA", "EC", "Ed25519"};
    private final static int [] RSA_KEYSIZE = new int [] {512, 1024, 2048, 3072, 4098};
    private final static int [] DSA_KEYSIZE = new int [] {512, 768, 1024, 2048, 3072};
    private final static int [] EC_KEYSIZE = new int [] {192, 224, 256, 384, 521};
    private final static int [] ED_KEYSIZE = new int [] {256};

    /**
     * Creates new form Certificate
     */
    public CertificateTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpFormat = new javax.swing.ButtonGroup();
        btnGrpCA = new javax.swing.ButtonGroup();
        btnGrpExportCertificate = new javax.swing.ButtonGroup();
        btnGrpExportIssuerCA = new javax.swing.ButtonGroup();
        btnGrpIssuerCA = new javax.swing.ButtonGroup();
        btnGrpExportSubjectCA = new javax.swing.ButtonGroup();
        btnGrpAlgorithm = new javax.swing.ButtonGroup();
        btnGrpExportKeyPair = new javax.swing.ButtonGroup();
        tabGenerateCA = new javax.swing.JTabbedPane();
        pnlCertificateCA = new javax.swing.JPanel();
        pnlSelectCertificate = new javax.swing.JPanel();
        rdoBurpCA = new javax.swing.JRadioButton();
        rdoCustomCA = new javax.swing.JRadioButton();
        btnSelectExecute = new javax.swing.JButton();
        lblSelectCA = new javax.swing.JLabel();
        pnlCertificateExports = new javax.swing.JPanel();
        pnlConvertFormat = new javax.swing.JPanel();
        rdoConvertPairPEM = new javax.swing.JRadioButton();
        rdoConvertPrivateDER = new javax.swing.JRadioButton();
        rdoConvertCertificateDER = new javax.swing.JRadioButton();
        rdoConvertCertificatePEM = new javax.swing.JRadioButton();
        btnExportCA = new javax.swing.JButton();
        pnlCertificate = new javax.swing.JPanel();
        pnlServerCertificate = new javax.swing.JPanel();
        pnlServerEnable = new javax.swing.JPanel();
        chkProvidedServer = new javax.swing.JCheckBox();
        pnlListenPort = new javax.swing.JPanel();
        lblListenPort = new javax.swing.JLabel();
        spnListenPort = new javax.swing.JSpinner();
        btnProvidedServer = new javax.swing.JToggleButton();
        btnCopy = new javax.swing.JButton();
        pnlGenerateCA = new javax.swing.JPanel();
        pnlGenerateIssuer = new javax.swing.JPanel();
        lblIssuerYear = new javax.swing.JLabel();
        spnIssuerYear = new javax.swing.JSpinner();
        lblIssuerCommonName = new javax.swing.JLabel();
        txtIssuerCommonName = new javax.swing.JTextField();
        lblIssuerOrganizationName = new javax.swing.JLabel();
        txtIssuerOrganizationName = new javax.swing.JTextField();
        lblIssuerLoccalityName = new javax.swing.JLabel();
        txtIssuerLoccalityName = new javax.swing.JTextField();
        lblIssuerCountry = new javax.swing.JLabel();
        txtIssuerCountry = new javax.swing.JTextField();
        rdoIssuerExportPairPEM = new javax.swing.JRadioButton();
        rdoIssuerExportPairPKCS12 = new javax.swing.JRadioButton();
        txtIssuerPKCS12Password = new javax.swing.JTextField();
        btnIssuerExportCA = new javax.swing.JButton();
        pnlSignCA = new javax.swing.JPanel();
        pnlSelectIssuer = new javax.swing.JPanel();
        rdoBurpIssuerCA = new javax.swing.JRadioButton();
        rdoCustomIssuerCA = new javax.swing.JRadioButton();
        btnSelectIssuerExecute = new javax.swing.JButton();
        lblSelectIsserCA = new javax.swing.JLabel();
        pnlGenerateSubject = new javax.swing.JPanel();
        lblSubjectYear = new javax.swing.JLabel();
        spnSubjectYear = new javax.swing.JSpinner();
        lblSubjectCommonName = new javax.swing.JLabel();
        txtSubjectCommonName = new javax.swing.JTextField();
        lblSubjectOrganizationName = new javax.swing.JLabel();
        txtSubjectOrganizationName = new javax.swing.JTextField();
        lblSubjectLoccalityName = new javax.swing.JLabel();
        txtSubjectLoccalityName = new javax.swing.JTextField();
        lblSubjectCountry = new javax.swing.JLabel();
        txtSubjectCountry = new javax.swing.JTextField();
        rdoSubjectExportPairPEM = new javax.swing.JRadioButton();
        rdoSubjectExportPairPKCS12 = new javax.swing.JRadioButton();
        txtSubjectPKCS12Password = new javax.swing.JTextField();
        btnSubjectExportCA = new javax.swing.JButton();
        lblSubjectCountry1 = new javax.swing.JLabel();
        txtSubjectSAN = new javax.swing.JTextField();
        chkUseSameCommonName = new javax.swing.JCheckBox();
        pnlGenerateKey = new javax.swing.JPanel();
        pnlKeyPairAlgorithm = new javax.swing.JPanel();
        lbAlgorithm = new javax.swing.JLabel();
        lblKeySize = new javax.swing.JLabel();
        cmbAlgorithm = new javax.swing.JComboBox<>();
        lblKeyPairValid = new javax.swing.JLabel();
        pnlKeySize = new javax.swing.JPanel();
        pnlKeyPairConvertFormat = new javax.swing.JPanel();
        rdoConvertKeyPairPEM = new javax.swing.JRadioButton();
        btnExportKeyPair = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlCertificateCA.setLayout(new java.awt.BorderLayout());

        btnGrpCA.add(rdoBurpCA);
        rdoBurpCA.setSelected(true);
        rdoBurpCA.setText("Burp suite default CA");
        rdoBurpCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoBurpCAActionPerformed(evt);
            }
        });

        btnGrpCA.add(rdoCustomCA);
        rdoCustomCA.setText("Custom CA File");
        rdoCustomCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCustomCAActionPerformed(evt);
            }
        });

        btnSelectExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_image.png"))); // NOI18N
        btnSelectExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExecuteActionPerformed(evt);
            }
        });

        lblSelectCA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pnlSelectCertificateLayout = new javax.swing.GroupLayout(pnlSelectCertificate);
        pnlSelectCertificate.setLayout(pnlSelectCertificateLayout);
        pnlSelectCertificateLayout.setHorizontalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoBurpCA)
                    .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                        .addComponent(rdoCustomCA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSelectCA, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSelectCertificateLayout.setVerticalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoBurpCA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                        .addComponent(rdoCustomCA)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnSelectExecute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSelectCA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlCertificateCA.add(pnlSelectCertificate, java.awt.BorderLayout.NORTH);

        pnlCertificateExports.setLayout(new java.awt.BorderLayout());

        btnGrpExportCertificate.add(rdoConvertPairPEM);
        rdoConvertPairPEM.setSelected(true);
        rdoConvertPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpExportCertificate.add(rdoConvertPrivateDER);
        rdoConvertPrivateDER.setText("Private key  in DER format");

        btnGrpExportCertificate.add(rdoConvertCertificateDER);
        rdoConvertCertificateDER.setText("Certificate  in DER format");

        btnGrpExportCertificate.add(rdoConvertCertificatePEM);
        rdoConvertCertificatePEM.setText("Certificate  in PEM format");

        btnExportCA.setText("Export");
        btnExportCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportCAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConvertFormatLayout = new javax.swing.GroupLayout(pnlConvertFormat);
        pnlConvertFormat.setLayout(pnlConvertFormatLayout);
        pnlConvertFormatLayout.setHorizontalGroup(
            pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoConvertCertificateDER)
                    .addComponent(rdoConvertCertificatePEM)
                    .addComponent(rdoConvertPrivateDER)
                    .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(rdoConvertPairPEM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportCA)))
                .addGap(84, 483, Short.MAX_VALUE))
        );
        pnlConvertFormatLayout.setVerticalGroup(
            pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                .addGroup(pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnExportCA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConvertFormatLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdoConvertPairPEM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(rdoConvertCertificatePEM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertCertificateDER)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertPrivateDER)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCertificateExports.add(pnlConvertFormat, java.awt.BorderLayout.NORTH);

        pnlCertificateCA.add(pnlCertificateExports, java.awt.BorderLayout.CENTER);

        pnlCertificate.setLayout(new java.awt.BorderLayout());

        pnlServerCertificate.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("yagura/view/Bundle"); // NOI18N
        chkProvidedServer.setText(bundle.getString("server.ocsp.tab.auto_start")); // NOI18N
        chkProvidedServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkProvidedServerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlServerEnableLayout = new javax.swing.GroupLayout(pnlServerEnable);
        pnlServerEnable.setLayout(pnlServerEnableLayout);
        pnlServerEnableLayout.setHorizontalGroup(
            pnlServerEnableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerEnableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkProvidedServer)
                .addContainerGap())
        );
        pnlServerEnableLayout.setVerticalGroup(
            pnlServerEnableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerEnableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkProvidedServer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkProvidedServer.getAccessibleContext().setAccessibleName("");

        pnlServerCertificate.add(pnlServerEnable, java.awt.BorderLayout.NORTH);

        lblListenPort.setText(bundle.getString("server.ocsp.tab.listen_port")); // NOI18N
        lblListenPort.setToolTipText("");

        spnListenPort.setModel(new javax.swing.SpinnerNumberModel(5050, 1024, 65535, 1));
        spnListenPort.setEditor(new javax.swing.JSpinner.NumberEditor(spnListenPort, "#0"));
        spnListenPort.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnListenPortStateChanged(evt);
            }
        });

        btnProvidedServer.setText("Start");
        btnProvidedServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvidedServerActionPerformed(evt);
            }
        });

        btnCopy.setText("Copy URL");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListenPortLayout = new javax.swing.GroupLayout(pnlListenPort);
        pnlListenPort.setLayout(pnlListenPortLayout);
        pnlListenPortLayout.setHorizontalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListenPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnProvidedServer)
                .addGap(18, 18, 18)
                .addComponent(btnCopy)
                .addContainerGap())
        );
        pnlListenPortLayout.setVerticalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProvidedServer)
                    .addComponent(lblListenPort)
                    .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopy))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        lblListenPort.getAccessibleContext().setAccessibleName("");

        pnlServerCertificate.add(pnlListenPort, java.awt.BorderLayout.CENTER);

        pnlCertificate.add(pnlServerCertificate, java.awt.BorderLayout.SOUTH);

        pnlCertificateCA.add(pnlCertificate, java.awt.BorderLayout.SOUTH);

        tabGenerateCA.addTab("CA Certificate", pnlCertificateCA);

        pnlGenerateCA.setLayout(new java.awt.BorderLayout());

        lblIssuerYear.setText("Year:");

        spnIssuerYear.setModel(new javax.swing.SpinnerNumberModel(10, 1, 99, 1));

        lblIssuerCommonName.setText("Common Name (CN):");

        lblIssuerOrganizationName.setText("Organization Name (O):");

        lblIssuerLoccalityName.setText("Loccality Name (L):");

        lblIssuerCountry.setText("Country (C):");

        btnGrpExportIssuerCA.add(rdoIssuerExportPairPEM);
        rdoIssuerExportPairPEM.setSelected(true);
        rdoIssuerExportPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpExportIssuerCA.add(rdoIssuerExportPairPKCS12);
        rdoIssuerExportPairPKCS12.setText("Certificate and Private key in PKCS#12 keystore");

        btnIssuerExportCA.setText("Export");
        btnIssuerExportCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIssuerExportCAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGenerateIssuerLayout = new javax.swing.GroupLayout(pnlGenerateIssuer);
        pnlGenerateIssuer.setLayout(pnlGenerateIssuerLayout);
        pnlGenerateIssuerLayout.setHorizontalGroup(
            pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateIssuerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlGenerateIssuerLayout.createSequentialGroup()
                        .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIssuerYear)
                            .addComponent(lblIssuerCommonName)
                            .addComponent(lblIssuerOrganizationName)
                            .addComponent(lblIssuerLoccalityName)
                            .addComponent(lblIssuerCountry))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIssuerCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIssuerCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIssuerOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIssuerLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnIssuerYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlGenerateIssuerLayout.createSequentialGroup()
                        .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdoIssuerExportPairPKCS12)
                            .addComponent(rdoIssuerExportPairPEM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIssuerExportCA)
                            .addComponent(txtIssuerPKCS12Password))))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        pnlGenerateIssuerLayout.setVerticalGroup(
            pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateIssuerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIssuerYear)
                    .addComponent(spnIssuerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIssuerCommonName)
                    .addComponent(txtIssuerCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIssuerOrganizationName)
                    .addComponent(txtIssuerOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIssuerLoccalityName)
                    .addComponent(txtIssuerLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIssuerCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIssuerCountry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoIssuerExportPairPEM)
                    .addComponent(btnIssuerExportCA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoIssuerExportPairPKCS12)
                    .addComponent(txtIssuerPKCS12Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(695, Short.MAX_VALUE))
        );

        pnlGenerateCA.add(pnlGenerateIssuer, java.awt.BorderLayout.PAGE_START);

        tabGenerateCA.addTab("GenerateCA", pnlGenerateCA);

        pnlSignCA.setLayout(new java.awt.BorderLayout());

        btnGrpIssuerCA.add(rdoBurpIssuerCA);
        rdoBurpIssuerCA.setSelected(true);
        rdoBurpIssuerCA.setText("Burp suite default CA");

        btnGrpIssuerCA.add(rdoCustomIssuerCA);
        rdoCustomIssuerCA.setText("Custom CA File");

        btnSelectIssuerExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_image.png"))); // NOI18N
        btnSelectIssuerExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectIssuerExecuteActionPerformed(evt);
            }
        });

        lblSelectIsserCA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pnlSelectIssuerLayout = new javax.swing.GroupLayout(pnlSelectIssuer);
        pnlSelectIssuer.setLayout(pnlSelectIssuerLayout);
        pnlSelectIssuerLayout.setHorizontalGroup(
            pnlSelectIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectIssuerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSelectIssuerLayout.createSequentialGroup()
                        .addComponent(rdoBurpIssuerCA)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlSelectIssuerLayout.createSequentialGroup()
                        .addComponent(rdoCustomIssuerCA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectIssuerExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSelectIsserCA, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSelectIssuerLayout.setVerticalGroup(
            pnlSelectIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSelectIssuerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoBurpIssuerCA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSelectIssuerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelectIsserCA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlSelectIssuerLayout.createSequentialGroup()
                        .addComponent(rdoCustomIssuerCA)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnSelectIssuerExecute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlSignCA.add(pnlSelectIssuer, java.awt.BorderLayout.NORTH);

        lblSubjectYear.setText("Year:");

        spnSubjectYear.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));

        lblSubjectCommonName.setText("Common Name (CN):");

        lblSubjectOrganizationName.setText("Organization Name (O):");

        lblSubjectLoccalityName.setText("Loccality Name (L):");

        lblSubjectCountry.setText("Country (C):");

        btnGrpExportSubjectCA.add(rdoSubjectExportPairPEM);
        rdoSubjectExportPairPEM.setSelected(true);
        rdoSubjectExportPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpExportSubjectCA.add(rdoSubjectExportPairPKCS12);
        rdoSubjectExportPairPKCS12.setText("Certificate and Private key in PKCS#12 keystore");

        btnSubjectExportCA.setText("Export");
        btnSubjectExportCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubjectExportCAActionPerformed(evt);
            }
        });

        lblSubjectCountry1.setText("SAN(DNS):");

        chkUseSameCommonName.setText("Use the same value as the common name");
        chkUseSameCommonName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUseSameCommonNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGenerateSubjectLayout = new javax.swing.GroupLayout(pnlGenerateSubject);
        pnlGenerateSubject.setLayout(pnlGenerateSubjectLayout);
        pnlGenerateSubjectLayout.setHorizontalGroup(
            pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateSubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGenerateSubjectLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSubjectYear)
                            .addComponent(lblSubjectCommonName)
                            .addComponent(lblSubjectOrganizationName)
                            .addComponent(lblSubjectLoccalityName)
                            .addComponent(lblSubjectCountry))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSubjectCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubjectCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubjectOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubjectLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnSubjectYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubjectSAN, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblSubjectCountry1)
                    .addComponent(chkUseSameCommonName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlGenerateSubjectLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdoSubjectExportPairPKCS12)
                            .addComponent(rdoSubjectExportPairPEM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubjectExportCA)
                            .addComponent(txtSubjectPKCS12Password))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlGenerateSubjectLayout.setVerticalGroup(
            pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateSubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectYear)
                    .addComponent(spnSubjectYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectCommonName)
                    .addComponent(txtSubjectCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectOrganizationName)
                    .addComponent(txtSubjectOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectLoccalityName)
                    .addComponent(txtSubjectLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSubjectCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubjectCountry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSubjectCountry1)
                    .addComponent(txtSubjectSAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUseSameCommonName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoSubjectExportPairPEM)
                    .addComponent(btnSubjectExportCA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoSubjectExportPairPKCS12)
                    .addComponent(txtSubjectPKCS12Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(627, Short.MAX_VALUE))
        );

        pnlSignCA.add(pnlGenerateSubject, java.awt.BorderLayout.CENTER);

        tabGenerateCA.addTab("SignCA", pnlSignCA);

        pnlGenerateKey.setLayout(new java.awt.BorderLayout());

        lbAlgorithm.setText("Algorithm:");

        lblKeySize.setText("KeySize;");

        cmbAlgorithm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAlgorithmItemStateChanged(evt);
            }
        });

        pnlKeySize.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout pnlKeyPairAlgorithmLayout = new javax.swing.GroupLayout(pnlKeyPairAlgorithm);
        pnlKeyPairAlgorithm.setLayout(pnlKeyPairAlgorithmLayout);
        pnlKeyPairAlgorithmLayout.setHorizontalGroup(
            pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKeyPairAlgorithmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbAlgorithm)
                    .addComponent(lblKeySize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlKeyPairAlgorithmLayout.createSequentialGroup()
                        .addComponent(cmbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblKeyPairValid, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                        .addContainerGap(337, Short.MAX_VALUE))
                    .addGroup(pnlKeyPairAlgorithmLayout.createSequentialGroup()
                        .addComponent(pnlKeySize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        pnlKeyPairAlgorithmLayout.setVerticalGroup(
            pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlKeyPairAlgorithmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbAlgorithm)
                        .addComponent(cmbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblKeyPairValid, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlKeyPairAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlKeySize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblKeySize, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlGenerateKey.add(pnlKeyPairAlgorithm, java.awt.BorderLayout.NORTH);

        btnGrpExportKeyPair.add(rdoConvertKeyPairPEM);
        rdoConvertKeyPairPEM.setSelected(true);
        rdoConvertKeyPairPEM.setText("KeyPair in PEM format");

        btnExportKeyPair.setText("Export");
        btnExportKeyPair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportKeyPairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlKeyPairConvertFormatLayout = new javax.swing.GroupLayout(pnlKeyPairConvertFormat);
        pnlKeyPairConvertFormat.setLayout(pnlKeyPairConvertFormatLayout);
        pnlKeyPairConvertFormatLayout.setHorizontalGroup(
            pnlKeyPairConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKeyPairConvertFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoConvertKeyPairPEM)
                .addGap(18, 18, 18)
                .addComponent(btnExportKeyPair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlKeyPairConvertFormatLayout.setVerticalGroup(
            pnlKeyPairConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKeyPairConvertFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlKeyPairConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExportKeyPair)
                    .addComponent(rdoConvertKeyPairPEM))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlGenerateKey.add(pnlKeyPairConvertFormat, java.awt.BorderLayout.CENTER);

        tabGenerateCA.addTab("GenerateKeyPair", pnlGenerateKey);

        add(tabGenerateCA, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final DefaultComboBoxModel modelAlgo = new DefaultComboBoxModel();
    private CustomTableModel modelCertificate = null;

    private void customizeComponents() {
        this.pnlCertificateCA.setLayout(new VerticalFlowLayout());

//        this.modelCertificate = new CustomTableModel(this.tableCertificate.getModel());
//        this.tableCertificate.setModel(this.modelCertificate);
//        this.tableCertificate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
//        this.tableCertificate.setFillsViewportHeight(true);
//
//        // selected
//        this.tableCertificate.getColumnModel().getColumn(0).setMinWidth(20);
//        this.tableCertificate.getColumnModel().getColumn(0).setPreferredWidth(20);
//        this.tableCertificate.getColumnModel().getColumn(0).setMaxWidth(30);
//
//        // StoreType
//        this.tableCertificate.getColumnModel().getColumn(1).setMinWidth(40);
//        this.tableCertificate.getColumnModel().getColumn(1).setPreferredWidth(80);
//        this.tableCertificate.getColumnModel().getColumn(1).setMaxWidth(120);
//
//        //
//        this.tableCertificate.getColumnModel().getColumn(2).setMinWidth(0);
//        this.tableCertificate.getColumnModel().getColumn(2).setPreferredWidth(0);
//        this.tableCertificate.getColumnModel().getColumn(2).setMaxWidth(0);
//
//        // password
//        this.tableCertificate.getColumnModel().getColumn(3).setMinWidth(0);
//        this.tableCertificate.getColumnModel().getColumn(3).setPreferredWidth(0);
//        this.tableCertificate.getColumnModel().getColumn(3).setMaxWidth(0);

        //SwingUtil.setContainerEnable(this.pnlCertSIelectmport, this.rdoCustomCA.isSelected());
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        this.txtSubjectSAN.setEnabled(!this.chkUseSameCommonName.isSelected());

        this.mockServer.setDispatcher(dispatcher);

        this.cmbAlgorithm.setModel(modelAlgo);
        this.modelAlgo.addAll(List.of(ALGORITHM));
        this.cmbAlgorithm.setSelectedIndex(0);

    }

    private final Dispatcher dispatcher = new Dispatcher() {
        @Override
        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
            try {
                if ("/".equals(request.getPath())) {
                    return new MockResponse().addHeader("Content-Type", "text/html; " + "charset=utf-8")
                            .setBody("<html><head><title>" + Version.getInstance().getProjectName() + "</title>\n"
                                    + "<style type=\"text/css\">\n"
                                    + "body { background: #dedede; font-family: Arial, sans-serif; color: #404042; -webkit-font-smoothing: antialiased; }\n"
                                    + "#container { padding: 0 15px; margin: 10px auto; background-color: #ffffff; }\n"
                                    + "a { word-wrap: break-word; }\n"
                                    + "a:link, a:visited { color: #2862e0; text-decoration: none; }\n"
                                    + "a:hover, a:active { color: #404042; text-decoration: underline; }\n"
                                    + "h1 { font-size: 1.6em; line-height: 1.2em; font-weight: normal; color: #404042; }\n"
                                    + "h2 { font-size: 1.3em; line-height: 1.2em; padding: 0; margin: 0.8em 0 0.3em 0; font-weight: normal; color: #404042;}\n"
                                    + ".title { color: #ffffff; background: #2862e0; padding: 10px 15px; margin: 0 -15px 10px -15px; overflow: hidden; }\n"
                                    + ".title h1 { color: #ffffff; padding: 0; margin: 0; font-size: 1.8em; }\n"
                                    + "</style>"
                                    + "</head>\n"
                                    + "<body>\n"
                                    + "<div id=\"container\">\n"
                                    + "<div class=\"title\"><h1>" + Version.getInstance().getProjectName() + "</h1></div>\n"
                                    + "</div>\n"
                                    + "<div><ul>\n"
                                    + "<li><a href=\"/burp-keycert.pem.cer\">Certificate and Private key in PEM format</a></li>\n"
                                    + "<li><a href=\"/burp-cert.pem.cer\">Certificate in PEM format</a></li>\n"
                                    + "<li><a href=\"/burp-private-key.der\">Private key in DER format</a></li>\n"
                                    + "<li><a href=\"/burp-cert.der\">Certificate in DER format</a></li>\n"
                                    + "</ul></div>\n"
                                    + "</body>\n"
                                    + "</html>").setResponseCode(200);
                } else if ("/burp-keycert.pem.cer".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BouncyUtil.exportCertificatePem((PrivateKey)cert.getKey(), cert.getValue());
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-keycert.pem.cer\"")
                            .setBody(exportCA).setResponseCode(200);
                } else if ("/burp-cert.pem.cer".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BouncyUtil.exportCertificatePem(cert.getValue());
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-cert.pem.cer\"")
                            .setBody(exportCA).setResponseCode(200);
                } else if ("/burp-private-key.der".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    byte[] exportCA = BouncyUtil.exportPrivateKeyDer((PrivateKey)cert.getKey());
                    Buffer buffer = new Buffer();
                    buffer.write(exportCA);
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-private-key.der\"")
                            .setBody(buffer).setResponseCode(200);
                } else if ("/burp-cert.der".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    byte[] exportCA = BouncyUtil.exportCertificateDer(cert.getValue());
                    Buffer buffer = new Buffer();
                    buffer.write(exportCA);
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-cert.der\"")
                            .setBody(buffer).setResponseCode(200);
                }
            } catch (IOException ex) {
                return new MockResponse().setResponseCode(500).setBody(StringUtil.getStackTrace(ex));
            }
            return new MockResponse().setResponseCode(404);
        }
    };

    private Map.Entry<Key, X509Certificate> getExportCerticate() {
        Map.Entry<Key, X509Certificate> cert = null;
        HashMap<String, Map.Entry<Key, X509Certificate>> mapCert = null;
        try {
            if (this.rdoBurpCA.isSelected()) {
                KeyStore ks = BurpPreferences.loadCACeart();
                mapCert = CertUtil.loadFromKeyStore(ks, BurpPreferences.getCAPassword());
            } else {
                CertificateItem item = this.customCA;
                if (item == null) {
                    JOptionPane.showMessageDialog(this, BUNDLE.getString("view.certificate.noselect"), "Certificate", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    mapCert = CertUtil.loadFromKeyStore(item.getClientCertificate(), item.getClientCertificatePasswd(), item.getStoreType());
                }
            }
            if (mapCert != null) {
                for (String ailias : mapCert.keySet()) {
                    cert = mapCert.get(ailias);
                    break;
                }
            }
        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return cert;
    }

    private static X509Certificate getX509Certificate(CertificateItem prop) {
        HashMap<String, Map.Entry<Key, X509Certificate>> certMap = CertUtil.loadFromPKCS12(prop.getClientCertificate(), prop.getClientCertificatePasswd());
        for (String key : certMap.keySet()) {
            Map.Entry<Key, X509Certificate> cert = certMap.get(key);
            return cert.getValue();
        }
        return null;
    }

    private final ImportCertificatetDlg importCertificatetDlg = new ImportCertificatetDlg(null, true);

    private final CertificateItem customCA = new CertificateItem();

    private void showImportCertificatetDlg() {
        this.importCertificatetDlg.setLocationRelativeTo(this);
        this.importCertificatetDlg.setVisible(true);
        if (this.importCertificatetDlg.getModalResult() == JOptionPane.OK_OPTION) {
            CertificateItem prop = this.importCertificatetDlg.getProperty();
            this.customCA.setProperty(prop);
//            this.setEditItem(this.certProp, false);
            X509Certificate cert = getX509Certificate(prop);
            String certCN = CertUtil.getSubjectName(cert);
            this.lblSelectCA.setText(certCN);
        }
    }

    private File currentCertificateDirectory = null;

    private void btnExportCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportCAActionPerformed
        Map.Entry<Key, X509Certificate> caCert = this.getExportCerticate();
        if (caCert != null) {
            try {
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                filechooser.setCurrentDirectory(this.currentCertificateDirectory);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoConvertPairPEM.isSelected()) {
                        BouncyUtil.storeCertificatePem((PrivateKey)caCert.getKey(), caCert.getValue(), saveFile);
                    } else if (this.rdoConvertCertificatePEM.isSelected()) {
                        BouncyUtil.storeCertificatePem(caCert.getValue(), saveFile);
                    } else if (this.rdoConvertCertificateDER.isSelected()) {
                        BouncyUtil.storeCertificateDer(caCert.getValue(), saveFile);
                    } else if (this.rdoConvertPrivateDER.isSelected()) {
                        BouncyUtil.storeCertificateDer(caCert.getKey(), saveFile);
                    }
                    this.currentCertificateDirectory = saveFile.getParentFile();
                    //String output = CertUtil.exportToPem(cert.getKey(), cert.getValue());
                    //FileUtil.bytesToFile(StringUtil.getBytesRaw(output), pemFile);
                }
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "No certificate has been selected.", "Certificate", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExportCAActionPerformed

    private final CertificateItem customIssuerCA = new CertificateItem();

    private void showImportIssuerDlg() {
        this.importCertificatetDlg.setLocationRelativeTo(this);
        this.importCertificatetDlg.setVisible(true);
        if (this.importCertificatetDlg.getModalResult() == JOptionPane.OK_OPTION) {
            CertificateItem prop = this.importCertificatetDlg.getProperty();
            this.customIssuerCA.setProperty(prop);
            X509Certificate cert = getX509Certificate(prop);
            String certCN = CertUtil.getSubjectName(cert);
            this.lblSelectIsserCA.setText(certCN);
        }
    }

    private Map.Entry<Key, X509Certificate> getIsserExportCerticate() {
        Map.Entry<Key, X509Certificate> cert = null;
        HashMap<String, Map.Entry<Key, X509Certificate>> mapCert = null;
        try {
            if (this.rdoBurpIssuerCA.isSelected()) {
                KeyStore ks = BurpPreferences.loadCACeart();
                mapCert = CertUtil.loadFromKeyStore(ks, BurpPreferences.getCAPassword());
            } else {
                CertificateItem item = customIssuerCA;
                if (item == null) {
                    JOptionPane.showMessageDialog(this, BUNDLE.getString("view.certificate.noselect"), "Certificate", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    mapCert = CertUtil.loadFromKeyStore(item.getClientCertificate(), item.getClientCertificatePasswd(), item.getStoreType());
                }
            }
            if (mapCert != null) {
                for (String ailias : mapCert.keySet()) {
                    cert = mapCert.get(ailias);
                    break;
                }
            }
        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return cert;
    }


    private void btnProvidedServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvidedServerActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            if (this.mockServer != null) {
                startMockServer((int) this.spnListenPort.getValue());
            }
        } else {
            this.stopMockServer();
        }
    }//GEN-LAST:event_btnProvidedServerActionPerformed

    private void chkProvidedServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkProvidedServerStateChanged
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        if (!this.chkProvidedServer.isSelected()) {
            this.btnProvidedServer.setSelected(false);
            btnProvidedServerActionPerformed(null);
        }
    }//GEN-LAST:event_chkProvidedServerStateChanged

    private void spnListenPortStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnListenPortStateChanged

    }//GEN-LAST:event_spnListenPortStateChanged

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            SwingUtil.systemClipboardCopy(this.mockServer.url("/").url().toExternalForm());
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnSelectExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExecuteActionPerformed
        this.showImportCertificatetDlg();
    }//GEN-LAST:event_btnSelectExecuteActionPerformed

    private void rdoCustomCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCustomCAActionPerformed
//        this.tableCertificate.setEnabled(this.rdoCustomCA.isSelected());
    }//GEN-LAST:event_rdoCustomCAActionPerformed

    private void rdoBurpCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoBurpCAActionPerformed
        rdoCustomCAActionPerformed(evt);
    }//GEN-LAST:event_rdoBurpCAActionPerformed

    private static org.bouncycastle.asn1.x500.X500NameBuilder generateSubjectDN(String commonName, String organizationName, String loccalityName, String country) throws IllegalArgumentException {
        org.bouncycastle.asn1.x500.X500NameBuilder subjectDN = new org.bouncycastle.asn1.x500.X500NameBuilder();
        StringBuilder errorMessage = new StringBuilder();
        if (!commonName.trim().isEmpty()) {
            subjectDN.addRDN(BCStyle.CN, commonName.trim());
        } else {
            if (!errorMessage.isEmpty()) {
                errorMessage.append("/");
            }
            errorMessage.append("CN");
        }
        if (!organizationName.trim().isEmpty()) {
            subjectDN.addRDN(BCStyle.O, organizationName.trim());
        } else {
            if (!errorMessage.isEmpty()) {
                errorMessage.append("/");
            }
            errorMessage.append("O");
        }
        if (!loccalityName.isEmpty()) {
            subjectDN.addRDN(BCStyle.L, loccalityName.trim());
        } else {
            if (!errorMessage.isEmpty()) {
                errorMessage.append("/");
            }
            errorMessage.append("L");
        }
        if (!country.trim().isEmpty()) {
            subjectDN.addRDN(BCStyle.C, country.trim());
        } else {
            if (!errorMessage.isEmpty()) {
                errorMessage.append("/");
            }
            errorMessage.append("C");
        }
        if (errorMessage.length() > 0) {
            throw new IllegalArgumentException(errorMessage.toString());
        }
        return subjectDN;
    }

    private void btnIssuerExportCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIssuerExportCAActionPerformed
        try {
            org.bouncycastle.asn1.x500.X500NameBuilder subjectDN = generateSubjectDN(this.txtIssuerCommonName.getText(), this.txtIssuerOrganizationName.getText(), this.txtIssuerLoccalityName.getText(), this.txtIssuerCountry.getText());
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
            keyGen.initialize(2048);
            KeyPair caKeyPair = keyGen.generateKeyPair();
            X509Certificate issuerCA = BouncyUtil.createRootCA(caKeyPair, subjectDN.build(), (int)this.spnIssuerYear.getValue());
            JFileChooser filechooser = new JFileChooser();
            filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int selected = filechooser.showSaveDialog(this);
            if (selected == JFileChooser.APPROVE_OPTION) {
                File saveFile = filechooser.getSelectedFile();
                if (this.rdoIssuerExportPairPEM.isSelected()) {
                    BouncyUtil.storeCertificatePem(caKeyPair.getPrivate(), issuerCA, saveFile);
                } else if (this.rdoIssuerExportPairPKCS12.isSelected()) {
                    if (this.txtIssuerPKCS12Password.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Empty is password", "Certificate", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        CertUtil.storeToPKCS12(saveFile, this.txtIssuerPKCS12Password.getText(), "caCert", caKeyPair.getPrivate(), issuerCA);
                    }
                }
            }
        } catch (NoSuchAlgorithmException | CertificateException | IOException | KeyStoreException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, String.format("Empty is %s", ex.getMessage()), "Certificate", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnIssuerExportCAActionPerformed

    private void btnSubjectExportCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubjectExportCAActionPerformed
        try {
            org.bouncycastle.asn1.x500.X500NameBuilder subjectDN = generateSubjectDN(this.txtSubjectCommonName.getText(), this.txtSubjectOrganizationName.getText(), this.txtSubjectLoccalityName.getText(), this.txtSubjectCountry.getText());
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
            keyGen.initialize(2048);
            KeyPair subjectKeyPair = keyGen.generateKeyPair();

            String hostname = this.txtSubjectCommonName.getText().trim();
            if (!this.chkUseSameCommonName.isSelected()) {
                hostname = this.txtSubjectSAN.getText().trim();
            }

            PKCS10CertificationRequest csr = BouncyUtil.createCsr(subjectKeyPair, subjectDN.build(), new String [] {hostname});
            Map.Entry<Key, X509Certificate> caCert = this.getIsserExportCerticate();
            if (caCert != null) {
                X509Certificate signCA = BouncyUtil.signCsr(csr, caCert.getValue(), (PrivateKey)caCert.getKey(), (int)this.spnSubjectYear.getValue());

                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoSubjectExportPairPEM.isSelected()) {
                        BouncyUtil.storeCertificatePem(subjectKeyPair.getPrivate(), signCA, saveFile);
                    } else if (this.rdoSubjectExportPairPKCS12.isSelected()) {
                        if (this.txtSubjectPKCS12Password.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Empty is password", "Certificate", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            CertUtil.storeToPKCS12(saveFile, this.txtSubjectPKCS12Password.getText(), "subjectCert", subjectKeyPair.getPrivate(), signCA);
                        }
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "No certificate has been selected.", "Certificate", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NoSuchAlgorithmException | CertificateException | IOException | KeyStoreException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, String.format("Empty is %s", ex.getMessage()), "Certificate", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSubjectExportCAActionPerformed

    private void btnSelectIssuerExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectIssuerExecuteActionPerformed
        this.showImportIssuerDlg();
    }//GEN-LAST:event_btnSelectIssuerExecuteActionPerformed

    private void chkUseSameCommonNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUseSameCommonNameActionPerformed
        this.txtSubjectSAN.setEnabled(!this.chkUseSameCommonName.isSelected());
    }//GEN-LAST:event_chkUseSameCommonNameActionPerformed

    private File currentPrivateKeyDirectory = null;

    private void btnExportKeyPairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportKeyPairActionPerformed
        KeyPair keyPair = this.getExportKeyPair();
        if (keyPair != null) {
            try {
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                filechooser.setCurrentDirectory(this.currentPrivateKeyDirectory);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoConvertKeyPairPEM.isSelected()) {
                        BouncyUtil.storeKeyPairPem(keyPair, saveFile);
                    }
                    this.currentPrivateKeyDirectory = saveFile.getParentFile();
                }
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "No KeyPair has been selected.", "KeyPair", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExportKeyPairActionPerformed

    private void cmbAlgorithmItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAlgorithmItemStateChanged
        int[] keysize_list = new int[0];
        String algo = this.getAlgorithm();
        if ("RSA".equals(algo)) {
            keysize_list = RSA_KEYSIZE;
        }
        else if ("DSA".equals(algo)) {
            keysize_list = DSA_KEYSIZE;
        }
        else if ("EC".equals(algo)) {
            keysize_list = EC_KEYSIZE;
        }
        else if ("Ed25519".equals(algo)) {
            keysize_list = ED_KEYSIZE;
        }
        List<AbstractButton> rdoGroup = ConvertUtil.toList(this.btnGrpAlgorithm.getElements().asIterator());
        for (int i = 0; i < rdoGroup.size(); i++) {
            this.btnGrpAlgorithm.remove(rdoGroup.get(i));
        }
        this.pnlKeySize.removeAll();
        for (int i = 0; i < keysize_list.length; i++) {
            javax.swing.JRadioButton rdoKeySize = new javax.swing.JRadioButton();
            if (i == (keysize_list.length/2)) rdoKeySize.setSelected(true);
            rdoKeySize.setText(String.valueOf(keysize_list[i]));
            rdoKeySize.setActionCommand(String.valueOf(keysize_list[i]));
            this.pnlKeySize.add(rdoKeySize);
            this.btnGrpAlgorithm.add(rdoKeySize);
        }
        this.pnlKeySize.updateUI();

    }//GEN-LAST:event_cmbAlgorithmItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnExportCA;
    private javax.swing.JButton btnExportKeyPair;
    private javax.swing.ButtonGroup btnGrpAlgorithm;
    private javax.swing.ButtonGroup btnGrpCA;
    private javax.swing.ButtonGroup btnGrpExportCertificate;
    private javax.swing.ButtonGroup btnGrpExportIssuerCA;
    private javax.swing.ButtonGroup btnGrpExportKeyPair;
    private javax.swing.ButtonGroup btnGrpExportSubjectCA;
    private javax.swing.ButtonGroup btnGrpFormat;
    private javax.swing.ButtonGroup btnGrpIssuerCA;
    private javax.swing.JButton btnIssuerExportCA;
    private javax.swing.JToggleButton btnProvidedServer;
    private javax.swing.JButton btnSelectExecute;
    private javax.swing.JButton btnSelectIssuerExecute;
    private javax.swing.JButton btnSubjectExportCA;
    private javax.swing.JCheckBox chkProvidedServer;
    private javax.swing.JCheckBox chkUseSameCommonName;
    private javax.swing.JComboBox<String> cmbAlgorithm;
    private javax.swing.JLabel lbAlgorithm;
    private javax.swing.JLabel lblIssuerCommonName;
    private javax.swing.JLabel lblIssuerCountry;
    private javax.swing.JLabel lblIssuerLoccalityName;
    private javax.swing.JLabel lblIssuerOrganizationName;
    private javax.swing.JLabel lblIssuerYear;
    private javax.swing.JLabel lblKeyPairValid;
    private javax.swing.JLabel lblKeySize;
    private javax.swing.JLabel lblListenPort;
    private javax.swing.JLabel lblSelectCA;
    private javax.swing.JLabel lblSelectIsserCA;
    private javax.swing.JLabel lblSubjectCommonName;
    private javax.swing.JLabel lblSubjectCountry;
    private javax.swing.JLabel lblSubjectCountry1;
    private javax.swing.JLabel lblSubjectLoccalityName;
    private javax.swing.JLabel lblSubjectOrganizationName;
    private javax.swing.JLabel lblSubjectYear;
    private javax.swing.JPanel pnlCertificate;
    private javax.swing.JPanel pnlCertificateCA;
    private javax.swing.JPanel pnlCertificateExports;
    private javax.swing.JPanel pnlConvertFormat;
    private javax.swing.JPanel pnlGenerateCA;
    private javax.swing.JPanel pnlGenerateIssuer;
    private javax.swing.JPanel pnlGenerateKey;
    private javax.swing.JPanel pnlGenerateSubject;
    private javax.swing.JPanel pnlKeyPairAlgorithm;
    private javax.swing.JPanel pnlKeyPairConvertFormat;
    private javax.swing.JPanel pnlKeySize;
    private javax.swing.JPanel pnlListenPort;
    private javax.swing.JPanel pnlSelectCertificate;
    private javax.swing.JPanel pnlSelectIssuer;
    private javax.swing.JPanel pnlServerCertificate;
    private javax.swing.JPanel pnlServerEnable;
    private javax.swing.JPanel pnlSignCA;
    private javax.swing.JRadioButton rdoBurpCA;
    private javax.swing.JRadioButton rdoBurpIssuerCA;
    private javax.swing.JRadioButton rdoConvertCertificateDER;
    private javax.swing.JRadioButton rdoConvertCertificatePEM;
    private javax.swing.JRadioButton rdoConvertKeyPairPEM;
    private javax.swing.JRadioButton rdoConvertPairPEM;
    private javax.swing.JRadioButton rdoConvertPrivateDER;
    private javax.swing.JRadioButton rdoCustomCA;
    private javax.swing.JRadioButton rdoCustomIssuerCA;
    private javax.swing.JRadioButton rdoIssuerExportPairPEM;
    private javax.swing.JRadioButton rdoIssuerExportPairPKCS12;
    private javax.swing.JRadioButton rdoSubjectExportPairPEM;
    private javax.swing.JRadioButton rdoSubjectExportPairPKCS12;
    private javax.swing.JSpinner spnIssuerYear;
    private javax.swing.JSpinner spnListenPort;
    private javax.swing.JSpinner spnSubjectYear;
    private javax.swing.JTabbedPane tabGenerateCA;
    private javax.swing.JTextField txtIssuerCommonName;
    private javax.swing.JTextField txtIssuerCountry;
    private javax.swing.JTextField txtIssuerLoccalityName;
    private javax.swing.JTextField txtIssuerOrganizationName;
    private javax.swing.JTextField txtIssuerPKCS12Password;
    private javax.swing.JTextField txtSubjectCommonName;
    private javax.swing.JTextField txtSubjectCountry;
    private javax.swing.JTextField txtSubjectLoccalityName;
    private javax.swing.JTextField txtSubjectOrganizationName;
    private javax.swing.JTextField txtSubjectPKCS12Password;
    private javax.swing.JTextField txtSubjectSAN;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Certificate";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

//    private CertificateItem getEditItem() {
//        CertificateItem item = null;
//        Object editCols[] = SwingUtil.editItem(this.tableCertificate);
//        if (editCols != null) {
//            item = CertificateItem.fromObjects(editCols);
//        }
//        return item;
//    }

//    private void setEditItem(CertificateItem item, boolean update) {
//        Object[] rows = CertificateItem.toObjects(item);
//        SwingUtil.addOrUpdateItem(this.tableCertificate, rows, update);
//    }

    private MockWebServer mockServer = new MockWebServer();

    protected void startMockServer(int port) {
        try {
            this.mockServer.start(port);
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    protected void stopMockServer() {
        try {
            this.mockServer.shutdown();
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    protected String getAlgorithm() {
        return (String) this.cmbAlgorithm.getSelectedItem();
    }

    protected int getKeySize() {
        ButtonModel model = this.btnGrpAlgorithm.getSelection();
        return Integer.parseInt(model.getActionCommand());
    }

    private KeyPair getExportKeyPair() {
        try {
            String algo = this.getAlgorithm();
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance(algo);
            keyGen.initialize(this.getKeySize());
            KeyPair keyPair = keyGen.generateKeyPair();
            return keyPair;
        } catch (NoSuchAlgorithmException ex) {
            this.lblKeyPairValid.setText(BUNDLE.getString("keypair.invalid.algorithm"));
        } catch (InvalidParameterException ex) {
            this.lblKeyPairValid.setText(BUNDLE.getString("keypair.invalid.keysize"));
        } catch (ProviderException ex) {
            this.lblKeyPairValid.setText(BUNDLE.getString("keypair.invalid.keysize"));
        }
        return null;
    }

}
