package yagura.view;

import extension.burp.FilterAnnotationProperty;
import extension.burp.FilterProperty;
import extension.burp.MessageHighlightColor;
import extension.helpers.ConvertUtil;
import extension.helpers.SwingUtil;
import extension.view.layout.VerticalFlowLayout;
import java.util.EnumSet;

/**
 *
 * @author isayan
 */
public class FilterAnnotationPanel extends javax.swing.JPanel {

    /**
     * Creates new form Filterr
     */
    public FilterAnnotationPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAnnotations = new javax.swing.JPanel();
        pnlAnnotation = new javax.swing.JPanel();
        chkShowOnlyComment = new javax.swing.JCheckBox();
        chkShowOnlyHighlight = new javax.swing.JCheckBox();
        pnlHighlightColor = new javax.swing.JPanel();
        chkWhite = new javax.swing.JCheckBox();
        chkRed = new javax.swing.JCheckBox();
        chkOrange = new javax.swing.JCheckBox();
        chkYellow = new javax.swing.JCheckBox();
        chkGreen = new javax.swing.JCheckBox();
        chkCyan = new javax.swing.JCheckBox();
        chkBlue = new javax.swing.JCheckBox();
        chkPink = new javax.swing.JCheckBox();
        chkMagenta = new javax.swing.JCheckBox();
        chkGray = new javax.swing.JCheckBox();
        pnlBottom = new javax.swing.JPanel();
        pnlListenerPort = new javax.swing.JPanel();
        txtLiistenerPort = new javax.swing.JTextField();
        lblListenerPort = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlAnnotations.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by Annotations"));
        pnlAnnotations.setLayout(new java.awt.BorderLayout());

        pnlAnnotation.setLayout(new javax.swing.BoxLayout(pnlAnnotation, javax.swing.BoxLayout.PAGE_AXIS));

        chkShowOnlyComment.setText("Show only comment");
        pnlAnnotation.add(chkShowOnlyComment);

        chkShowOnlyHighlight.setText("Show only highlight");
        chkShowOnlyHighlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyHighlightActionPerformed(evt);
            }
        });
        pnlAnnotation.add(chkShowOnlyHighlight);

        pnlAnnotations.add(pnlAnnotation, java.awt.BorderLayout.NORTH);

        pnlHighlightColor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Highlight Color")));
        pnlHighlightColor.setMinimumSize(new java.awt.Dimension(151, 500));
        pnlHighlightColor.setPreferredSize(new java.awt.Dimension(151, 500));
        pnlHighlightColor.setLayout(new java.awt.GridLayout(10, 1));

        chkWhite.setText("white (none)");
        pnlHighlightColor.add(chkWhite);

        chkRed.setText("red");
        pnlHighlightColor.add(chkRed);

        chkOrange.setText("orange");
        pnlHighlightColor.add(chkOrange);

        chkYellow.setText("yellow");
        pnlHighlightColor.add(chkYellow);

        chkGreen.setText("green");
        pnlHighlightColor.add(chkGreen);

        chkCyan.setText("cyan");
        pnlHighlightColor.add(chkCyan);

        chkBlue.setText("blue");
        pnlHighlightColor.add(chkBlue);

        chkPink.setText("pink");
        pnlHighlightColor.add(chkPink);

        chkMagenta.setText("magenta");
        pnlHighlightColor.add(chkMagenta);

        chkGray.setText("gray");
        pnlHighlightColor.add(chkGray);

        pnlAnnotations.add(pnlHighlightColor, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.BorderLayout());

        pnlListenerPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by listener "));

        lblListenerPort.setText("Port");

        javax.swing.GroupLayout pnlListenerPortLayout = new javax.swing.GroupLayout(pnlListenerPort);
        pnlListenerPort.setLayout(pnlListenerPortLayout);
        pnlListenerPortLayout.setHorizontalGroup(
            pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenerPortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLiistenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        pnlListenerPortLayout.setVerticalGroup(
            pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenerPortLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListenerPort)
                    .addComponent(txtLiistenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlBottom.add(pnlListenerPort, java.awt.BorderLayout.SOUTH);

        pnlAnnotations.add(pnlBottom, java.awt.BorderLayout.SOUTH);

        add(pnlAnnotations, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {
        this.pnlAnnotation.setLayout(new VerticalFlowLayout());
        this.pnlHighlightColor.setLayout(new VerticalFlowLayout());
        this.chkShowOnlyHighlightActionPerformed(null);
    }

    private void chkShowOnlyHighlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyHighlightActionPerformed
        SwingUtil.setContainerEnable(this.pnlHighlightColor, this.chkShowOnlyHighlight.isSelected());
    }//GEN-LAST:event_chkShowOnlyHighlightActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkBlue;
    private javax.swing.JCheckBox chkCyan;
    private javax.swing.JCheckBox chkGray;
    private javax.swing.JCheckBox chkGreen;
    private javax.swing.JCheckBox chkMagenta;
    private javax.swing.JCheckBox chkOrange;
    private javax.swing.JCheckBox chkPink;
    private javax.swing.JCheckBox chkRed;
    private javax.swing.JCheckBox chkShowOnlyComment;
    private javax.swing.JCheckBox chkShowOnlyHighlight;
    private javax.swing.JCheckBox chkWhite;
    private javax.swing.JCheckBox chkYellow;
    private javax.swing.JLabel lblListenerPort;
    private javax.swing.JPanel pnlAnnotation;
    private javax.swing.JPanel pnlAnnotations;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlHighlightColor;
    private javax.swing.JPanel pnlListenerPort;
    private javax.swing.JTextField txtLiistenerPort;
    // End of variables declaration//GEN-END:variables

    public void setAnnotationProperty(FilterAnnotationProperty filterProp) {
        this.txtLiistenerPort.setText(filterProp.getListenerPort() > -1 ? Integer.toString(filterProp.getListenerPort()) : "");
        this.chkShowOnlyComment.setSelected(filterProp.getShowOnlyComment());
        this.chkShowOnlyHighlight.setSelected(filterProp.getShowOnlyHighlightColors());
        this.setHighlightColors(filterProp.getHighlightColors());
        this.chkShowOnlyHighlightActionPerformed(null);
    }

    public FilterAnnotationProperty getAnnotationProperty(FilterAnnotationProperty annotation) {
        annotation.setListenerPort(ConvertUtil.parseIntDefault(this.txtLiistenerPort.getText(), -1));
        annotation.setShowOnlyComment(this.chkShowOnlyComment.isSelected());
        annotation.setShowOnlyHighlightColors(this.chkShowOnlyHighlight.isSelected());
        annotation.setHighlightColors(this.getHighlightColors());
        return annotation;
    }

    protected void setShowOnlyHighlightColors(boolean highlightColors) {
        this.chkShowOnlyHighlight.setSelected(highlightColors);
    }

    public EnumSet<MessageHighlightColor> getHighlightColors() {
        EnumSet<MessageHighlightColor> colors = EnumSet.noneOf(MessageHighlightColor.class);
        if (this.chkWhite.isSelected()) {
            colors.add(MessageHighlightColor.WHITE);
        }
        if (this.chkRed.isSelected()) {
            colors.add(MessageHighlightColor.RED);
        }
        if (this.chkOrange.isSelected()) {
            colors.add(MessageHighlightColor.ORANGE);
        }
        if (this.chkYellow.isSelected()) {
            colors.add(MessageHighlightColor.YELLOW);
        }
        if (this.chkGreen.isSelected()) {
            colors.add(MessageHighlightColor.GREEN);
        }
        if (this.chkCyan.isSelected()) {
            colors.add(MessageHighlightColor.CYAN);
        }
        if (this.chkBlue.isSelected()) {
            colors.add(MessageHighlightColor.BLUE);
        }
        if (this.chkPink.isSelected()) {
            colors.add(MessageHighlightColor.PINK);
        }
        if (this.chkMagenta.isSelected()) {
            colors.add(MessageHighlightColor.MAGENTA);
        }
        if (this.chkGray.isSelected()) {
            colors.add(MessageHighlightColor.GRAY);
        }
        return colors;
    }

    protected void setHighlightColors(EnumSet<MessageHighlightColor> colors) {
        this.chkWhite.setSelected(colors.contains(MessageHighlightColor.WHITE));
        this.chkRed.setSelected(colors.contains(MessageHighlightColor.RED));
        this.chkOrange.setSelected(colors.contains(MessageHighlightColor.ORANGE));
        this.chkYellow.setSelected(colors.contains(MessageHighlightColor.YELLOW));
        this.chkGreen.setSelected(colors.contains(MessageHighlightColor.GREEN));
        this.chkCyan.setSelected(colors.contains(MessageHighlightColor.CYAN));
        this.chkBlue.setSelected(colors.contains(MessageHighlightColor.BLUE));
        this.chkPink.setSelected(colors.contains(MessageHighlightColor.PINK));
        this.chkMagenta.setSelected(colors.contains(MessageHighlightColor.MAGENTA));
        this.chkGray.setSelected(colors.contains(MessageHighlightColor.GRAY));
    }

}
