package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.MontoyaApi;
import java.util.Timer;
import java.util.TimerTask;
import burp.api.montoya.ui.Theme;
import extend.util.external.BrowserUtil;
import extend.util.external.ZipUtil;
import extension.burp.BurpConfig;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicToolBarUI;

/**
 *
 * @author isayan
 */
public class BurpToolBar extends javax.swing.JPanel {
    private final static Logger logger = Logger.getLogger(BurpToolBar.class.getName());

    private final MontoyaApi api;

    /**
     * Creates new form NewJPanel
     * @param api
     */
    public BurpToolBar(final MontoyaApi api) {
        this.api = api;
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        tglIntercept = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnOpenBrowser = new javax.swing.JButton();
        cmbProfile = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JToolBar.Separator();

        setLayout(new java.awt.BorderLayout());

        toolBar.setFloatable(true);
        toolBar.setRollover(true);

        tglIntercept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/untick.png"))); // NOI18N
        tglIntercept.setSelected(true);
        tglIntercept.setText("Intercept off");
        tglIntercept.setFocusable(false);
        tglIntercept.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        tglIntercept.setMaximumSize(new java.awt.Dimension(150, 28));
        tglIntercept.setMinimumSize(new java.awt.Dimension(150, 28));
        tglIntercept.setPreferredSize(new java.awt.Dimension(150, 28));
        tglIntercept.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/tick.png"))); // NOI18N
        tglIntercept.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tglInterceptStateChanged(evt);
            }
        });
        tglIntercept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglInterceptActionPerformed(evt);
            }
        });
        toolBar.add(tglIntercept);
        tglIntercept.getAccessibleContext().setAccessibleDescription("");

        toolBar.add(jSeparator1);

        btnOpenBrowser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/world_go.png"))); // NOI18N
        btnOpenBrowser.setText("Open Browser");
        btnOpenBrowser.setFocusable(false);
        btnOpenBrowser.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnOpenBrowser.setMaximumSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.setMinimumSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.setName(""); // NOI18N
        btnOpenBrowser.setPreferredSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenBrowserActionPerformed(evt);
            }
        });
        toolBar.add(btnOpenBrowser);

        cmbProfile.setMaximumSize(new java.awt.Dimension(200, 28));
        cmbProfile.setMinimumSize(new java.awt.Dimension(60, 28));
        cmbProfile.setName(""); // NOI18N
        cmbProfile.setOpaque(true);
        cmbProfile.setPreferredSize(new java.awt.Dimension(120, 28));
        cmbProfile.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cmbProfilePopupMenuWillBecomeVisible(evt);
            }
        });
        toolBar.add(cmbProfile);
        toolBar.add(jSeparator2);

        add(toolBar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final javax.swing.ImageIcon inspector_on_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-off.svg"));

    private final javax.swing.ImageIcon inspector_on_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-off.svg"));

    private final Timer timer = new Timer();
    private final TimerTask task = new TimerTask() {
        public void run() {
            boolean interceptEnabled = api.proxy().isInterceptEnabled();
            if (interceptEnabled != isIntercept()) {
                setIntercept(interceptEnabled);
            }
        }
    };

//    final PropertyChangeListener listener = new PropertyChangeListener() {
//        @Override
//        public void propertyChange(PropertyChangeEvent evt) {
//            applyStyleTheme(api.userInterface().currentTheme());
//        }
//    };

    private void customizeComponents() {
        this.renewProfile();
        this.timer.schedule(this.task, 0, this.interval_time);
    }

    public void renewProfile() {
        File [] profiles = BrowserUtil.getUserProfile();
        this.cmbProfile.removeAllItems();
        this.cmbProfile.addItem("Default");
        for (File p : profiles) {
            this.cmbProfile.addItem(p.getName());
        }
    }

    private void tglInterceptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tglInterceptStateChanged
        boolean interceptEnabled = isIntercept();
        this.tglIntercept.setText(interceptEnabled ? "Intercept on" : "Intercept off");
    }//GEN-LAST:event_tglInterceptStateChanged

    private void tglInterceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglInterceptActionPerformed
        boolean interceptEnabled = api.proxy().isInterceptEnabled();
        if (interceptEnabled != isIntercept()) {
            if (interceptEnabled) {
                api.proxy().disableIntercept();
            }
            else {
                api.proxy().enableIntercept();
            }
        }
    }//GEN-LAST:event_tglInterceptActionPerformed

    private void btnOpenBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenBrowserActionPerformed
        if (!BrowserUtil.existsBrowseExtensionDirectory()) {
            try {
                File browserExtensions = BrowserUtil.getBrowseExtensionDirectory().toFile();
                browserExtensions.mkdir();
                URL burpJarUrl = BurpExtension.class.getResource("/");
                String burpJar = ZipUtil.getBaseJar(burpJarUrl);
                ZipUtil.decompressZip(new File(burpJar), browserExtensions, "resources/Browser/ChromiumExtension");
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }

        String profile = (String)this.cmbProfile.getSelectedItem();
        BurpConfig.RequestListener listener = BurpConfig.openBrowserRequestListener(api, 8080);
        if (listener != null) {
            BrowserUtil.openBrowser((profile == null) ? "Default" : profile, listener.getListenerPort());
        }
        else {
            JOptionPane.showMessageDialog(null, "fail Open Browser");
        }
    }//GEN-LAST:event_btnOpenBrowserActionPerformed

    private void cmbProfilePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbProfilePopupMenuWillBecomeVisible
        this.renewProfile();
    }//GEN-LAST:event_cmbProfilePopupMenuWillBecomeVisible

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenBrowser;
    private javax.swing.JComboBox<String> cmbProfile;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToggleButton tglIntercept;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    public void applyStyleTheme(Theme theme) {
        switch (theme) {
        case DARK:
            this.tglIntercept.setIcon(inspector_off_dark);
            this.tglIntercept.setSelectedIcon(inspector_on_dark);
            break;
        case LIGHT:
            this.tglIntercept.setIcon(inspector_off_light);
            this.tglIntercept.setSelectedIcon(inspector_on_light);
            break;
        }
        this.tglIntercept.updateUI();
    }


    public void setIntercept(boolean interceptEnabled) {
        this.tglIntercept.setSelected(interceptEnabled);
    }

    public boolean isIntercept() {
        return this.tglIntercept.isSelected();
    }

    private int interval_time = 500;

    public void setFlotingBar(boolean floating) {
        if (toolBar.getUI() instanceof BasicToolBarUI ui) {
            ui.setFloating(floating, null);
        }
    }

//    public void setIntervalTime(int interval_time) {
//        this.interval_time = interval_time;
//    }
//
//    public int getIntervalTime() {
//        return this.interval_time;
//    }

}
