package yagura.view;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.extension.ExtensionUnloadingHandler;
import burp.api.montoya.ui.Theme;
import extend.util.external.BurpBrowser;
import extension.burp.BurpConfig;
import extension.burp.BurpUtil;
import extension.helpers.FileUtil;
import extension.helpers.StringUtil;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.plaf.basic.BasicToolBarUI;

/**
 *
 * @author isayan
 */
public class BurpToolBar extends javax.swing.JPanel implements ExtensionUnloadingHandler {

    private final static Logger logger = Logger.getLogger(BurpToolBar.class.getName());

    private final MontoyaApi api;

    private final BurpBrowser browser;

    /**
     * Creates new form NewJPanel
     *
     * @param api
     */
    public BurpToolBar(final MontoyaApi api) {
        this.api = api;
        this.browser = BurpBrowser.getInstance(api);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupBurpOption = new javax.swing.JPopupMenu();
        mnuLoadProjectSettings = new javax.swing.JMenuItem();
        mnuSaveProjectSettings = new javax.swing.JMenuItem();
        jSeparator0 = new javax.swing.JPopupMenu.Separator();
        mnuLoadUserSettings = new javax.swing.JMenuItem();
        mnuSaveUserSettings = new javax.swing.JMenuItem();
        popupInterceptOption = new javax.swing.JPopupMenu();
        mnuChkRequestBasedRules = new javax.swing.JCheckBoxMenuItem();
        mnuRequestInterceptRules = new javax.swing.JMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuChkResposeBasedRules = new javax.swing.JCheckBoxMenuItem();
        mnuResposeInterceptRule = new javax.swing.JMenu();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mnuChkClientToServerMessages = new javax.swing.JCheckBoxMenuItem();
        mnuChkServerToClientMessages = new javax.swing.JCheckBoxMenuItem();
        mnuChkInterceptInScopeOnly = new javax.swing.JCheckBoxMenuItem();
        toolBar = new javax.swing.JToolBar();
        tglIntercept = new javax.swing.JToggleButton();
        btnInterceptOption = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnOpenBrowser = new javax.swing.JButton();
        cmbProfile = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnWrapTabLayout = new javax.swing.JButton();
        btnScrollTabLayout = new javax.swing.JButton();
        btnBurpOption = new javax.swing.JButton();

        mnuLoadProjectSettings.setText("Load project settings");
        mnuLoadProjectSettings.setToolTipText("");
        mnuLoadProjectSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadProjectSettingsActionPerformed(evt);
            }
        });
        popupBurpOption.add(mnuLoadProjectSettings);

        mnuSaveProjectSettings.setText("Save project settings");
        mnuSaveProjectSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveProjectSettingsActionPerformed(evt);
            }
        });
        popupBurpOption.add(mnuSaveProjectSettings);
        popupBurpOption.add(jSeparator0);

        mnuLoadUserSettings.setText("Load user settings");
        mnuLoadUserSettings.setToolTipText("");
        mnuLoadUserSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadUserSettingsActionPerformed(evt);
            }
        });
        popupBurpOption.add(mnuLoadUserSettings);

        mnuSaveUserSettings.setText("Save user settings");
        mnuSaveUserSettings.setToolTipText("");
        mnuSaveUserSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveUserSettingsActionPerformed(evt);
            }
        });
        popupBurpOption.add(mnuSaveUserSettings);

        mnuChkRequestBasedRules.setSelected(true);
        mnuChkRequestBasedRules.setText("Intercept requests based rules");
        mnuChkRequestBasedRules.setToolTipText("");
        mnuChkRequestBasedRules.setAutoscrolls(true);
        mnuChkRequestBasedRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChkRequestBasedRulesActionPerformed(evt);
            }
        });
        popupInterceptOption.add(mnuChkRequestBasedRules);

        mnuRequestInterceptRules.setText("Request interception rules");
        mnuRequestInterceptRules.setToolTipText("");
        popupInterceptOption.add(mnuRequestInterceptRules);
        popupInterceptOption.add(jSeparator3);

        mnuChkResposeBasedRules.setText("Intercept responses based rules");
        mnuChkResposeBasedRules.setToolTipText("");
        mnuChkResposeBasedRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChkResposeBasedRulesActionPerformed(evt);
            }
        });
        popupInterceptOption.add(mnuChkResposeBasedRules);

        mnuResposeInterceptRule.setText("Response interception rules");
        mnuResposeInterceptRule.setToolTipText("");
        popupInterceptOption.add(mnuResposeInterceptRule);
        popupInterceptOption.add(jSeparator4);

        mnuChkClientToServerMessages.setSelected(true);
        mnuChkClientToServerMessages.setText("Intercept client-to-server messages");
        mnuChkClientToServerMessages.setToolTipText("");
        mnuChkClientToServerMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChkClientToServerMessagesActionPerformed(evt);
            }
        });
        popupInterceptOption.add(mnuChkClientToServerMessages);

        mnuChkServerToClientMessages.setSelected(true);
        mnuChkServerToClientMessages.setText("Intercept server-to-client messages");
        mnuChkServerToClientMessages.setToolTipText("");
        mnuChkServerToClientMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChkServerToClientMessagesActionPerformed(evt);
            }
        });
        popupInterceptOption.add(mnuChkServerToClientMessages);

        mnuChkInterceptInScopeOnly.setText("Only intercept in-scope messages");
        mnuChkInterceptInScopeOnly.setToolTipText("");
        mnuChkInterceptInScopeOnly.setActionCommand("Only intercept in-scope message");
        mnuChkInterceptInScopeOnly.setAutoscrolls(true);
        mnuChkInterceptInScopeOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChkInterceptInScopeOnlyActionPerformed(evt);
            }
        });
        popupInterceptOption.add(mnuChkInterceptInScopeOnly);

        setLayout(new java.awt.BorderLayout());

        toolBar.setFloatable(true);
        toolBar.setRollover(true);

        tglIntercept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/untick.png"))); // NOI18N
        tglIntercept.setSelected(true);
        tglIntercept.setText("Intercept off");
        tglIntercept.setFocusable(false);
        tglIntercept.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        tglIntercept.setMaximumSize(new java.awt.Dimension(150, 28));
        tglIntercept.setMinimumSize(new java.awt.Dimension(150, 28));
        tglIntercept.setPreferredSize(new java.awt.Dimension(150, 28));
        tglIntercept.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/tick.png"))); // NOI18N
        tglIntercept.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tglInterceptStateChanged(evt);
            }
        });
        tglIntercept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglInterceptActionPerformed(evt);
            }
        });
        toolBar.add(tglIntercept);
        tglIntercept.getAccessibleContext().setAccessibleDescription("");

        btnInterceptOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_bell.png"))); // NOI18N
        btnInterceptOption.setToolTipText("");
        btnInterceptOption.setFocusable(false);
        btnInterceptOption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInterceptOption.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInterceptOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterceptOptionActionPerformed(evt);
            }
        });
        toolBar.add(btnInterceptOption);
        toolBar.add(jSeparator1);

        btnOpenBrowser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/world_go.png"))); // NOI18N
        btnOpenBrowser.setText("Open Browser");
        btnOpenBrowser.setFocusable(false);
        btnOpenBrowser.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnOpenBrowser.setMaximumSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.setMinimumSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.setName(""); // NOI18N
        btnOpenBrowser.setPreferredSize(new java.awt.Dimension(150, 28));
        btnOpenBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenBrowserActionPerformed(evt);
            }
        });
        toolBar.add(btnOpenBrowser);

        cmbProfile.setLightWeightPopupEnabled(false);
        cmbProfile.setMaximumSize(new java.awt.Dimension(180, 28));
        cmbProfile.setMinimumSize(new java.awt.Dimension(80, 28));
        cmbProfile.setName(""); // NOI18N
        cmbProfile.setPreferredSize(new java.awt.Dimension(120, 28));
        cmbProfile.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cmbProfilePopupMenuWillBecomeVisible(evt);
            }
        });
        toolBar.add(cmbProfile);
        toolBar.add(jSeparator2);

        btnWrapTabLayout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/application_side_expand.png"))); // NOI18N
        btnWrapTabLayout.setToolTipText("wrap tab layout");
        btnWrapTabLayout.setFocusable(false);
        btnWrapTabLayout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnWrapTabLayout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnWrapTabLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWrapTabLayoutActionPerformed(evt);
            }
        });
        toolBar.add(btnWrapTabLayout);

        btnScrollTabLayout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/application_side_contract.png"))); // NOI18N
        btnScrollTabLayout.setToolTipText("scroll tab layout");
        btnScrollTabLayout.setFocusable(false);
        btnScrollTabLayout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnScrollTabLayout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnScrollTabLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScrollTabLayoutActionPerformed(evt);
            }
        });
        toolBar.add(btnScrollTabLayout);

        btnBurpOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_wrench.png"))); // NOI18N
        btnBurpOption.setToolTipText("burp settings");
        btnBurpOption.setFocusable(false);
        btnBurpOption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBurpOption.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBurpOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBurpOptionActionPerformed(evt);
            }
        });
        toolBar.add(btnBurpOption);

        add(toolBar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final javax.swing.ImageIcon inspector_on_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-off.svg"));

    private final javax.swing.ImageIcon inspector_on_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-off.svg"));

    private final ChangeListener tglButtonChangeListener = new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent e) {
            if (e.getSource() instanceof JToggleButton button) {
                if (button.isSelected() != isIntercept()) {
                    setIntercept(button.isSelected());
                }
            }

        }

    };

    private final DefaultComboBoxModel modelProfile = new DefaultComboBoxModel();

    private void customizeComponents() {
        this.cmbProfile.setModel(this.modelProfile);
        this.renewProfile();
        JToggleButton button = BurpUtil.findSuiteIntercept(BurpUtil.suiteFrame());
        if (button != null) {
            this.tglButtonChangeListener.stateChanged(new ChangeEvent(button));
            button.addChangeListener(this.tglButtonChangeListener);
        }

        this.popupInterceptOption.addPopupMenuListener(new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {

            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {

            }
        });
//        this.timer.schedule(this.task, 0, this.interval_time);
    }

    public boolean isInterceptEnabled() {
        JToggleButton button = BurpUtil.findSuiteIntercept(BurpUtil.suiteFrame());
        if (button != null) {
            return button.isSelected();
        }
        else {
            return api.proxy().isInterceptEnabled();
        }
    }

    public void renewProfile() {
        this.modelProfile.removeAllElements();
        this.modelProfile.addElement(BurpBrowser.BrowserProfile.DEFAULT);
        Map<String, BurpBrowser.BrowserProfile> profiles = this.browser.getBrowserProfile();
        for (Map.Entry<String, BurpBrowser.BrowserProfile> entry : profiles.entrySet()) {
            this.modelProfile.addElement(entry.getValue());
        }
        this.modelProfile.addElement(BurpBrowser.BrowserProfile.GUEST);
    }

    private void tglInterceptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tglInterceptStateChanged
        boolean interceptEnabled = isIntercept();
        this.tglIntercept.setText(interceptEnabled ? "Intercept on" : "Intercept off");
    }//GEN-LAST:event_tglInterceptStateChanged

    private void tglInterceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglInterceptActionPerformed
        boolean interceptEnabled = isInterceptEnabled();
        if (interceptEnabled != isIntercept()) {
            if (interceptEnabled) {
                api.proxy().disableIntercept();
            } else {
                api.proxy().enableIntercept();
            }
        }
    }//GEN-LAST:event_tglInterceptActionPerformed

    private void btnOpenBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenBrowserActionPerformed
        try {
            BurpBrowser.copyBrowserExtension();
            BurpBrowser.BrowserProfile profile = (BurpBrowser.BrowserProfile) this.modelProfile.getSelectedItem();
            BurpConfig.RequestListener listener = BurpConfig.openBrowserRequestListener(api, 8080);
            if (listener != null) {
                browser.openBrowser((profile == null) ? BurpBrowser.BROWSER_PROFILE_DEFAULT : profile.getProfileKey(), listener.getListenerPort());
            } else {
                JOptionPane.showMessageDialog(null, "fail Open Browser");
            }
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_btnOpenBrowserActionPerformed

    private void cmbProfilePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbProfilePopupMenuWillBecomeVisible
        this.renewProfile();
    }//GEN-LAST:event_cmbProfilePopupMenuWillBecomeVisible

    private void btnWrapTabLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWrapTabLayoutActionPerformed
        JTabbedPane tab = BurpUtil.suiteTabbedPane();
        tab.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);
    }//GEN-LAST:event_btnWrapTabLayoutActionPerformed

    private void btnScrollTabLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScrollTabLayoutActionPerformed
        JTabbedPane tab = BurpUtil.suiteTabbedPane();
        tab.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
    }//GEN-LAST:event_btnScrollTabLayoutActionPerformed

    private void btnBurpOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBurpOptionActionPerformed
        Point pt = this.btnBurpOption.getLocation();
        this.popupBurpOption.show(this.toolBar, pt.x, pt.y + this.btnBurpOption.getHeight());
    }//GEN-LAST:event_btnBurpOptionActionPerformed

    private File userSetting;
    private File projectSetting;

    private void mnuLoadUserSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadUserSettingsActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setCurrentDirectory(this.userSetting);
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                File file = filechooser.getSelectedFile();
                this.userSetting = file.getParentFile();
                String config = FileUtil.stringFromFile(file.getAbsoluteFile(), StandardCharsets.UTF_8);
                this.api.burpSuite().importUserOptionsFromJson(config);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "User Settings", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_mnuLoadUserSettingsActionPerformed

    private void mnuSaveUserSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveUserSettingsActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setCurrentDirectory(this.userSetting);
        int selected = filechooser.showSaveDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                File file = filechooser.getSelectedFile();
                if (!BurpConfig.BURP_CONFIG_FILTER.accept(file)) {
                    file = new File(file.getAbsolutePath() + ".json");
                }
                this.userSetting = file.getParentFile();
                String config = this.api.burpSuite().exportUserOptionsAsJson();
                FileUtil.bytesToFile(StringUtil.getBytesUTF8(config), file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "User Settings", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_mnuSaveUserSettingsActionPerformed

    private void mnuLoadProjectSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadProjectSettingsActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setCurrentDirectory(this.projectSetting);
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                File file = filechooser.getSelectedFile();
                this.projectSetting = file.getParentFile();
                String config = FileUtil.stringFromFile(file.getAbsoluteFile(), StandardCharsets.UTF_8);
                this.api.burpSuite().importProjectOptionsFromJson(config);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Project Settings", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_mnuLoadProjectSettingsActionPerformed

    private void mnuSaveProjectSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveProjectSettingsActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BurpConfig.BURP_CONFIG_FILTER);
        filechooser.setCurrentDirectory(this.projectSetting);
        int selected = filechooser.showSaveDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                File file = filechooser.getSelectedFile();
                if (!BurpConfig.BURP_CONFIG_FILTER.accept(file)) {
                    file = new File(file.getAbsolutePath() + ".json");
                }
                this.projectSetting = file.getParentFile();
                String config = this.api.burpSuite().exportProjectOptionsAsJson();
                FileUtil.bytesToFile(StringUtil.getBytesUTF8(config), file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Project Settings", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_mnuSaveProjectSettingsActionPerformed

//        Frame frame = BurpUtil.suiteFrame();
//        JButton setting = BurpUtil.findSuiteButton("settingsButton", frame);
//        if (setting != null) {
//            setting.doClick();
//        }

    /**
     * Intercept requests based on the following rules
     * Request interception rules
     * ---------------------------------------------------------------------
     * Intercept responses based on the following rules
     * Response interception rules
     * ---------------------------------------------------------------------
     * Intercept client-to-server messages
     * Intercept server-to-client messages
     * Only intercept in-scope messages
     */
    private void btnInterceptOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterceptOptionActionPerformed
        this.updatePopupMenuUI();
        Point pt = this.btnInterceptOption.getLocation();
        this.popupInterceptOption.show(this.toolBar, pt.x, pt.y + this.btnInterceptOption.getHeight());
    }//GEN-LAST:event_btnInterceptOptionActionPerformed

    private void mnuChkRequestBasedRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChkRequestBasedRulesActionPerformed
        this.yaguraInterceptAction.actionPerformed(evt);
    }//GEN-LAST:event_mnuChkRequestBasedRulesActionPerformed

    private void mnuChkResposeBasedRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChkResposeBasedRulesActionPerformed
        this.yaguraInterceptAction.actionPerformed(evt);
    }//GEN-LAST:event_mnuChkResposeBasedRulesActionPerformed

    private void mnuChkClientToServerMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChkClientToServerMessagesActionPerformed
        this.yaguraInterceptAction.actionPerformed(evt);
    }//GEN-LAST:event_mnuChkClientToServerMessagesActionPerformed

    private void mnuChkServerToClientMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChkServerToClientMessagesActionPerformed
        this.yaguraInterceptAction.actionPerformed(evt);
    }//GEN-LAST:event_mnuChkServerToClientMessagesActionPerformed

    private void mnuChkInterceptInScopeOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChkInterceptInScopeOnlyActionPerformed
        this.yaguraInterceptAction.actionPerformed(evt);
    }//GEN-LAST:event_mnuChkInterceptInScopeOnlyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBurpOption;
    private javax.swing.JButton btnInterceptOption;
    private javax.swing.JButton btnOpenBrowser;
    private javax.swing.JButton btnScrollTabLayout;
    private javax.swing.JButton btnWrapTabLayout;
    private javax.swing.JComboBox<String> cmbProfile;
    private javax.swing.JPopupMenu.Separator jSeparator0;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JCheckBoxMenuItem mnuChkClientToServerMessages;
    private javax.swing.JCheckBoxMenuItem mnuChkInterceptInScopeOnly;
    private javax.swing.JCheckBoxMenuItem mnuChkRequestBasedRules;
    private javax.swing.JCheckBoxMenuItem mnuChkResposeBasedRules;
    private javax.swing.JCheckBoxMenuItem mnuChkServerToClientMessages;
    private javax.swing.JMenuItem mnuLoadProjectSettings;
    private javax.swing.JMenuItem mnuLoadUserSettings;
    private javax.swing.JMenu mnuRequestInterceptRules;
    private javax.swing.JMenu mnuResposeInterceptRule;
    private javax.swing.JMenuItem mnuSaveProjectSettings;
    private javax.swing.JMenuItem mnuSaveUserSettings;
    private javax.swing.JPopupMenu popupBurpOption;
    private javax.swing.JPopupMenu popupInterceptOption;
    private javax.swing.JToggleButton tglIntercept;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables


    public void updatePopupMenuUI() {
        this.updateInterceptOptionUI();
    }

    /**
     * Intercept Based rules
     */
    public void updateInterceptOptionUI() {
        BurpConfig.InterceptClientRequests requestRule = BurpConfig.getInterceptClientRequests(api);
        this.mnuRequestInterceptRules.setSelected(requestRule.isDoIntercept());
        this.mnuRequestInterceptRules.removeAll();
        List<BurpConfig.InterceptRule> requestRules = requestRule.getRules();
        for (int i = 0; i < requestRules.size(); i++) {
            JCheckBoxMenuItem mnuRuleItem = new JCheckBoxMenuItem();
            mnuRuleItem.setSelected(requestRules.get(i).isEnabled());
            mnuRuleItem.setText(requestRules.get(i).toString());
            mnuRuleItem.addActionListener(yaguraInterceptAction);
            mnuRequestInterceptRules.add(mnuRuleItem);
        }

        BurpConfig.InterceptServerResponses responseRule = BurpConfig.getInterceptServerResponses(api);
        this.mnuResposeInterceptRule.setSelected(responseRule.isDoIntercept());
        this.mnuResposeInterceptRule.removeAll();
        List<BurpConfig.InterceptRule> responseRules = responseRule.getRules();
        for (int i = 0; i < responseRules.size(); i++) {
            JCheckBoxMenuItem mnuRuleItem = new JCheckBoxMenuItem();
            mnuRuleItem.setSelected(responseRules.get(i).isEnabled());
            mnuRuleItem.setText(responseRules.get(i).toString());
            mnuRuleItem.addActionListener(yaguraInterceptAction);
            mnuResposeInterceptRule.add(mnuRuleItem);
        }

        BurpConfig.InterceptWebSocketsMessages wsRule = BurpConfig.getInterceptWebSocketsMessages(api);
        this.mnuChkClientToServerMessages.setSelected(wsRule.isClientToServerMessages());
        this.mnuChkServerToClientMessages.setSelected(wsRule.isServerToClientMessages());
        this.mnuChkInterceptInScopeOnly.setSelected(wsRule.isInterceptInScopeOnly());

    }

    private final ActionListener yaguraInterceptAction = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            BurpConfig.InterceptClientRequests requestRule = BurpConfig.getInterceptClientRequests(api);
            List<BurpConfig.InterceptRule> requestRules = requestRule.getRules();
            requestRule.setDoIntercept(mnuChkRequestBasedRules.isSelected());
            for (int i = 0; i < mnuRequestInterceptRules.getMenuComponentCount(); i++) {
                if (mnuRequestInterceptRules.getMenuComponent(i) instanceof JCheckBoxMenuItem chkMenuItem) {
                    requestRules.get(i).setEnabled(chkMenuItem.isSelected());
                }
            }
            BurpConfig.configInterceptClientRequests(api, requestRule);

            BurpConfig.InterceptServerResponses responseRule = BurpConfig.getInterceptServerResponses(api);
            List<BurpConfig.InterceptRule> responseRules = responseRule.getRules();
            responseRule.setDoIntercept(mnuChkResposeBasedRules.isSelected());
            api.logging().logToOutput("res:" + responseRule.isDoIntercept());
            for (int i = 0; i < mnuResposeInterceptRule.getMenuComponentCount(); i++) {
                if (mnuResposeInterceptRule.getMenuComponent(i) instanceof JCheckBoxMenuItem chkMenuItem) {
                   responseRules.get(i).setEnabled(chkMenuItem.isSelected());
                }
            }
            BurpConfig.configInterceptServerResponses(api, responseRule);

            BurpConfig.InterceptWebSocketsMessages wsRule = BurpConfig.getInterceptWebSocketsMessages(api);
            wsRule.setClientToServerMessages(mnuChkClientToServerMessages.isSelected());
            wsRule.setServerToClientMessages(mnuChkServerToClientMessages.isSelected());
            wsRule.setInterceptInScopeOnly(mnuChkInterceptInScopeOnly.isSelected());

            BurpConfig.configInterceptWebSocketsMessages(api, wsRule);
        }
    };

    public void applyStyleTheme(Theme theme) {
        switch (theme) {
            case DARK: {
                this.tglIntercept.setIcon(inspector_off_dark);
                this.tglIntercept.setSelectedIcon(inspector_on_dark);
                break;
            }
            case LIGHT: {
                this.tglIntercept.setIcon(inspector_off_light);
                this.tglIntercept.setSelectedIcon(inspector_on_light);
                break;
            }
        }
        this.tglIntercept.updateUI();
    }

    public void setIntercept(boolean interceptEnabled) {
        this.tglIntercept.setSelected(interceptEnabled);
    }

    public boolean isIntercept() {
        return this.tglIntercept.isSelected();
    }

    private int interval_time = 500;

    public void setFloatable(boolean floating) {
        this.toolBar.setFloatable(floating);
    }

    public boolean getFloatable() {
        return this.toolBar.isFloatable();
    }

    public void setFlotingBar(boolean floating) {
        if (this.toolBar.getUI() instanceof BasicToolBarUI ui) {
            ui.setFloating(floating, null);
        }
    }

//    public void setIntervalTime(int interval_time) {
//        this.interval_time = interval_time;
//    }
//
//    public int getIntervalTime() {
//        return this.interval_time;
//    }

    @Override
    public void extensionUnloaded() {
        JToggleButton button = BurpUtil.findSuiteIntercept(BurpUtil.suiteFrame());
        if (button != null) {
            button.removeChangeListener(this.tglButtonChangeListener);
        }
    }
}
