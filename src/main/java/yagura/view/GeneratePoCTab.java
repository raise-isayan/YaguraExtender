package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.HttpService;
import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.http.message.params.ParsedHttpParameter;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpRequestEditor;
import extend.util.external.ThemeUI;
import extend.util.external.TransUtil;
import extension.burp.HttpTarget;
import extension.helpers.HttpMesageHelper;
import extension.helpers.HttpUtil;
import extension.helpers.MatchUtil;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.text.JTextComponent;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class GeneratePoCTab extends javax.swing.JPanel implements ExtensionProvidedHttpRequestEditor {

    private final static Logger logger = Logger.getLogger(GeneratePoCTab.class.getName());

    final PropertyChangeListener listener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            ThemeUI.changeStyleTheme(txtGeneratorPoC);
        }
    };

    /**
     * Creates new form GeneraterPoC
     */
    public GeneratePoCTab() {
        initComponents();
        customizeComponents();
    }

    private org.fife.ui.rtextarea.RTextScrollPane scrollGeneratorPoC;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtGeneratorPoC;

    private QuickSearchTab quickSearchTab = new QuickSearchTab();

    private void customizeComponents() {

        /**
         * * UI design start **
         */
        this.txtGeneratorPoC = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        this.scrollGeneratorPoC = new org.fife.ui.rtextarea.RTextScrollPane(txtGeneratorPoC);
        this.txtGeneratorPoC.setWrapStyleWord(false);

        this.txtGeneratorPoC.setClearWhitespaceLinesEnabled(true);
        this.txtGeneratorPoC.setHighlightCurrentLine(true);
        this.txtGeneratorPoC.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtGeneratorPoC.setBackground(SystemColor.text);
        this.txtGeneratorPoC.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        this.splitGeneratorPoC.setRightComponent(this.scrollGeneratorPoC);

        /**
         * * UI design end **
         */
        this.grpGene.add(this.rdoAuto);
        this.grpGene.add(this.rdoUrlencode);
        this.grpGene.add(this.rdoMultipart);
        this.grpGene.add(this.rdoPlain);
        this.quickSearchTab.setSelectedTextArea(this.txtGeneratorPoC);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);

        this.txtGeneratorPoC.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);

//        this.txtGeneratorPoC.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
//        this.txtGeneratorPoC.setContentType("text/html");
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.listener.propertyChange(null);
        ThemeUI.addPropertyChangeListener(listener);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGene = new javax.swing.ButtonGroup();
        splitGeneratorPoC = new javax.swing.JSplitPane();
        pnlPoC = new javax.swing.JPanel();
        pnlButton = new javax.swing.JPanel();
        btnSavetoFile = new javax.swing.JButton();
        btnCopyClipbord = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        pnlCheck = new javax.swing.JPanel();
        chkAutoSubmit = new javax.swing.JCheckBox();
        chkTimeDelay = new javax.swing.JCheckBox();
        chkGETmethod = new javax.swing.JCheckBox();
        chkUseHttps = new javax.swing.JCheckBox();
        chkHtml5 = new javax.swing.JCheckBox();
        chkHtml5WithXHeader = new javax.swing.JCheckBox();
        spnTime = new javax.swing.JSpinner();
        chkMultiForm = new javax.swing.JCheckBox();
        pnlSelect = new javax.swing.JPanel();
        rdoPlain = new javax.swing.JRadioButton();
        rdoMultipart = new javax.swing.JRadioButton();
        rdoUrlencode = new javax.swing.JRadioButton();
        rdoAuto = new javax.swing.JRadioButton();

        setLayout(new java.awt.BorderLayout());

        splitGeneratorPoC.setDividerLocation(160);
        splitGeneratorPoC.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPoC.setLayout(new java.awt.GridLayout(1, 3));

        btnSavetoFile.setText("Save to file");
        btnSavetoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavetoFileActionPerformed(evt);
            }
        });

        btnCopyClipbord.setText("Copy to Clipbord");
        btnCopyClipbord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyClipbordActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerate)
                    .addComponent(btnCopyClipbord)
                    .addComponent(btnSavetoFile))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyClipbord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavetoFile)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlButton);

        chkAutoSubmit.setText("auto submit");

        chkTimeDelay.setText("Time delay (ms)");

        chkGETmethod.setText("GET method");

        chkUseHttps.setText("use https");

        chkHtml5.setText("Html5");
        chkHtml5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkHtml5StateChanged(evt);
            }
        });

        chkHtml5WithXHeader.setText("with X- Header");
        chkHtml5WithXHeader.setEnabled(false);

        spnTime.setValue(1000);

        chkMultiForm.setText("multi form (with target=blank)");

        javax.swing.GroupLayout pnlCheckLayout = new javax.swing.GroupLayout(pnlCheck);
        pnlCheck.setLayout(pnlCheckLayout);
        pnlCheckLayout.setHorizontalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addComponent(chkAutoSubmit)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(chkHtml5WithXHeader))
                            .addComponent(chkMultiForm)
                            .addComponent(chkHtml5)
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addComponent(chkTimeDelay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addComponent(chkUseHttps)
                                .addGap(22, 22, 22)
                                .addComponent(chkGETmethod)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlCheckLayout.setVerticalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAutoSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTimeDelay)
                    .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkGETmethod)
                    .addComponent(chkUseHttps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMultiForm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHtml5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHtml5WithXHeader)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlCheck);

        pnlSelect.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Content-Type"));

        rdoPlain.setText("plain");

        rdoMultipart.setText("multi part");

        rdoUrlencode.setText("urlencode");

        rdoAuto.setSelected(true);
        rdoAuto.setText("auto");

        javax.swing.GroupLayout pnlSelectLayout = new javax.swing.GroupLayout(pnlSelect);
        pnlSelect.setLayout(pnlSelectLayout);
        pnlSelectLayout.setHorizontalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoUrlencode)
                    .addComponent(rdoAuto)
                    .addComponent(rdoMultipart)
                    .addComponent(rdoPlain))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        pnlSelectLayout.setVerticalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoUrlencode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoMultipart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoPlain)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlSelect);

        splitGeneratorPoC.setLeftComponent(pnlPoC);

        add(splitGeneratorPoC, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private void btnSavetoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavetoFileActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        String encoding = this.quickSearchTab.getSelectedEncoding();
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int selected = filechooser.showSaveDialog(null);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            if (SwingUtil.isFileOverwriteConfirmed(file, String.format(BUNDLE.getString("extend.exists.overwrite.message"), file.getName()), BUNDLE.getString("extend.exists.overwrite.confirm"))) {
                try (BufferedOutputStream fstm = new BufferedOutputStream(new FileOutputStream(file))) {
                    fstm.write(StringUtil.getBytesCharset(ta.getText(), encoding));
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        }
    }//GEN-LAST:event_btnSavetoFileActionPerformed

    private void btnCopyClipbordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyClipbordActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        SwingUtil.systemClipboardCopy(ta.getText());
    }//GEN-LAST:event_btnCopyClipbordActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        final GenerateCsrfParameter csrfParam = getGenerateCsrfParameter();
        SwingWorker swPoC = new SwingWorker<String, Object>() {
            @Override
            protected String doInBackground() throws Exception {
                publish("...");
                if (csrfParam.isCsrfHtml5()) {
                    return generateHTML5PoC(csrfParam);
                } else {
                    return generatePoC(csrfParam);
                }
            }

            @Override
            protected void process(List<Object> chunks) {
                ta.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
            }

            @Override
            protected void done() {
                try {
                    ta.setText(get());
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (Exception ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        };
        swPoC.execute();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void chkHtml5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkHtml5StateChanged
//        this.chkHtml5Binaly.setEnabled(this.chkHtml5.isSelected());
        this.chkHtml5WithXHeader.setEnabled(this.chkHtml5.isSelected());
    }//GEN-LAST:event_chkHtml5StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyClipbord;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSavetoFile;
    private javax.swing.JCheckBox chkAutoSubmit;
    private javax.swing.JCheckBox chkGETmethod;
    private javax.swing.JCheckBox chkHtml5;
    private javax.swing.JCheckBox chkHtml5WithXHeader;
    private javax.swing.JCheckBox chkMultiForm;
    private javax.swing.JCheckBox chkTimeDelay;
    private javax.swing.JCheckBox chkUseHttps;
    private javax.swing.ButtonGroup grpGene;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlCheck;
    private javax.swing.JPanel pnlPoC;
    private javax.swing.JPanel pnlSelect;
    private javax.swing.JRadioButton rdoAuto;
    private javax.swing.JRadioButton rdoMultipart;
    private javax.swing.JRadioButton rdoPlain;
    private javax.swing.JRadioButton rdoUrlencode;
    private javax.swing.JSplitPane splitGeneratorPoC;
    private javax.swing.JSpinner spnTime;
    // End of variables declaration//GEN-END:variables

    public void setMessageFont(Font font) {
        this.txtGeneratorPoC.setFont(font);
        this.quickSearchTab.setMessageFont(font);
    }

    private HttpRequestResponse httpRequestResponse;

    public void setMessageEncoding(String encoding) {
        try {
            if (this.httpRequestResponse == null) {
                return;
            }
            JTextComponent ta = this.txtGeneratorPoC;
            if (this.httpRequestResponse != null) {
                // Raw
                ta.setText("");
                ta.setCaretPosition(0);
                // View
            } else {
                ta.setText("");
                ta.setCaretPosition(0);
            }
            this.quickSearchTab.clearView();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    protected class GenerateCsrfParameter {

        private boolean csrfAutoSubmit = false;
        private int timeOutValue = 1000;
        public boolean csrfAuto = false;
        private boolean csrfUrlencode = false;
        private boolean csrfMultiPart = false;
        private boolean csrfTextPlain = false;
        private String csrfEncoding = StandardCharsets.ISO_8859_1.name();
        public boolean csrfHtml5 = false;
        private boolean csrfHtml5Binaly = false;
        private boolean csrfHtml5WithXHeader = false;
        private boolean csrfGetMethod = false;
        private boolean csrfMultiForm = false;
        public boolean useHttps = false;
        private boolean csrfTimeDelay = false;

        /**
         * @return the csrfAutoSubmit
         */
        public boolean isCsrfAutoSubmit() {
            return csrfAutoSubmit;
        }

        /**
         * @param csrfAutoSubmit the csrfAutoSubmit to set
         */
        public void setCsrfAutoSubmit(boolean csrfAutoSubmit) {
            this.csrfAutoSubmit = csrfAutoSubmit;
        }

        /**
         * @return the timeOutValue
         */
        public int getTimeOutValue() {
            return timeOutValue;
        }

        /**
         * @param timeOutValue the timeOutValue to set
         */
        public void setTimeOutValue(int timeOutValue) {
            this.timeOutValue = timeOutValue;
        }

        /**
         * @return the csrfAuto
         */
        public boolean isCsrfAuto() {
            return csrfAuto;
        }

        /**
         * @param csrfAuto the csrfAuto to set
         */
        public void setCsrfAuto(boolean csrfAuto) {
            this.csrfAuto = csrfAuto;
        }

        /**
         * @return the csrfUrlencode
         */
        public boolean isCsrfUrlencode() {
            return csrfUrlencode;
        }

        /**
         * @param csrfUrlencode the csrfUrlencode to set
         */
        public void setCsrfUrlencode(boolean csrfUrlencode) {
            this.csrfUrlencode = csrfUrlencode;
        }

        /**
         * @return the csrfMultiPart
         */
        public boolean isCsrfMultiPart() {
            return csrfMultiPart;
        }

        /**
         * @param csrfMultiPart the csrfMultiPart to set
         */
        public void setCsrfMultiPart(boolean csrfMultiPart) {
            this.csrfMultiPart = csrfMultiPart;
        }

        /**
         * @return the csrfTextPlain
         */
        public boolean isCsrfTextPlain() {
            return csrfTextPlain;
        }

        /**
         * @param csrfTextPlain the csrfTextPlain to set
         */
        public void setCsrfTextPlain(boolean csrfTextPlain) {
            this.csrfTextPlain = csrfTextPlain;
        }

        /**
         * @return the csrfEncoding
         */
        public String getCsrfEncoding() {
            return csrfEncoding;
        }

        /**
         * @param csrfEncoding the csrfEncoding to set
         */
        public void setCsrfEncoding(String csrfEncoding) {
            this.csrfEncoding = csrfEncoding;
        }

        /**
         * @return the csrfHtml5
         */
        public boolean isCsrfHtml5() {
            return csrfHtml5;
        }

        /**
         * @param csrfHtml5 the csrfHtml5 to set
         */
        public void setCsrfHtml5(boolean csrfHtml5) {
            this.csrfHtml5 = csrfHtml5;
        }

        /**
         * @return the csrfHtml5Binaly
         */
        public boolean isCsrfHtml5Binaly() {
            return csrfHtml5Binaly;
        }

        /**
         * @param csrfHtml5Binaly the csrfHtml5Binaly to set
         */
        public void setCsrfHtml5Binaly(boolean csrfHtml5Binaly) {
            this.csrfHtml5Binaly = csrfHtml5Binaly;
        }

        /**
         * @return the csrfHtml5WithXHeader
         */
        public boolean isCsrfHtml5WithXHeader() {
            return csrfHtml5WithXHeader;
        }

        /**
         * @param csrfHtml5WithXHeader the csrfHtml5WithXHeader to set
         */
        public void setCsrfHtml5WithXHeader(boolean csrfHtml5WithXHeader) {
            this.csrfHtml5WithXHeader = csrfHtml5WithXHeader;
        }

        /**
         * @return the csrfGetMethod
         */
        public boolean isCsrfGetMethod() {
            return csrfGetMethod;
        }

        /**
         * @param csrfGetMethod
         */
        public void setCsrfGetMethod(boolean csrfGetMethod) {
            this.csrfGetMethod = csrfGetMethod;
        }

        /**
         * @return the csrfMultiForm
         */
        public boolean isCsrfMultiForm() {
            return csrfMultiForm;
        }

        /**
         * @param csrfMultiForm the csrfMultiForm to set
         */
        public void setCsrfMultiForm(boolean csrfMultiForm) {
            this.csrfMultiForm = csrfMultiForm;
        }

        /**
         * @return the useHttps
         */
        public boolean isUseHttps() {
            return useHttps;
        }

        /**
         * @param useHttps the useHttps to set
         */
        public void setUseHttps(boolean useHttps) {
            this.useHttps = useHttps;
        }

        /**
         * @return the csrfTimeDelay
         */
        public boolean isCsrfTimeDelay() {
            return csrfTimeDelay;
        }

        /**
         * @param csrfTimeDelay the csrfTimeDelay to set
         */
        public void setCsrfTimeDelay(boolean csrfTimeDelay) {
            this.csrfTimeDelay = csrfTimeDelay;
        }

    }

    protected String generateMultiFormFunction(boolean isCsrfTimeDelay) {
        String timeDelay = isCsrfTimeDelay ? "msec" : "";
        StringBuilder buff = new StringBuilder();
        buff.append(String.format("function csrfPoC(%s) {" + HttpUtil.LINE_TERMINATE, new Object[]{timeDelay}));
        buff.append("\tfor(let i = 0; i < document.forms.length; i++) {").append(HttpUtil.LINE_TERMINATE);
        if (isCsrfTimeDelay) {
            buff.append("\t\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
        }
        buff.append("\t\tdocument.forms[i].submit();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t}").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    protected String generateTimeDelayFunction() {
        StringBuilder buff = new StringBuilder();
        buff.append("function msleep(msec) {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tvar preDate = new Date();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tvar curDate = preDate;").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tdo {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t\tcurDate = new Date();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t} while(curDate - preDate < msec);").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        buff.append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    protected GenerateCsrfParameter getGenerateCsrfParameter() {
        GenerateCsrfParameter csrfParam = new GenerateCsrfParameter();
        csrfParam.setCsrfAutoSubmit(this.chkAutoSubmit.isSelected());
        csrfParam.setTimeOutValue((int) this.spnTime.getValue());
        csrfParam.setCsrfAuto(this.rdoAuto.isSelected());
        csrfParam.setCsrfUrlencode(this.rdoUrlencode.isSelected());
        csrfParam.setCsrfMultiPart(this.rdoMultipart.isSelected());
        csrfParam.setCsrfTextPlain(this.rdoPlain.isSelected());
        csrfParam.setCsrfEncoding(this.quickSearchTab.getSelectedEncoding());
        csrfParam.setCsrfHtml5(this.chkHtml5.isSelected());
        csrfParam.setCsrfHtml5WithXHeader(this.chkHtml5WithXHeader.isSelected());
        csrfParam.setCsrfGetMethod(this.chkGETmethod.isSelected());
        csrfParam.setCsrfMultiForm(this.chkMultiForm.isSelected());
        csrfParam.setUseHttps(this.chkUseHttps.isSelected());
        csrfParam.setCsrfTimeDelay(this.chkTimeDelay.isSelected());
        return csrfParam;
    }

    private String generatePoC(GenerateCsrfParameter csrfParam) {
        final StringBuilder buff = new StringBuilder();
        try {
            boolean csrfAutoSubmit = csrfParam.isCsrfAutoSubmit();
            boolean csrfMultiForm = csrfParam.isCsrfMultiForm();
            boolean csrfUrlencode = csrfParam.isCsrfUrlencode();
            boolean csrfMultiPart = csrfParam.isCsrfMultiPart();
            boolean csrfTextPlain = csrfParam.isCsrfTextPlain();
            int timeOutValue = (int) csrfParam.getTimeOutValue();
            String csrfEncoding = csrfParam.getCsrfEncoding();
            MontoyaApi api = BurpExtension.api();
            final HttpRequest httpRequest = this.httpRequestResponse.request();
            // 自動判定
            String contentType = HttpMesageHelper.getEncodeType(httpRequest);
            String csrfEnctype = (contentType == null) ? "application/x-www-form-urlencoded" : contentType;
            // select auto
            if (csrfParam.isCsrfAuto()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                        csrfEnctype = "text/plain"; // 固定
                    }
                }
                logger.log(Level.FINE, "multipart:{0}", csrfMultiPart);
            } else {
                // select urlencode mode
                if (csrfUrlencode) {
                    csrfEnctype = "application/x-www-form-urlencoded";
                }
                // select multipart
                if (csrfMultiPart) {
                    csrfEnctype = "multipart/form-data";
                }
                // select text/plain
                if (csrfTextPlain) {
                    csrfEnctype = "text/plain"; // 固定
                }
            }

            String csrfFormMethod = csrfParam.isCsrfGetMethod() ? "GET" : httpRequest.method();
            HttpTarget httpService = HttpTarget.getHttpTarget(httpRequest.httpService().host(), httpRequest.httpService().port(), csrfParam.isUseHttps());
            String csrfUrl = httpRequest.url();
            buff.append("<html>").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("<head><meta http-equiv=\"Content-type\" content=\"text/html; charset='%s'\">" + HttpUtil.LINE_TERMINATE, new Object[]{csrfEncoding}));

            buff.append("<script type=\"text/javascript\">").append(HttpUtil.LINE_TERMINATE);
            if (csrfParam.isCsrfTimeDelay()) {
                buff.append(generateTimeDelayFunction());
            }
            if (csrfMultiForm) {
                buff.append(generateMultiFormFunction(csrfParam.isCsrfTimeDelay()));
            } else {
                String timeDelay = csrfParam.isCsrfTimeDelay() ? "msec" : "";
                buff.append(String.format("function csrfPoC(%s) {" + HttpUtil.LINE_TERMINATE, new Object[]{timeDelay}));
                if (csrfParam.isCsrfTimeDelay()) {
                    buff.append("\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
                }
                buff.append("\tdocument.forms[0].submit();").append(HttpUtil.LINE_TERMINATE);
                buff.append("}").append(HttpUtil.LINE_TERMINATE);
            }
            buff.append("</script></head>").append(HttpUtil.LINE_TERMINATE);

            String autoSubmit = "";
            if (csrfAutoSubmit) {
                autoSubmit = " onload=\"csrfPoC();\"";
                if (csrfParam.isCsrfTimeDelay()) {
                    autoSubmit = String.format(" onload=\"csrfPoC(%d);\"", new Object[]{timeOutValue});
                }
            }
            buff.append(String.format("<body%s>" + HttpUtil.LINE_TERMINATE, new Object[]{autoSubmit}));
            buff.append("<!-- begen form -->" + HttpUtil.LINE_TERMINATE);
            String targetLink = (csrfParam.isCsrfMultiForm()) ? "target=\"_blank\"" : "";
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                if (HttpUtil.isUrlEencoded(csrfEnctype)) {
                    buff.append(String.format("<form action=\"%s\" method=\"%s\" %s>" + HttpUtil.LINE_TERMINATE,
                            new Object[]{csrfUrl, csrfFormMethod, targetLink}));
                } else {
                    buff.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\" %s>" + HttpUtil.LINE_TERMINATE,
                            new Object[]{csrfUrl, csrfFormMethod, csrfEnctype, targetLink}));
                }
                List<ParsedHttpParameter> parameters = httpRequest.parameters();
                logger.log(Level.FINE, "parameters.length:{0}", parameters.size());
                boolean binaryParam = false;
                String filename = "";
                for (int i = 0; i < parameters.size(); i++) {
                    ParsedHttpParameter param = parameters.get(i);
                    String paramName = param.name();
                    String paramValue = param.value();
                    HttpParameterType paramType = param.type();
                    if (paramType == HttpParameterType.COOKIE) {
                        continue;
                    }
                    if (paramType == HttpParameterType.URL) {
                        paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                        paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                        if (MatchUtil.isUrlencoded(paramName)) {
                            paramName = TransUtil.decodeUrl(paramName, csrfEncoding);
                        }
                        if (MatchUtil.isUrlencoded(paramValue)) {
                            paramValue = TransUtil.decodeUrl(paramValue, csrfEncoding);
                        }
                        String decodename = HttpUtil.toHtmlEncode(paramName);
                        String decodevalue = HttpUtil.toHtmlEncode(paramValue);
                        buff.append(String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">" + HttpUtil.LINE_TERMINATE,
                                new Object[]{decodename, decodevalue}));
                    } else if (paramType == HttpParameterType.BODY && !binaryParam) {
                        //if Resuest MultiPart binaryParam;
                        if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                            paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                            // ファイルアップロード時エンコードを判定しない
                            if (binaryParam) {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), StandardCharsets.ISO_8859_1);
                            } else {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                        } else {
                            if (MatchUtil.isUrlencoded(paramName)) {
                                paramName = TransUtil.decodeUrl(paramName, csrfEncoding);
                            }
                            if (MatchUtil.isUrlencoded(paramValue)) {
                                paramValue = TransUtil.decodeUrl(paramValue, csrfEncoding);
                            }
                        }
                        String decodename = HttpUtil.toHtmlEncode(paramName);
                        String decodevalue = HttpUtil.toHtmlEncode(paramValue);
                        buff.append(String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">" + HttpUtil.LINE_TERMINATE,
                                new Object[]{decodename, decodevalue}));
                    } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                        binaryParam = true;
                        filename = paramValue;
                    } else {
                        String file_encoding = csrfEncoding;
                        String decodevalue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), file_encoding);
                        buff.append("<!-- Internet Explorer browser only technique -->" + HttpUtil.LINE_TERMINATE);
                        buff.append(String.format("<textarea name=\"%s&quot;; filename=&quot;%s&quot;&#x0d;&#x0a;Content-Type: text/plain; charset=%s\">",
                                new Object[]{paramName, filename, file_encoding}));
                        buff.append(HttpUtil.toHtmlEncode(decodevalue));
                        buff.append("</textarea>");
                        binaryParam = false;
                    }
                }
            } else {
                // csrf textplain
                buff.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\" %s>" + HttpUtil.LINE_TERMINATE,
                        new Object[]{csrfUrl, csrfFormMethod, csrfEnctype, targetLink}));
                Map.Entry<String, String> pair = HttpUtil.getParameter(StringUtil.getStringCharset(httpRequest.body().getBytes(), csrfEncoding));
                String key = pair.getKey();
                String val = pair.getValue();
                if ("".equals(val)) {
                    String sp[] = key.split("=", 2);
                    if (sp.length == 1) {
                        buff.append(String.format("<textarea name=\"%s\">%s</textarea>",
                                new Object[]{HttpUtil.toHtmlEncode(sp[0]), ""}));
                    } else {
                        buff.append(String.format("<textarea name=\"%s\">%s</textarea>",
                                new Object[]{HttpUtil.toHtmlEncode(sp[0]), HttpUtil.toHtmlEncode(sp[1])}));
                    }
                } else {
                    buff.append(String.format("<textarea name=\"%s\">%s</textarea>",
                            new Object[]{HttpUtil.toHtmlEncode(key), HttpUtil.toHtmlEncode(val)}));
                }
            }
            if (!csrfAutoSubmit) {
                autoSubmit = " onClick=\"csrfPoC()\"";
                if (csrfParam.isCsrfTimeDelay()) {
                    autoSubmit = String.format(" onClick=\"csrfPoC(%d);\"", new Object[]{timeOutValue});
                }
                buff.append(String.format("<input type=\"button\" value=\"Submit\" %s>" + HttpUtil.LINE_TERMINATE, autoSubmit));
            }
            buff.append("</form>").append(HttpUtil.LINE_TERMINATE);
            buff.append("<!-- end form -->").append(HttpUtil.LINE_TERMINATE);
            buff.append("</body></html>").append(HttpUtil.LINE_TERMINATE);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return buff.toString();
    }

    private String generateHTML5PoC(GenerateCsrfParameter csrfParam) {
        final StringBuilder buff = new StringBuilder();
        try {
            boolean csrfAutoSubmit = csrfParam.isCsrfAutoSubmit();
            boolean csrfMultiForm = csrfParam.isCsrfMultiForm();
            boolean csrfUrlencode = csrfParam.isCsrfUrlencode();
            boolean csrfMultiPart = csrfParam.isCsrfMultiPart();
            boolean csrfTextPlain = csrfParam.isCsrfTextPlain();
            String csrfEncoding = csrfParam.getCsrfEncoding();
            int timeOutValue = (int) csrfParam.getTimeOutValue();
            boolean csrfHtml5WithXHeader = csrfParam.isCsrfHtml5WithXHeader();

            final HttpRequest httpRequest = this.httpRequestResponse.request();
            String contentType = HttpMesageHelper.getEncodeType(httpRequest);
            String csrfEnctype = (contentType == null) ? "application/x-www-form-urlencoded" : contentType;
            // 自動判定
            if (csrfParam.isCsrfAuto()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                    }
                }
                logger.log(Level.FINE, "multipart:{0}", csrfMultiPart);
            } else {
                // select urlencode mode
                if (csrfUrlencode) {
                    csrfEnctype = "application/x-www-form-urlencoded";
                }
                // select multipart
                if (csrfMultiPart) {
                    csrfEnctype = "multipart/form-data";
                }
                // select text/plain
                if (csrfTextPlain) {
                    csrfEnctype = "text/plain"; // 固定
                }
            }
            String csrfFormMethod = csrfParam.isCsrfGetMethod() ? "GET" : httpRequest.method();
            HttpTarget httpService = HttpTarget.getHttpTarget(httpRequest.httpService().host(), httpRequest.httpService().port(), csrfParam.isUseHttps());
            String csrfUrl = httpRequest.url();

            buff.append("<html>").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("<head><meta http-equiv=\"Content-type\" content=\"text/html; charset='%s'\">" + HttpUtil.LINE_TERMINATE, new Object[]{csrfEncoding}));

            // 現在時刻
            LocalDateTime localDateTime = LocalDateTime.now();
            DateTimeFormatter localfmt = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");

            String timeDelay = csrfParam.isCsrfTimeDelay() ? "msec" : "";
            buff.append("<script type=\"text/javascript\">").append(HttpUtil.LINE_TERMINATE);
            if (csrfParam.isCsrfTimeDelay()) {
                buff.append(generateTimeDelayFunction());
            }
            if (csrfMultiForm) {
                buff.append(generateMultiFormFunction(csrfParam.isCsrfTimeDelay()));
            }

            String submitFunction = "csrfPoC";
            if (csrfParam.isCsrfMultiForm()) {
                submitFunction = String.format("csrfSubmit%s", new Object[]{localfmt.format(localDateTime)});
            }
            buff.append("// begen script").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("function %s(%s) {" + HttpUtil.LINE_TERMINATE, new Object[]{submitFunction, timeDelay}));
            buff.append("\tvar xhr = new XMLHttpRequest();").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("\txhr.open('%s', '%s', true);" + HttpUtil.LINE_TERMINATE, new Object[]{csrfFormMethod, TransUtil.encodeJsLangQuote(csrfUrl, false)}));
            buff.append("\txhr.withCredentials = true;").append(HttpUtil.LINE_TERMINATE);       // Cookieを付与
            if (csrfHtml5WithXHeader) {
                List<HttpHeader> headers = httpRequest.headers();
                for (HttpHeader header : headers) {
                    if (header.name().startsWith("X-")) {
                        String name = header.name();
                        String value = header.value();
                        buff.append(String.format("\txhr.setRequestHeader('%s', '%s');" + HttpUtil.LINE_TERMINATE, TransUtil.encodeJsLangQuote(name, false), TransUtil.encodeJsLangQuote(value, false)));
                    }
                }
            }
            buff.append("\tvar req = '';").append(HttpUtil.LINE_TERMINATE);
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                String boundary = HttpUtil.generateBoundary();
                if (csrfMultiPart) {
                    buff.append(String.format("\tvar boundary = '--%s';" + HttpUtil.LINE_TERMINATE, new Object[]{boundary}));
                    buff.append("\txhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);").append(HttpUtil.LINE_TERMINATE);
                    List<ParsedHttpParameter> parameters = httpRequest.parameters();
                    logger.log(Level.FINE, "parameters.length:{0}", parameters.size());
                    boolean binaryParam = false;
                    String filename = "";
                    StringBuilder parambuff = new StringBuilder();
                    for (int i = 0; i < parameters.size(); i++) {
                        ParsedHttpParameter param = parameters.get(i);
                        String paramName = param.name();
                        String paramValue = param.value();
                        HttpParameterType paramType = param.type();

                        if (paramType == HttpParameterType.URL || paramType == HttpParameterType.COOKIE) {
                            continue;
                        }

                        if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                            paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                            // ファイルアップロード時エンコードを判定しない
                            if (binaryParam) {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), StandardCharsets.ISO_8859_1);
                            } else {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                        } else {
                            if (MatchUtil.isUrlencoded(paramName)) {
                                paramName = TransUtil.decodeUrl(paramName, csrfEncoding);
                            }
                            if (MatchUtil.isUrlencoded(paramValue)) {
                                paramValue = TransUtil.decodeUrl(paramValue, csrfEncoding);
                            }
                        }

                        if (paramType == HttpParameterType.BODY && !binaryParam) {
                            if (parambuff.length() > 0) {
                                parambuff.append(";").append(System.lineSeparator());
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + ").append(HttpUtil.LINE_TERMINATE);
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"\\r\\n\\r\\n' + " + HttpUtil.LINE_TERMINATE, new Object[]{paramName}));
                            String encodeHex = TransUtil.toByteHexEncode(StringUtil.getBytesCharset(paramValue, csrfEncoding), TransUtil.PTN_ENCODE_JS, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                        } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                            binaryParam = true;
                            filename = paramValue;
                        } else {
                            if (parambuff.length() > 0) {
                                parambuff.append(";").append(System.lineSeparator());
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + ").append(HttpUtil.LINE_TERMINATE);
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\\r\\n' + " + HttpUtil.LINE_TERMINATE, new Object[]{paramName, filename}));
                            parambuff.append("\t'Content-Type: application/octet-stream\\r\\n\\r\\n'");
                            parambuff.append("+ ").append(System.lineSeparator());
                            String encodeHex = TransUtil.toByteHexEncode(StringUtil.getBytesRaw(paramValue), TransUtil.PTN_ENCODE_JS, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                            binaryParam = false;
                            filename = "";
                        }
                    }
                    parambuff.append(" + '--' + boundary + '--\\r\\n';").append(HttpUtil.LINE_TERMINATE);
                    buff.append(parambuff.toString());
                    buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
                } else {
                    buff.append("\txhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');").append(HttpUtil.LINE_TERMINATE);
                    List<ParsedHttpParameter> parameters = httpRequest.parameters();
                    logger.log(Level.FINE, "parameters.size:{0}", parameters.size());
                    boolean binaryParam = false;
                    boolean first = true;
                    for (int i = 0; i < parameters.size(); i++) {
                        ParsedHttpParameter param = parameters.get(i);
                        String paramName = param.name();
                        String paramValue = param.value();
                        HttpParameterType paramType = param.type();
                        if (paramType == HttpParameterType.URL || paramType == HttpParameterType.COOKIE) {
                            continue;
                        }
                        if (paramType == HttpParameterType.BODY && !binaryParam) {
                            buff.append("\treq += ");
                            if (!first) {
                                buff.append("'&' + ");
                            }
                            if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                                paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                            if (contentType != null && HttpUtil.isMaltiPart(contentType) && HttpUtil.isUrlEencoded(csrfEnctype)) {
                                // urlencodeの必要がある場合
                                buff.append(String.format("'%s' + '=' + '%s';" + HttpUtil.LINE_TERMINATE,
                                        new Object[]{TransUtil.encodeUrl(paramName, csrfEncoding, true),
                                            TransUtil.encodeUrl(paramValue, csrfEncoding, true)}));
                            } else {
                                // js escape
                                buff.append(String.format("'%s' + '=' + '%s';" + HttpUtil.LINE_TERMINATE,
                                        new Object[]{TransUtil.encodeJsLangQuote(paramName, false),
                                            TransUtil.encodeJsLangQuote(paramValue, false)}));
                            }
                            first = false;
                        } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                            binaryParam = true;
                        }
                    }
                    buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
                }
            } // csrf textplain
            else {
                buff.append(String.format("\txhr.setRequestHeader('Content-Type', '%s');" + HttpUtil.LINE_TERMINATE, csrfEnctype));
                String paramValue = StringUtil.getStringRaw(httpRequest.body().getBytes());
                buff.append(String.format("\treq += '%s';" + HttpUtil.LINE_TERMINATE, new Object[]{TransUtil.toByteHexEncode(StringUtil.getBytesRaw(paramValue), TransUtil.PTN_ENCODE_JS, false)}));
                buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
            }
            buff.append("}").append(HttpUtil.LINE_TERMINATE);
            buff.append("// end script").append(HttpUtil.LINE_TERMINATE);
            buff.append("</script>").append(HttpUtil.LINE_TERMINATE);
            buff.append("</head>").append(HttpUtil.LINE_TERMINATE);
            String autoSubmit = "";
            if (csrfAutoSubmit) {
                autoSubmit = " onload=\"csrfPoC();\"";
                if (this.chkTimeDelay.isSelected()) {
                    autoSubmit = String.format(" onload=\"csrfPoC(%d);\"", new Object[]{timeOutValue});
                }
            }
            buff.append(String.format("<body%s>" + HttpUtil.LINE_TERMINATE, new Object[]{autoSubmit}));

            autoSubmit = " onClick=\"csrfPoC();\"";
            if (csrfParam.isCsrfTimeDelay()) {
                autoSubmit = String.format(" onClick=\"csrfPoC(%d)\"", new Object[]{timeOutValue});
            }

            if (csrfParam.isCsrfMultiForm()) {
                buff.append("<!-- begen form -->").append(HttpUtil.LINE_TERMINATE);
                buff.append(String.format("<form action=\"javascript:csrfSubmit%s();\">" + HttpUtil.LINE_TERMINATE, new Object[]{localfmt.format(localDateTime)}));
                buff.append("</form>").append(HttpUtil.LINE_TERMINATE);
                buff.append("<!-- end form -->").append(HttpUtil.LINE_TERMINATE);
            }

            if (!csrfAutoSubmit) {
                buff.append(String.format("<input type=\"button\" value=\"Submit\" %s>" + HttpUtil.LINE_TERMINATE, autoSubmit));
            }

            buff.append("</body></html>").append(HttpUtil.LINE_TERMINATE);

        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return buff.toString();
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.txtGeneratorPoC.getLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.txtGeneratorPoC.setLineWrap(lineWrap);
    }

    public String getSelectedText() {
        String selectText = this.txtGeneratorPoC.getSelectedText();
        return selectText;
    }

    public HttpRequestResponse getHttpRequestResponse() {
        return this.httpRequestResponse;
    }

    @Override
    public HttpRequest getRequest() {
        return httpRequestResponse.request();
    }

    @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        this.httpRequestResponse = httpRequestResponse;
        String guessCharset = null;
        boolean useHttps = false;
        HttpRequest httpRequest = httpRequestResponse.request();
        HttpResponse httpResponse = httpRequestResponse.response();
        if (httpRequestResponse.response() != null) {
            guessCharset = HttpMesageHelper.getGuessCharset(httpResponse);
        }
        HttpService service = httpRequest.httpService();
        if (service != null) {
            useHttps = httpRequest.httpService().secure();
        } else {
            useHttps = HttpMesageHelper.isHttps(httpRequest);
        }
        if (guessCharset == null) {
            guessCharset = HttpMesageHelper.getGuessCharset(httpRequest);
        }
        if (guessCharset == null) {
            guessCharset = StandardCharsets.ISO_8859_1.name();
        }
        final BurpExtension extenderImpl = BurpExtension.getInstance();
        this.chkUseHttps.setSelected(useHttps);
        this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
        this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
        encodingItemStateChanged.itemStateChanged(null);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        if (httpRequestResponse == null) {
            return false;
        }
        UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getEncodingProperty();
        EnumSet<UniversalViewProperty.UniversalView> view = viewProperty.getMessageView();
        this.setLineWrap(viewProperty.isLineWrap());
        if (!view.contains(UniversalViewProperty.UniversalView.GENERATE_POC)) {
            return false;
        }
        HttpRequest request = httpRequestResponse.request();
        String host = request.httpService().host();
        if (host == null) {
            return false;
        }
        if (!("POST".equals(request.method()) || "GET".equals(request.method()))) {
            return false;
        }
        return (request.body().length() > 0) || (HttpMesageHelper.hasQueryParameter(request.parameters()));
    }

    @Override
    public String caption() {
        return "Generate PoC";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

    @Override
    public boolean isModified() {
        return false;
    }

}
