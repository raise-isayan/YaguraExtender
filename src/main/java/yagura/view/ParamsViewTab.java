package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.http.message.ContentType;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.http.message.params.ParsedHttpParameter;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.editor.extension.EditorCreationContext;
import burp.api.montoya.ui.editor.extension.EditorMode;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedEditor;
import extension.helpers.HttpUtil;
import extension.helpers.SmartCodec;
import extension.helpers.StringUtil;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumn;
import extension.helpers.SwingUtil;
import extension.view.base.CustomTableModel;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import javax.swing.SwingWorker;
import yagura.model.Parameter;
import yagura.model.ParamsView;
import yagura.model.ParamsViewModel;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author raise.isayan
 */
public class ParamsViewTab extends javax.swing.JPanel implements ExtensionProvidedEditor {

    private final static Logger logger = Logger.getLogger(ParamsViewTab.class.getName());

    /* デコード状態の保持 */
    private static boolean toggleDecode = false;

    private boolean textModified = false;
    private boolean editable;
    private HttpRequestResponse httpRequestResponse;

    /**
     * Creates new form ParamsViewTab
     *
     * @param editorCreationContext
     */
    public ParamsViewTab(EditorCreationContext editorCreationContext) {
        this.editable = !(EditorMode.READ_ONLY == editorCreationContext.editorMode());
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLocation = new javax.swing.JPanel();
        lblLocation = new javax.swing.JLabel();
        scrollParams = new javax.swing.JScrollPane();
        tableParams = new javax.swing.JTable();
        pnlAction = new javax.swing.JPanel();
        pnlOperation = new javax.swing.JPanel();
        btnDecode = new javax.swing.JToggleButton();
        pnlEdit = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlLocation.setLayout(new java.awt.BorderLayout());

        lblLocation.setText("http://localhost/");
        pnlLocation.add(lblLocation, java.awt.BorderLayout.CENTER);

        add(pnlLocation, java.awt.BorderLayout.NORTH);

        tableParams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Type", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableParams.getTableHeader().setReorderingAllowed(false);
        tableParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableParamsKeyTyped(evt);
            }
        });
        scrollParams.setViewportView(tableParams);
        if (tableParams.getColumnModel().getColumnCount() > 0) {
            tableParams.getColumnModel().getColumn(0).setResizable(false);
        }

        add(scrollParams, java.awt.BorderLayout.CENTER);

        pnlAction.setLayout(new java.awt.BorderLayout());

        btnDecode.setText("Decode");
        btnDecode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnDecodeStateChanged(evt);
            }
        });
        btnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOperationLayout = new javax.swing.GroupLayout(pnlOperation);
        pnlOperation.setLayout(pnlOperationLayout);
        pnlOperationLayout.setHorizontalGroup(
            pnlOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDecode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlOperationLayout.setVerticalGroup(
            pnlOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDecode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAction.add(pnlOperation, java.awt.BorderLayout.NORTH);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnUp.setText("up");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setText("down");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditLayout = new javax.swing.GroupLayout(pnlEdit);
        pnlEdit.setLayout(pnlEditLayout);
        pnlEditLayout.setHorizontalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlEditLayout.setVerticalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDown)
                .addGap(310, 310, 310))
        );

        pnlAction.add(pnlEdit, java.awt.BorderLayout.CENTER);

        add(pnlAction, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private final JComboBox<String> cmbParamType = new JComboBox<>();

    private void btnDecodeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnDecodeStateChanged
        this.modelParams.setUrlDeocde(this.btnDecode.isSelected());
        this.tableParams.updateUI();
    }//GEN-LAST:event_btnDecodeStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        this.modelParams.addRow(new ParamsView());
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        SwingUtil.removeItem(this.tableParams);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int index = this.tableParams.getSelectedRow();
        index = this.modelParams.moveUp(index);
        this.tableParams.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        int index = this.tableParams.getSelectedRow();
        index = this.modelParams.moveDn(index);
        this.tableParams.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnDownActionPerformed

    private void tableParamsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableParamsKeyTyped
        SwingUtil.systemClipboardCopy(CustomTableModel.tableCopy(tableParams, true));
    }//GEN-LAST:event_tableParamsKeyTyped

    private void btnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeActionPerformed
        toggleDecode = this.btnDecode.isSelected();
    }//GEN-LAST:event_btnDecodeActionPerformed

    private ParamsViewModel modelParams = null;
    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

    private final Action copyAction = new AbstractAction() {
        public void actionPerformed(ActionEvent evt) {
            SwingUtil.systemClipboardCopy(CustomTableModel.tableCopy(tableParams, true));
        }
    };

    private void customizeComponents() {
        this.pnlEdit.setVisible(this.editable);
        this.modelParams = new ParamsViewModel(this.tableParams.getModel());
        this.tableParams.setModel(this.modelParams);
        this.modelParams.setCellEditable(this.editable);
        this.modelParams.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                textModified = true;
            }
        });
        this.tableParams.getActionMap().put("copy", copyAction);
        this.tableParams.setColumnSelectionAllowed(false);
        this.tableParams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
//        this.tableParams.setCellSelectionEnabled(true);
//        this.tableParams.setRowSelectionAllowed(true);

        //this.quickSearchTab.setSelectedTextArea(this.txtRaw);
        this.quickSearchTab.getSearchPanel().setVisible(false);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.cmbParamType.setMaximumRowCount(10);
        this.cmbParamType.addItem(ParamsView.getType(HttpParameterType.URL));
        this.cmbParamType.addItem(ParamsView.getType(HttpParameterType.COOKIE));
        this.cmbParamType.addItem(ParamsView.getType(HttpParameterType.BODY));

        TableColumn colorColumn = this.tableParams.getColumnModel().getColumn(1);
        colorColumn.setCellEditor(new DefaultCellEditor(this.cmbParamType));

        // Data
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(0);

        // Type
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(30);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(100);

        // Name
        this.tableParams.getColumnModel().getColumn(1).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(1).setPreferredWidth(80);
        this.tableParams.getColumnModel().getColumn(1).setMaxWidth(500);

        // Value
        this.tableParams.getColumnModel().getColumn(2).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(2).setPreferredWidth(300);
        this.tableParams.getColumnModel().getColumn(2).setMaxWidth(8000);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                modelParams.setEncoding(encoding);
                tableParams.repaint();
            }
        }
    };


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JToggleButton btnDecode;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JPanel pnlAction;
    private javax.swing.JPanel pnlEdit;
    private javax.swing.JPanel pnlLocation;
    private javax.swing.JPanel pnlOperation;
    private javax.swing.JScrollPane scrollParams;
    private javax.swing.JTable tableParams;
    // End of variables declaration//GEN-END:variables

    public void setMessageFont(Font font) {
        this.tableParams.setFont(font);
    }

//    public void setMessageEncoding(String encoding) {
//        if (this.httpRequestResponse == null) {
//            return;
//        }
//
//        SwingWorker swParam = new SwingWorker<HttpRequest, Object>() {
//            @Override
//            protected HttpRequest doInBackground() throws Exception {
//                final HttpRequest httpRequest = httpRequestResponse.httpRequest();
//                setLocation(httpRequest);
//                setParams(httpRequest.parameters());
//                return httpRequest;
//            }
//
//            protected void process(List<Object> chunks) {
//            }
//
//            protected void done() {
//                try {
//                    final HttpRequest httpRequest = get();
//                    String guessCharset = null;
//                    if (httpRequest.contentType() == ContentType.URL_ENCODED) {
//                        guessCharset = HttpUtil.getUniversalGuessCode(StringUtil.getBytesRaw(TransUtil.decodeUrl(httpRequest.url(), StandardCharsets.ISO_8859_1.name())));
//                    } else {
//                        guessCharset = HttpUtil.getUniversalGuessCode(httpRequest.body().getBytes());
//                    }
//
//                    if (guessCharset == null) {
//                        guessCharset = StandardCharsets.ISO_8859_1.name();
//                    }
//
//                    textModified = false;
//
//                } catch (InterruptedException ex) {
//                    logger.log(Level.SEVERE, ex.getMessage(), ex);
//                } catch (ExecutionException ex) {
//                    logger.log(Level.SEVERE, ex.getMessage(), ex);
//                } catch (UnsupportedEncodingException ex) {
//                    logger.log(Level.SEVERE, ex.getMessage(), ex);
//                }
//            }
//        };
//        swParam.execute();
//    }
    public void setLocation(HttpRequest httpRequest) {
        this.lblLocation.setText(String.format("%s %s", httpRequest.method(), httpRequest.url()));
    }

    public void setParams(List<ParsedHttpParameter> params) {
        this.modelParams.removeAll();
        for (int i = 0; i < params.size(); i++) {
            ParsedHttpParameter p = params.get(i);
            this.modelParams.addRow(new ParamsView(p));
        }
    }

    public List<Parameter> getParams() {
        List<Parameter> params = new ArrayList<>();
        for (int i = 0; i < this.modelParams.getRowCount(); i++) {
            ParamsView p = this.modelParams.getData(i);
            params.add(p.getParameter());
        }
        return params;
    }

    public void addParam(Parameter p) {
        this.modelParams.addRow(new ParamsView(p));
    }

    @Override
    public boolean isModified() {
        return this.textModified;
    }

    public void clearView() {
        this.modelParams.removeAll();
        this.quickSearchTab.clearView();
        this.modelParams.setCellEditable(false);
//        this.httpRequestResponse = null;
    }

    public HttpRequestResponse getHttpRequestResponse() {
        return this.httpRequestResponse;
    }

    @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        this.httpRequestResponse = httpRequestResponse;
        if (this.httpRequestResponse == null) {
            this.clearView();
        } else {
            SwingWorker swParam = new SwingWorker<HttpRequest, Object>() {
                @Override
                protected HttpRequest doInBackground() throws Exception {
                    final HttpRequest httpRequest = httpRequestResponse.request();
                    setLocation(httpRequest);
                    setParams(httpRequest.parameters());
                    return httpRequest;
                }

                @Override
                protected void process(List<Object> chunks) {
                }

                @Override
                protected void done() {
                    try {
                        final HttpRequest httpRequest = get();
                        String guessCharset = null;
                        if (httpRequest.contentType() == ContentType.URL_ENCODED) {
                            guessCharset = HttpUtil.getUniversalGuessCode(StringUtil.getBytesRaw(SmartCodec.toUrlDecode(httpRequest.url(), StandardCharsets.ISO_8859_1.name())));
                        } else {
                            guessCharset = HttpUtil.getUniversalGuessCode(httpRequest.body().getBytes());
                        }

                        if (guessCharset == null) {
                            guessCharset = StandardCharsets.ISO_8859_1.name();
                        }

                        quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
                        quickSearchTab.renewEncodingList(guessCharset, BurpExtension.getInstance().getSelectEncodingList());
                        encodingItemStateChanged.itemStateChanged(null);
                        quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
                        textModified = false;

                    } catch (InterruptedException | ExecutionException | UnsupportedEncodingException ex) {
                        logger.log(Level.SEVERE, ex.getMessage(), ex);
                    }
                }
            };
            swParam.execute();
            // Decode状態を戻す
            this.btnDecode.setSelected(toggleDecode);
            this.textModified = false;
        }
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        if (httpRequestResponse == null) {
            return false;
        }
        try {
            EnumSet<UniversalViewProperty.UniversalView> view = BurpExtension.getInstance().getProperty().getEncodingProperty().getMessageView();
            if (!view.contains(UniversalViewProperty.UniversalView.JPARAM)) {
                return false;
            }
            // Burp v2023.4.1 以降の謎挙動に対応
            if (httpRequestResponse.request().toByteArray().length() == 0 && httpRequestResponse.response() == null
                    || (httpRequestResponse.response() != null && httpRequestResponse.response().toByteArray().length() == 0)) {
                return true;
            }
            HttpRequest httpRequest = httpRequestResponse.request();
            if (httpRequest.toByteArray().length() > BurpExtension.getInstance().getProperty().getEncodingProperty().getDispayMaxLength()
                    && BurpExtension.getInstance().getProperty().getEncodingProperty().getDispayMaxLength() != 0) {
                return false;
            }
            List<ParsedHttpParameter> params = httpRequest.parameters();
            boolean isDecodeParam = false;
            int count = 0;
            for (ParsedHttpParameter p : params) {
                switch (p.type()) {
                    case URL:
                    case COOKIE:
                        isDecodeParam = true;
                        count++;
                        break;
                    case BODY:
                        isDecodeParam = false;
                        count++;
                        break;
                    case MULTIPART_ATTRIBUTE:
                        break;
                }
            }
            boolean enabled = (httpRequest.contentType() == ContentType.URL_ENCODED) || (httpRequest.contentType() == ContentType.NONE && isDecodeParam);
            this.btnDecode.setEnabled(enabled);
            return count > 0;
        }
        catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            return false;
        }
    }

    @Override
    public String caption() {
        return "JParams";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

}
