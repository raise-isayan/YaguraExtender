package yagura.view;

import burp.BurpExtension;
import extension.view.layout.VerticalFlowLayout;
import yagura.Version;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import yagura.model.OptionProperty;
import extension.burp.IBurpTab;
import extension.helpers.json.JsonUtil;

/**
 *
 * @author isayan
 */
public class VersionTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(VersionTab.class.getName());

    /**
     * Creates new form VersionTab
     */
    public VersionTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCenter = new javax.swing.JPanel();
        scrollVersion = new javax.swing.JScrollPane();
        txtVersion = new javax.swing.JTextArea();
        pnlConfig = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        chkDebugMode = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(550, 450));
        setLayout(null);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        txtVersion.setEditable(false);
        txtVersion.setColumns(20);
        txtVersion.setLineWrap(true);
        txtVersion.setRows(5);
        scrollVersion.setViewportView(txtVersion);

        pnlCenter.add(scrollVersion, java.awt.BorderLayout.CENTER);

        pnlConfig.setBorder(javax.swing.BorderFactory.createTitledBorder("Config"));

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConfigLayout = new javax.swing.GroupLayout(pnlConfig);
        pnlConfig.setLayout(pnlConfigLayout);
        pnlConfigLayout.setHorizontalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImport)
                .addGap(18, 18, 18)
                .addComponent(btnExport)
                .addContainerGap(391, Short.MAX_VALUE))
        );
        pnlConfigLayout.setVerticalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExport)
                    .addComponent(btnImport))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pnlCenter.add(pnlConfig, java.awt.BorderLayout.NORTH);

        add(pnlCenter);
        pnlCenter.setBounds(0, 0, 559, 172);

        chkDebugMode.setText("DebugMode");
        chkDebugMode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkDebugModeStateChanged(evt);
            }
        });
        add(chkDebugMode);
        chkDebugMode.setBounds(0, 259, 559, 21);
    }// </editor-fold>//GEN-END:initComponents

    private void chkDebugModeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkDebugModeStateChanged
        this.firePropertyChange(TabbetOption.VERSION_PROPERTY, null, this);
    }//GEN-LAST:event_chkDebugModeStateChanged

    private final static FileFilter BURP_CONFIG_FILTER = new FileNameExtensionFilter("burp config File(*.json)", "json");

    private File currentConigDirectory = null;

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        File file = null;
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BURP_CONFIG_FILTER);
        if (this.currentConigDirectory != null) {
            filechooser.setCurrentDirectory(this.currentConigDirectory);
        }
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                file = filechooser.getSelectedFile();
                OptionProperty option = BurpExtension.getInstance().getProperty();
                Map<String, String> config = option.loadConfigSetting();
                JsonUtil.loadFromJson(file, config);
                option.saveConfigSetting(config);
                this.currentConigDirectory = file.getParentFile();
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        this.firePropertyChange(TabbetOption.LOAD_CONFIG_PROPERTY, null, this);
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        File file = null;
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.addChoosableFileFilter(BURP_CONFIG_FILTER);
        filechooser.setFileFilter(BURP_CONFIG_FILTER);
        if (file != null && file.exists()) {
            filechooser.setSelectedFile(file);
        } else {
            filechooser.setCurrentDirectory(this.currentConigDirectory);
        }
        int selected = filechooser.showSaveDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            try {
                file = filechooser.getSelectedFile();
                if (!BURP_CONFIG_FILTER.accept(file)) {
                    file = new File(file.getAbsolutePath() + ".json");
                }
                OptionProperty option = BurpExtension.getInstance().getProperty();
                Map<String, String> config = option.loadConfigSetting();
                JsonUtil.saveToJson(file, config);
                this.currentConigDirectory = file.getParentFile();
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }

    }//GEN-LAST:event_btnExportActionPerformed

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.setLayout(new VerticalFlowLayout());
        // Version Info
        this.txtVersion.setWrapStyleWord(false);
        this.txtVersion.setText(Version.getInstance().getVersionInfo());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JCheckBox chkDebugMode;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlConfig;
    private javax.swing.JScrollPane scrollVersion;
    private javax.swing.JTextArea txtVersion;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Version";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    public boolean getDebugMode() {
        return this.chkDebugMode.getModel().isSelected();
    }

    public void setDebugMode(boolean debugMode) {
        this.chkDebugMode.getModel().setSelected(debugMode);
    }

}
