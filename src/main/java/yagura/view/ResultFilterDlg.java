package yagura.view;

import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.proxy.ProxyHttpRequestResponse;
import burp.api.montoya.proxy.ProxyWebSocketMessage;
import burp.api.montoya.websocket.Direction;
import extension.burp.BurpExtensionImpl;
import extension.burp.BurpUtil;
import extension.burp.FilterProperty;
import extension.burp.MessageHighlightColor;
import extension.helpers.StringUtil;
import extension.view.base.CustomDialog;
import java.net.HttpURLConnection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author isayan
 */
public class ResultFilterDlg extends CustomDialog {

    private final static Logger logger = Logger.getLogger(ResultFilterDlg.class.getName());
    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form ResultFilterDlg
     */
    public ResultFilterDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        tabbeProtocol = new javax.swing.JTabbedPane();
        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        btnConvertBambda = new javax.swing.JButton();
        btnImportBambda = new javax.swing.JButton();
        pnlName = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setMinimumSize(new java.awt.Dimension(540, 450));
        pnlMain.setName(""); // NOI18N
        pnlMain.setPreferredSize(new java.awt.Dimension(540, 520));
        pnlMain.setLayout(new java.awt.BorderLayout());

        tabbeProtocol.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        pnlMain.add(tabbeProtocol, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnConvertBambda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_switch.png"))); // NOI18N
        btnConvertBambda.setText("Convert to Bambda");
        btnConvertBambda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertBambdaActionPerformed(evt);
            }
        });

        btnImportBambda.setText("Import Bambda");
        btnImportBambda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportBambdaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnConvertBambda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImportBambda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 457, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK)
                    .addComponent(btnConvertBambda)
                    .addComponent(btnImportBambda))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        lblName.setText("Name:");

        javax.swing.GroupLayout pnlNameLayout = new javax.swing.GroupLayout(pnlName);
        pnlName.setLayout(pnlNameLayout);
        pnlNameLayout.setHorizontalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(484, Short.MAX_VALUE))
        );
        pnlNameLayout.setVerticalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(pnlName, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final FilterHttpPanel pnlFilterHttp = new FilterHttpPanel();
    private final FilterWebSocketPanel pnlFilterWebSocket = new FilterWebSocketPanel();

    private void customizeComponents() {
        this.tabbeProtocol.addTab("HTTP", this.pnlFilterHttp);
        this.tabbeProtocol.addTab("WebSocket", this.pnlFilterWebSocket);

        this.pnlFilterHttp.addTableChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbetHttpFilterStateChanged(evt);
            }
        });

        this.pnlFilterWebSocket.addTableChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbetWebSocetFilterStateChanged(evt);
            }
        });
    }

    private void tabbetHttpFilterStateChanged(javax.swing.event.ChangeEvent evt) {
        this.btnConvertBambda.setVisible(this.pnlFilterHttp.isFilterModeSettings());
    }

    private void tabbetWebSocetFilterStateChanged(javax.swing.event.ChangeEvent evt) {
        this.btnConvertBambda.setVisible(this.pnlFilterWebSocket.isFilterModeSettings());
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if (this.getEditMode() && this.getFilterName().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.resultfilter.ok.name.empty"), "ResultFilter", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnConvertBambdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertBambdaActionPerformed
        FilterProperty filter = this.getProperty();
        if (this.isHttpProtocalType()) {
            this.pnlFilterHttp.ConverToBambda(filter);
        }
        else {
            this.pnlFilterWebSocket.ConverToBambda(filter);
        }
    }//GEN-LAST:event_btnConvertBambdaActionPerformed

    private void btnImportBambdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportBambdaActionPerformed
        if (this.isHttpProtocalType()) {
            this.pnlFilterHttp.ImportBambda(getFilterCategory());
        }
        else {
            this.pnlFilterWebSocket.ImportBambda(getFilterCategory());
        }
    }//GEN-LAST:event_btnImportBambdaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ResultFilterDlg dialog = new ResultFilterDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConvertBambda;
    private javax.swing.JButton btnImportBambda;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlName;
    private javax.swing.JTabbedPane tabbeProtocol;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    public void setProperty(FilterProperty filterProp) {
        setProtocalType(filterProp.getFilterCategory());
        switch (filterProp.getFilterCategory()) {
        case HTTP:
            this.pnlFilterHttp.setProperty(filterProp);
            break;
        case WEBSOCKET:
            this.pnlFilterWebSocket.setProperty(filterProp);
            break;
        }
    }

    private FilterProperty.FilterCategory getFilterCategory() {
        if (isHttpProtocalType()) {
            return FilterProperty.FilterCategory.HTTP;
        } else {
            return FilterProperty.FilterCategory.WEBSOCKET;
        }
    }

    private boolean isHttpProtocalType() {
        return this.tabbeProtocol.getSelectedIndex() == this.tabbeProtocol.indexOfTab("HTTP");
    }

    private void setProtocalType(FilterProperty.FilterCategory filterCategory) {
        switch (filterCategory) {
        case HTTP:
            this.tabbeProtocol.setSelectedIndex(this.tabbeProtocol.indexOfTab("HTTP"));
            break;
        case WEBSOCKET:
            this.tabbeProtocol.setSelectedIndex(this.tabbeProtocol.indexOfTab("WebSocket"));
            break;
        }
    }

    public FilterProperty getProperty() {
        FilterProperty filterProp = isHttpProtocalType() ? this.pnlFilterHttp.getProperty() : this.pnlFilterWebSocket.getProperty();
        return filterProp;
    }

    public String getFilterName() {
        return this.txtName.getText();
    }

    public void setFilterName(String name) {
        this.txtName.setText(name);
    }

    public void setBambaMode(boolean bamba) {
        if (this.isHttpProtocalType()) {
            this.pnlFilterHttp.setBambaMode(bamba);
            this.pnlFilterWebSocket.setBambaMode(bamba);
        }
        this.btnConvertBambda.setVisible(bamba);
        this.btnImportBambda.setVisible(bamba);
    }

    public void setSearchMode(boolean mode) {
        if (mode) {
            this.tabbeProtocol.remove(this.pnlFilterWebSocket);
        }
        else {
            if (this.tabbeProtocol.indexOfTab("WebSocket") > -1) {
                this.tabbeProtocol.addTab("WebSocket", this.pnlFilterWebSocket);
            }
        }
        this.setBambaMode(!mode);
    }

    public boolean getEditMode() {
        return (this.pnlName.getParent() != null);
    }

    public void setEditMode(boolean edit) {
        getContentPane().remove(this.pnlName);
        if (edit) {
            getContentPane().add(this.pnlName, java.awt.BorderLayout.NORTH);
        }
    }

    public static class PropertyRowHttpFilter extends RowFilter<Object, Object> {

        private final FilterProperty filterProp;

        public PropertyRowHttpFilter(FilterProperty filterProp) {
            this.filterProp = filterProp;
        }

        @Override
        public boolean include(RowFilter.Entry<? extends Object, ? extends Object> entry) {
            boolean allFilter = false;
            try {
                ProxyHttpRequestResponse item = (ProxyHttpRequestResponse) entry.getValue(0);
                boolean showOnlyScopFilter = true;
                // Show only in-scope items
                if (this.filterProp.isShowOnlyScopeItems()) {
                    showOnlyScopFilter = BurpExtensionImpl.helpers().isInScope(item.request().url());
                }
                // Hide items without responses
                boolean hideItemsWithoutResponses = true;
                if (this.filterProp.isHideItemsWithoutResponses()) {
                    hideItemsWithoutResponses = (item.response() != null);
                }
                // chkShowOnlyParameterizedRequests
                boolean parameterizedRequests = true;
                if (this.filterProp.isShowOnlyParameterizedRequests()) {
                    parameterizedRequests = item.request().hasParameters(HttpParameterType.URL) || item.request().hasParameters(HttpParameterType.BODY);
                }
                // Show only edited message
                boolean editedMessage = true;
                if (this.filterProp.isShowOnlyEditedMessage()) {
                    editedMessage = item.edited();
                }

                // Status Filter
                boolean statusFilter = false;
                if (showOnlyScopFilter) {
                    // Response Status がない場合は無条件で含める
                    if (!item.hasResponse()) {
                        statusFilter = true;
                    } else {
                        if (item.response().statusCode() == 0) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat2xx() && (HttpURLConnection.HTTP_OK <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_MULT_CHOICE)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat3xx() && (HttpURLConnection.HTTP_MULT_CHOICE <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_BAD_REQUEST)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat4xx() && (HttpURLConnection.HTTP_BAD_REQUEST <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_INTERNAL_ERROR)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat5xx() && (HttpURLConnection.HTTP_INTERNAL_ERROR <= item.response().statusCode() && item.response().statusCode() < 600)) {
                            statusFilter = true;
                        }
                    }
                }
                // Highlight Color
                boolean colorFilter = true;
                if (statusFilter && showOnlyScopFilter) {
                    // cololr
                    if (this.filterProp.getShowOnlyHighlightColors()) {
                        EnumSet<MessageHighlightColor> colors = this.filterProp.getHighlightColors();
                        MessageHighlightColor hc = MessageHighlightColor.valueOf(item.annotations().highlightColor());
                        colorFilter = colors.contains(hc);
                    }
                }
                // Comment Filter
                boolean commentFilter = true;
                if (statusFilter && showOnlyScopFilter) {
                    // comment
                    if (this.filterProp.getShowOnlyComment()) {
                        commentFilter = (item.annotations().hasNotes());
                    }
                }
                boolean matchFilter = true;
                if (statusFilter && showOnlyScopFilter && colorFilter) {
                    // showOnly Filter
                    if (this.filterProp.getShowOnly()) {
                        Pattern patternShowOnly = Pattern.compile(BurpUtil.parseFilterPattern(this.filterProp.getShowOnlyExtension()));
                        Matcher matchShowOnly = patternShowOnly.matcher(item.request().pathWithoutQuery());
                        if (!matchShowOnly.find()) {
                            matchFilter = false;
                        }
                    } else {
                        // Hide Filter
                        if (this.filterProp.getHide()) {
                            Pattern patternHide = Pattern.compile(BurpUtil.parseFilterPattern(this.filterProp.getHideExtension()));
                            Matcher matchHide = patternHide.matcher(item.request().pathWithoutQuery());
                            if (matchHide.find()) {
                                matchFilter = false;
                            }
                        }
                    }
                }
                // request method
                boolean requestMethod = true;
                if (!this.filterProp.getMethod().isEmpty()) {
                    requestMethod = item.request().method().equals(this.filterProp.getMethod().toUpperCase());
                }
                // request path
                boolean requestURL = true;
                if (!this.filterProp.getPath().isEmpty()) {
                    requestURL = item.request().path().contains(this.filterProp.getPath());
                }
                // request
                boolean request = true;
                if (!this.filterProp.getRequest().isEmpty()) {
                    if (this.filterProp.isRequestRegex()) {
                        request = item.request().contains(Pattern.compile(this.filterProp.getRequest(), this.filterProp.isRequestIgnoreCase() ? Pattern.DOTALL : Pattern.DOTALL | Pattern.CASE_INSENSITIVE));
                    } else {
                        request = item.request().contains(this.filterProp.getRequest(), this.filterProp.isRequestIgnoreCase());
                    }
                }
                // response
                boolean response = true;
                if (!this.filterProp.getResponse().isEmpty()) {
                    if (item.hasResponse()) {
                        if (this.filterProp.isResponseRegex()) {
                            response = item.response().contains(this.filterProp.getResponse(), this.filterProp.isResponseIgnoreCase());
                        } else {
                            response = item.response().contains(Pattern.compile(this.filterProp.getResponse(), this.filterProp.isResponseIgnoreCase() ? Pattern.DOTALL : Pattern.DOTALL | Pattern.CASE_INSENSITIVE));
                        }
                    }
                }
                // ListenerPort
                boolean listenerPort = true;
                if (this.filterProp.getListenerPort() > -1) {
                    listenerPort = this.filterProp.getListenerPort() == item.listenerPort();
                }
                // 条件のAND
                allFilter = (statusFilter && colorFilter && commentFilter && matchFilter && showOnlyScopFilter && hideItemsWithoutResponses && parameterizedRequests && editedMessage && requestMethod && requestURL && request && response && listenerPort);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
            return allFilter;
        }

    }

    public static class PropertyRowWebSocetFilter extends RowFilter<Object, Object> {

        private final FilterProperty filterProp;

        public PropertyRowWebSocetFilter(FilterProperty filterProp) {
            this.filterProp = filterProp;
        }

        @Override
        public boolean include(RowFilter.Entry<? extends Object, ? extends Object> entry) {
            boolean allFilter = false;
            try {
                ProxyWebSocketMessage item = (ProxyWebSocketMessage) entry.getValue(0);
                boolean showOnlyScopFilter = true;
                // Show only in-scope items
                if (this.filterProp.isShowOnlyScopeItems()) {
                    showOnlyScopFilter = BurpExtensionImpl.helpers().isInScope(item.upgradeRequest().url());
                }
                // Hide Incoming Message
                boolean hideIncomingMessage = true;
                if (this.filterProp.isHideIncomingMessage()) {
                    hideIncomingMessage = (item.direction() != Direction.SERVER_TO_CLIENT);
                }
                // Hide Outgoing Message
                boolean hideOutgoingMessage = true;
                if (this.filterProp.isHideOutgoingMessage()) {
                    hideOutgoingMessage = (item.direction() != Direction.CLIENT_TO_SERVER);
                }
                // ShowOnlyEditedMessage
                boolean showOnlyEditedMessage = true;
                if (this.filterProp.isShowOnlyEditedMessage()) {
                    showOnlyEditedMessage = (item.editedPayload() != null);
                }

                // Highlight Color
                boolean colorFilter = true;
                if (showOnlyScopFilter) {
                    // cololr
                    if (this.filterProp.getShowOnlyHighlightColors()) {
                        EnumSet<MessageHighlightColor> colors = this.filterProp.getHighlightColors();
                        MessageHighlightColor hc = MessageHighlightColor.valueOf(item.annotations().highlightColor());
                        colorFilter = colors.contains(hc);
                    }
                }
                // Comment Filter
                boolean commentFilter = true;
                if (showOnlyScopFilter) {
                    // comment
                    if (this.filterProp.getShowOnlyComment()) {
                        commentFilter = (item.annotations().hasNotes());
                    }
                }
                // message
                boolean message = true;
                if (!this.filterProp.getRequest().isEmpty()) {
                    if (this.filterProp.isRequestRegex()) {
                        message = item.contains(Pattern.compile(this.filterProp.getMessage(), this.filterProp.isMessageIgnoreCase() ? Pattern.DOTALL : Pattern.DOTALL | Pattern.CASE_INSENSITIVE));
                    } else {
                        message = item.contains(this.filterProp.getMessage(), this.filterProp.isMessageIgnoreCase());
                    }
                }
                // ListenerPort
                boolean listenerPort = true;
                if (this.filterProp.getListenerPort() > -1) {
                    listenerPort = this.filterProp.getListenerPort() == item.listenerPort();
                }
                // 条件のAND
                allFilter = (colorFilter && commentFilter && showOnlyScopFilter && hideIncomingMessage && hideOutgoingMessage && showOnlyEditedMessage && message && message && listenerPort);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
            return allFilter;
        }

    }

    public static class PropertyRowSorter<M extends TableModel> extends TableRowSorter<M> {

        public PropertyRowSorter(M model) {
            super(model);
        }

        private final NumberComparator numberComparator = new NumberComparator();

        @Override
        public Comparator<?> getComparator(int column) {
            if (column == 1) {
                return numberComparator;
            } else {
                return super.getComparator(column);
            }
        }
    }

    private static class NumberComparator implements Comparator {

        @SuppressWarnings("unchecked")
        @Override
        public int compare(Object o1, Object o2) {
            try {
                int parseIntA = Integer.parseInt(o1.toString());
                int parseIntB = Integer.parseInt(o2.toString());
                return parseIntA - parseIntB;
            } catch (NumberFormatException e) {
                if (o1 instanceof Comparator comparator) {
                    return comparator.compare(o1, o2);
                } else {
                    return StringUtil.compareToString(o1.toString(), o2.toString());
                }
            }
        }
    }

}
