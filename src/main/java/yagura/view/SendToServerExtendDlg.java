/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yagura.view;

import extend.util.Util;
import extend.view.base.CustomDialog;
import java.net.Proxy;
import java.util.Properties;
import javax.swing.JOptionPane;

/**
 *
 * @author isayan
 */
public class SendToServerExtendDlg extends CustomDialog {

    /**
     * Creates new form NewDialog
     */
    public SendToServerExtendDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        lblProtocol = new javax.swing.JLabel();
        cmbProtocol = new javax.swing.JComboBox<>();
        lblProxyHost = new javax.swing.JLabel();
        txtProxyHost = new javax.swing.JTextField();
        lblProxyPort = new javax.swing.JLabel();
        spnProxyPort = new javax.swing.JSpinner();
        lblProxyUser = new javax.swing.JLabel();
        lblProxyPasswd = new javax.swing.JLabel();
        txtProxyUser = new javax.swing.JTextField();
        txtProxyPasswd = new javax.swing.JPasswordField();
        chkIgnoreValidateCertification = new javax.swing.JCheckBox();
        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        lblProtocol.setText("Protocol:");

        lblProxyHost.setText("Host:");

        lblProxyPort.setText("port:");

        spnProxyPort.setModel(new javax.swing.SpinnerNumberModel(8080, 0, 65535, 1));
        spnProxyPort.setEditor(new javax.swing.JSpinner.NumberEditor(spnProxyPort, "#"));

        lblProxyUser.setText("User:");

        lblProxyPasswd.setText("Password:");

        txtProxyPasswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProxyPasswdActionPerformed(evt);
            }
        });

        chkIgnoreValidateCertification.setText("ignore Validate Certification");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProxyHost, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProxyPasswd)
                            .addComponent(lblProxyUser))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(chkIgnoreValidateCertification)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbProtocol, 0, 234, Short.MAX_VALUE)
                            .addComponent(txtProxyUser)
                            .addComponent(txtProxyPasswd)
                            .addComponent(txtProxyHost))
                        .addGap(8, 8, 8)
                        .addComponent(lblProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProtocol)
                    .addComponent(cmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyHost)
                    .addComponent(txtProxyHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProxyPort)
                    .addComponent(spnProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyUser)
                    .addComponent(txtProxyUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyPasswd)
                    .addComponent(txtProxyPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(chkIgnoreValidateCertification))
        );

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(290, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        String proxyProtocol = (String)this.cmbProtocol.getSelectedItem();
        String proxyHost = this.txtProxyHost.getText().trim();
        if (!Proxy.Type.DIRECT.name().equals(proxyProtocol)) {
            if (proxyHost.isEmpty()) {
                JOptionPane.showMessageDialog(this, BUNDLE.getString("view.sendto.add.proxyhost.empty"), "SendTo", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                this.setModalResult(JOptionPane.OK_OPTION);
                this.closeDialog(null);
            }
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void txtProxyPasswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProxyPasswdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProxyPasswdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SendToServerExtendDlg dialog = new SendToServerExtendDlg(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox chkIgnoreValidateCertification;
    private javax.swing.JComboBox<String> cmbProtocol;
    private javax.swing.JLabel lblProtocol;
    private javax.swing.JLabel lblProxyHost;
    private javax.swing.JLabel lblProxyPasswd;
    private javax.swing.JLabel lblProxyPort;
    private javax.swing.JLabel lblProxyUser;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JSpinner spnProxyPort;
    private javax.swing.JTextField txtProxyHost;
    private javax.swing.JPasswordField txtProxyPasswd;
    private javax.swing.JTextField txtProxyUser;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.cmbProtocol.addItem(Proxy.Type.DIRECT.name());
        this.cmbProtocol.addItem(Proxy.Type.HTTP.name());
        this.cmbProtocol.addItem(Proxy.Type.SOCKS.name());
    }
    
    public void setProperties(Properties prop) {
        String proxyProtocol = prop.getProperty("proxyProtocol", Proxy.Type.DIRECT.name());
        String proxyHost = prop.getProperty("proxyHost", "");
        String proxyPort = prop.getProperty("proxyPort", "8080");        
        String proxyUser = prop.getProperty("proxyUser", "");
        String proxyPasswd = prop.getProperty("proxyPasswd", "");        
        String ignoreValidateCertification = prop.getProperty("ignoreValidateCertification", Boolean.TRUE.toString());        
        this.cmbProtocol.setSelectedItem(proxyProtocol);
        this.txtProxyHost.setText(proxyHost);
        this.spnProxyPort.setValue((int)Util.parseIntDefault(proxyPort, 8080));
        this.txtProxyUser.setText(proxyUser);
        this.txtProxyPasswd.setText(proxyPasswd);
        this.chkIgnoreValidateCertification.setSelected(Util.parseBooleanDefault(ignoreValidateCertification, false));
    }

    public void getProperties(Properties prop) {
        prop.setProperty("proxyProtocol", (String)this.cmbProtocol.getSelectedItem());
        prop.setProperty("proxyHost", this.txtProxyHost.getText());
        prop.setProperty("proxyPort", Util.toString(this.spnProxyPort.getValue()));        
        prop.setProperty("proxyUser", this.txtProxyUser.getText());
        prop.setProperty("proxyPasswd", String.valueOf(this.txtProxyPasswd.getPassword()));
        prop.setProperty("ignoreValidateCertification", String.valueOf(this.chkIgnoreValidateCertification.isSelected()));
    }
    
    
}
