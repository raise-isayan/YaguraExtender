package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.core.ByteArray;
import burp.api.montoya.http.HttpService;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.contextmenu.WebSocketMessage;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedWebSocketMessageEditor;
import burp.api.montoya.websocket.Direction;
import extend.util.external.ThemeUI;
import extension.helpers.ConvertUtil;
import extension.helpers.HttpUtil;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.EnumSet;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.text.JTextComponent;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class GenerateWebsocktPoCTab extends javax.swing.JPanel implements ExtensionProvidedWebSocketMessageEditor {

    private final static Logger logger = Logger.getLogger(GenerateWebsocktPoCTab.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    final PropertyChangeListener propertyListener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            ThemeUI.applyStyleTheme(txtGeneratorPoC);
        }
    };

    /**
     * Creates new form GenerateWebsocktPoCTab
     */
    public GenerateWebsocktPoCTab() {
        initComponents();
        customizeComponents();
    }

    private org.fife.ui.rtextarea.RTextScrollPane scrollGeneratorPoC;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtGeneratorPoC;

    private QuickSearchTab quickSearchTab = new QuickSearchTab();

    private void customizeComponents() {

        /**
         * * UI design start **
         */
        this.txtGeneratorPoC = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        this.scrollGeneratorPoC = new org.fife.ui.rtextarea.RTextScrollPane(txtGeneratorPoC);
        this.txtGeneratorPoC.setWrapStyleWord(false);

        this.txtGeneratorPoC.setClearWhitespaceLinesEnabled(true);
        this.txtGeneratorPoC.setHighlightCurrentLine(true);
        this.txtGeneratorPoC.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtGeneratorPoC.setBackground(SystemColor.text);
        this.txtGeneratorPoC.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        this.splitGeneratorPoC.setRightComponent(this.scrollGeneratorPoC);

        /**
         * * UI design end **
         */
        this.quickSearchTab.setSelectedTextArea(this.txtGeneratorPoC);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);

        this.txtGeneratorPoC.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);

//        this.txtGeneratorPoC.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
//        this.txtGeneratorPoC.setContentType("text/html");
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.propertyListener.propertyChange(null);
        ThemeUI.addPropertyChangeListener(propertyListener);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitGeneratorPoC = new javax.swing.JSplitPane();
        pnlPoC = new javax.swing.JPanel();
        pnlButton = new javax.swing.JPanel();
        btnSavetoFile = new javax.swing.JButton();
        btnCopyClipbord = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        pnlCheck = new javax.swing.JPanel();
        chkAutoSubmit = new javax.swing.JCheckBox();
        chkTimeDelay = new javax.swing.JCheckBox();
        spnTime = new javax.swing.JSpinner();
        chkUseWss = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        splitGeneratorPoC.setDividerLocation(160);
        splitGeneratorPoC.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPoC.setLayout(new java.awt.GridLayout(1, 3));

        btnSavetoFile.setText("Save to file");
        btnSavetoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavetoFileActionPerformed(evt);
            }
        });

        btnCopyClipbord.setText("Copy to Clipbord");
        btnCopyClipbord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyClipbordActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerate)
                    .addComponent(btnCopyClipbord)
                    .addComponent(btnSavetoFile))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyClipbord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavetoFile)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlButton);

        chkAutoSubmit.setText("auto submit");

        chkTimeDelay.setText("Time delay (ms)");

        spnTime.setValue(1000);

        chkUseWss.setText("use wss");

        javax.swing.GroupLayout pnlCheckLayout = new javax.swing.GroupLayout(pnlCheck);
        pnlCheck.setLayout(pnlCheckLayout);
        pnlCheckLayout.setHorizontalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkAutoSubmit)
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addComponent(chkTimeDelay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chkUseWss))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        pnlCheckLayout.setVerticalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAutoSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTimeDelay)
                    .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUseWss)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlCheck);

        splitGeneratorPoC.setLeftComponent(pnlPoC);

        add(splitGeneratorPoC, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void setMessageFont(Font font) {
        this.txtGeneratorPoC.setFont(font);
        this.quickSearchTab.setMessageFont(font);
    }

    private WebSocketMessage webSocketMessage = null;

    public void setMessageEncoding(String encoding) {
        try {
            if (this.webSocketMessage == null) {
                return;
            }
            JTextComponent ta = this.txtGeneratorPoC;
            if (this.webSocketMessage != null) {
                // Raw
                ta.setText("");
                ta.setCaretPosition(0);
                // View
            } else {
                ta.setText("");
                ta.setCaretPosition(0);
            }
            this.quickSearchTab.clearView();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    private File currentPoCDirectory = null;

    private void btnSavetoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavetoFileActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        String encoding = this.quickSearchTab.getSelectedEncoding();
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.setCurrentDirectory(this.currentPoCDirectory);
        int selected = filechooser.showSaveDialog(null);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File saveFile = filechooser.getSelectedFile();
            if (SwingUtil.isFileOverwriteConfirmed(saveFile, String.format(BUNDLE.getString("extend.exists.overwrite.message"), saveFile.getName()), BUNDLE.getString("extend.exists.overwrite.confirm"))) {
                try (BufferedOutputStream fstm = new BufferedOutputStream(new FileOutputStream(saveFile))) {
                    fstm.write(StringUtil.getBytesCharset(ta.getText(), encoding));
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
            this.currentPoCDirectory = saveFile.getParentFile();
        }
    }//GEN-LAST:event_btnSavetoFileActionPerformed

    private void btnCopyClipbordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyClipbordActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        SwingUtil.systemClipboardCopy(ta.getText());
    }//GEN-LAST:event_btnCopyClipbordActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        final GenerateCsrfParameter csrfParam = getGenerateCsrfParameter();
        SwingWorker swPoC = new SwingWorker<String, Object>() {
            @Override
            protected String doInBackground() throws Exception {
                publish("...");
                return generateStandardPoC(csrfParam);
            }

//            @Override
            protected void process(List<Object> chunks) {
                ta.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
            }

            @Override
            protected void done() {
                try {
                    ta.setText(get());
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (Exception ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        };
        swPoC.execute();
    }//GEN-LAST:event_btnGenerateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyClipbord;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSavetoFile;
    private javax.swing.JCheckBox chkAutoSubmit;
    private javax.swing.JCheckBox chkTimeDelay;
    private javax.swing.JCheckBox chkUseWss;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlCheck;
    private javax.swing.JPanel pnlPoC;
    private javax.swing.JSplitPane splitGeneratorPoC;
    private javax.swing.JSpinner spnTime;
    // End of variables declaration//GEN-END:variables

    protected class GenerateCsrfParameter extends GeneratePoCTab.GenerateBaseCsrfParameter {

    }

    protected GenerateCsrfParameter getGenerateCsrfParameter() {
        GenerateCsrfParameter csrfParam = new GenerateCsrfParameter();
        csrfParam.setCsrfAutoSubmit(this.chkAutoSubmit.isSelected());
        csrfParam.setUseSecure(this.chkUseWss.isSelected());
        csrfParam.setTimeOutValue((int) this.spnTime.getValue());
        csrfParam.setCsrfEncoding(this.quickSearchTab.getSelectedEncoding());
        csrfParam.setCsrfTimeDelay(this.chkTimeDelay.isSelected());
        return csrfParam;
    }

    /**
     * *
     *
     * <html>
     * <head><meta http-equiv="Content-type" content="text/html; charset='UTF-8'">
     * <script type="text/javascript">
     * function submitPoC() { var ws = new WebSocket(
     * 'wss://echo.websocket.org/' );
     *
     * ws.onopen = function(e) { ws.send("sending"); };
     *
     * ws.onerror = function(error) { var otag =
     * document.getElementById("message"); var otxt =
     * document.createTextNode(event.data); otag.appendChild(otxt); };
     *
     * ws.onmessage = function(event) { var otag =
     * document.getElementById("message"); var otxt =
     * document.createTextNode(event.data); otag.appendChild(otxt); }; }
     *
     * </script>
     * </head><body>
     * <input type="button" value="submit" onclick="submitPoC();"></div>
     * <div id="message"></div>
     * </body></html>
     *
     **
     */
    static String generateWebSocketFunctionCall(String url, byte[] binaly) {
        StringBuilder buff = new StringBuilder();
        buff.append("\tconst url = ").append("\"").append(ConvertUtil.encodeJsLangQuote(url)).append("\"").append(";").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tconst data = ").append("Uint8Array.of(").append(GeneratePoCTab.generateHexBinay(binaly)).append(").buffer;").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tsend(url, data)").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    static String generateWebSocketFunctionCall(String url, String value) {
        StringBuilder buff = new StringBuilder();
        buff.append("\tconst url = ").append("\"").append(ConvertUtil.encodeJsLangQuote(url)).append("\"").append(";").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tconst data = ").append("\"").append(ConvertUtil.encodeJsLangQuote(value, true)).append("\"").append(";").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tsendWebSocket(url, data);").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    static String generateWebSocketFunction() {
        StringBuilder buff = new StringBuilder();
        buff.append("function sendWebSocket(url, data) {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tvar ws = new WebSocket(url);").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tws.onopen = function(e) {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t\tws.send(data);").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t};").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    private String generateStandardPoC(GenerateCsrfParameter csrfParam) {
        final StringBuilder buff = new StringBuilder();
        try {
            boolean csrfAutoSubmit = csrfParam.isCsrfAutoSubmit();
            int timeOutValue = csrfParam.getTimeOutValue();
            boolean csrfSecure = csrfParam.isUseSecure();
            String csrfEncoding = csrfParam.getCsrfEncoding();

            buff.append("<html>").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("<head><meta http-equiv=\"Content-type\" content=\"text/html; charset='%s'\">", new Object[]{csrfEncoding})).append(HttpUtil.LINE_TERMINATE);
            buff.append("</head>");
            String autoSubmit = "";
            if (csrfParam.isCsrfAutoSubmit()) {
                autoSubmit = " onload=\"submitPoC();\"";
                if (csrfParam.isCsrfTimeDelay()) {
                    autoSubmit = String.format(" onload=\"submitPoC(%d);\"", new Object[]{csrfParam.getTimeOutValue()});
                }
            }
            String url = this.webSocketMessage.upgradeRequest().url();
            url = url.replaceFirst("^https:", csrfSecure ? "wss:" : "ws:");
            ByteArray payload = this.webSocketMessage.payload();
            final StringBuilder scriptTag = new StringBuilder();
            scriptTag.append("<script type=\"text/javascript\">").append(HttpUtil.LINE_TERMINATE);
            if (csrfParam.isCsrfTimeDelay()) {
                scriptTag.append(GeneratePoCTab.generateTimeDelayFunction());
            }
            scriptTag.append(generateWebSocketFunction());

            String timeDelay = csrfParam.isCsrfTimeDelay() ? "msec" : "";
            scriptTag.append(String.format("function submitPoC(%s) {", new Object[]{timeDelay})).append(HttpUtil.LINE_TERMINATE);
            if (csrfParam.isCsrfTimeDelay()) {
                scriptTag.append("\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
            }
            String value = StringUtil.getStringCharset(payload.getBytes(), csrfEncoding);
            if (StringUtil.isPrinterble(value)) {
                scriptTag.append(generateWebSocketFunctionCall(url, value)).append(HttpUtil.LINE_TERMINATE);
            } else {
                scriptTag.append(generateWebSocketFunctionCall(url, payload.getBytes())).append(HttpUtil.LINE_TERMINATE);
            }
            scriptTag.append("}").append(HttpUtil.LINE_TERMINATE);

            scriptTag.append("</script>");
            buff.append(scriptTag);
            buff.append(String.format("<body%s>", new Object[]{autoSubmit})).append(HttpUtil.LINE_TERMINATE);
            if (!csrfAutoSubmit) {
                autoSubmit = " onClick=\"submitPoC();\"";
                if (csrfParam.isCsrfTimeDelay()) {
                    autoSubmit = String.format(" onClick=\"submitPoC(%d);\"", new Object[]{timeOutValue});
                }
                buff.append(String.format("<input type=\"button\" value=\"Submit\" %s>", autoSubmit)).append(HttpUtil.LINE_TERMINATE);
            }
            buff.append("</body></html>").append(HttpUtil.LINE_TERMINATE);
        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return buff.toString();
    }

    @Override
    public ByteArray getMessage() {
        return this.webSocketMessage.payload();
    }

    @Override
    public void setMessage(WebSocketMessage webSocketMessage) {
        this.webSocketMessage = webSocketMessage;
        String guessCharset = StandardCharsets.ISO_8859_1.name();
        final boolean useSecure;
        if (webSocketMessage.payload() != null) {
            guessCharset = HttpUtil.getGuessCode(webSocketMessage.payload().getBytes());
            if (guessCharset == null) {
                guessCharset = StandardCharsets.UTF_8.name();
            }
        }
        HttpService service = webSocketMessage.upgradeRequest().httpService();
        if (service != null) {
            useSecure = service.secure();
        } else {
            useSecure = this.chkUseWss.isSelected();
        }
        final BurpExtension extenderImpl = BurpExtension.getInstance();
        this.chkUseWss.setSelected(useSecure);
        this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
        this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
        encodingItemStateChanged.itemStateChanged(null);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
    }

    @Override
    public boolean isEnabledFor(WebSocketMessage webSocketMessage) {
        if (webSocketMessage == null) {
            return false;
        }
        UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getUniversalViewProperty();
        EnumSet<UniversalViewProperty.MessageView> view = viewProperty.getMessageView();
        this.setLineWrap(viewProperty.isLineWrap());
        if (!view.contains(UniversalViewProperty.MessageView.GENERATE_POC)) {
            return false;
        }
        return (webSocketMessage.direction() == Direction.CLIENT_TO_SERVER);
    }

    @Override
    public String caption() {
        return "Generate PoC";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

    @Override
    public boolean isModified() {
        return false;
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.txtGeneratorPoC.getLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.txtGeneratorPoC.setLineWrap(lineWrap);
    }

    public String getSelectedText() {
        String selectText = this.txtGeneratorPoC.getSelectedText();
        return selectText;
    }

}
