package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.http.message.MimeType;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.responses.HttpResponse;
import burp.api.montoya.http.message.responses.analysis.Attribute;
import burp.api.montoya.http.message.responses.analysis.AttributeType;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedEditor;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpResponseEditor;
import extend.util.external.ThemeUI;
import extension.helpers.HttpMesageHelper;
import extension.helpers.StringUtil;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.EnumSet;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */

public class HtmlCommetViewTab extends javax.swing.JPanel implements ExtensionProvidedEditor  {
    private final static Logger logger = Logger.getLogger(HtmlCommetViewTab.class.getName());

    final PropertyChangeListener listener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            ThemeUI.changeStyleTheme(txtHtmlComment);
        }
    };

    /**
     * Creates new form HtmlCommetViewTab
     */
    public HtmlCommetViewTab() {
        initComponents();
        customizeComponents();
    }

    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

    private org.fife.ui.rtextarea.RTextScrollPane scrollHtmlComment;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtHtmlComment;

    private void customizeComponents() {

        /*** UI design start ***/

        this.txtHtmlComment = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        this.scrollHtmlComment = new org.fife.ui.rtextarea.RTextScrollPane(this.txtHtmlComment);
        this.txtHtmlComment.setWrapStyleWord(false);

        this.txtHtmlComment.setClearWhitespaceLinesEnabled(true);
        this.txtHtmlComment.setHighlightCurrentLine(true);
        this.txtHtmlComment.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtHtmlComment.setBackground(SystemColor.text);
        this.txtHtmlComment.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        add(this.scrollHtmlComment, java.awt.BorderLayout.CENTER);

        /*** UI design end ***/

        this.quickSearchTab.setSelectedTextArea(this.txtHtmlComment);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        this.quickSearchTab.getUniqCheckBox().setVisible(true);
        this.quickSearchTab.getUniqCheckBox().addItemListener(encodingItemStateChanged);

//        this.txtHtmlComment.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
//        this.txtHtmlComment.setContentType("text/html");

        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.listener.propertyChange(null);
        ThemeUI.addPropertyChangeListener(listener);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void setMessageFont(Font font) {
        this.txtHtmlComment.setFont(font);
    }

    private HttpRequestResponse httpRequestResponse;

    public void setMessageEncoding(String encoding) {
        try {
            if (this.httpRequestResponse == null) {
                return;
            }
            final boolean uniq = this.quickSearchTab.getUniqCheckBox().isSelected();

            this.txtHtmlComment.setText("");
            SwingWorker swText = new SwingWorker<String, Object>() {
                @Override
                protected String doInBackground() throws Exception {
                    publish("...");
                    // String comments[] = TransUtil.extractHTMLComments(StringUtil.getStringCharset(httpRequestResponse.getBodyBytes(), encoding), uniq);
                    List<Attribute> comments = httpRequestResponse.response().attributes(AttributeType.COMMENTS);
                    StringBuilder buff = new StringBuilder();
                    for (Attribute c : comments) {
                        buff.append(c.value());
                        buff.append(HttpMesageHelper.LINE_TERMINATE);
                    }
                    return buff.toString();
//                    return TransUtil.join("\r\n", ConvertUtil.toUniqList(comments));
                }

                @Override
                protected void process(List<Object> chunks) {
                    txtHtmlComment.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
                }

                @Override
                protected void done() {
                    try {
                        txtHtmlComment.setText(get());
                        txtHtmlComment.setCaretPosition(0);
                        quickSearchTab.clearViewAndSearch();
                    } catch (InterruptedException ex) {
                        logger.log(Level.SEVERE, ex.getMessage(), ex);
                    } catch (ExecutionException ex) {
                        logger.log(Level.SEVERE, ex.getMessage(), ex);
                    }
                }
            };
            swText.execute();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    public Component getMessageComponent() {
        return this.txtHtmlComment;
    }

    public String getSelectedText() {
        String selectText = this.txtHtmlComment.getSelectedText();
        return selectText;
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.txtHtmlComment.getLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.txtHtmlComment.setLineWrap(lineWrap);
    }

    /**
     * @return
     */
    public HttpRequestResponse getHttpRequestResponse() {
        return this.httpRequestResponse;
    }

    @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        this.httpRequestResponse = httpRequestResponse;
        HttpResponse response = httpRequestResponse.response();
        String guessCharset = HttpMesageHelper.getGuessCharset(response);
        this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
        this.quickSearchTab.renewEncodingList(guessCharset, BurpExtension.getInstance().getSelectEncodingList());
        encodingItemStateChanged.itemStateChanged(null);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        if (httpRequestResponse == null) {
            return false;
        }
        burp.api.montoya.http.message.responses.HttpResponse httpResponse = httpRequestResponse.response();
        if (httpResponse == null) {
            return false;
        }

        UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getEncodingProperty();
        EnumSet<UniversalViewProperty.UniversalView> view = viewProperty.getMessageView();
        this.setLineWrap(viewProperty.isLineWrap());
        if (!view.contains(UniversalViewProperty.UniversalView.HTML_COMMENT)) {
            return false;
        }
        boolean mimeHTMLType = false;
        MimeType mimeType = httpResponse.inferredMimeType();
        mimeHTMLType = (mimeType == mimeType.HTML || mimeType == mimeType.XML || mimeType == mimeType.IMAGE_SVG_XML);
        if (httpResponse.body().length() > 0 && mimeHTMLType) {
            List<Attribute> comments = httpRequestResponse.response().attributes(AttributeType.COMMENTS);
            return !comments.isEmpty();
        } else {
            return false;
        }
    }

    @Override
    public String caption() {
        return "HTML Comment";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

    @Override
    public boolean isModified() {
        return false;
    }

}
