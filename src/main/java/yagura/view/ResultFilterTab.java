package yagura.view;

import burp.BurpExtension;
import extension.burp.BurpConfig;
import extension.burp.BurpUtil;
import extension.burp.FilterProperty;
import extension.burp.IBurpTab;
import extension.view.base.CustomListModel;
import java.awt.Component;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import yagura.model.ResultFilterProperty;

/**
 *
 * @author isayan
 */
public class ResultFilterTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(ResultFilterTab.class.getName());
    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    
    /**
     * Creates new form ResultFilter
     */
    public ResultFilterTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollMatchReplace = new javax.swing.JScrollPane();
        listResultFilter = new javax.swing.JList();
        btnItemDownArraw = new javax.swing.JButton();
        btnItemUpArraw = new javax.swing.JButton();
        btnItemRemove = new javax.swing.JButton();
        btnItemEdit = new javax.swing.JButton();
        btnItemNew = new javax.swing.JButton();
        btnItemApply = new javax.swing.JButton();

        scrollMatchReplace.setViewportView(listResultFilter);

        btnItemDownArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_down.png"))); // NOI18N
        btnItemDownArraw.setText("down");
        btnItemDownArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnItemDownArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemDownArrawActionPerformed(evt);
            }
        });

        btnItemUpArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_up.png"))); // NOI18N
        btnItemUpArraw.setText("up");
        btnItemUpArraw.setHideActionText(true);
        btnItemUpArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnItemUpArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemUpArrawActionPerformed(evt);
            }
        });

        btnItemRemove.setText("Remove");
        btnItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemRemoveActionPerformed(evt);
            }
        });

        btnItemEdit.setText("Edit");
        btnItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemEditActionPerformed(evt);
            }
        });

        btnItemNew.setText("New");
        btnItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemNewActionPerformed(evt);
            }
        });

        btnItemApply.setText("Apply");
        btnItemApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollMatchReplace, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnItemEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnItemNew, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnItemRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnItemApply, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnItemUpArraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnItemDownArraw, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnItemNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItemEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItemRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItemUpArraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnItemDownArraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItemApply))
                    .addComponent(scrollMatchReplace, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        // ResultFilterTab Tab
        this.listResultFilter.setModel(this.modelResultFilter);

        this.listResultFilter.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel l = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                String name = (String) value;
                FilterProperty filter = filterMap.get(name);
                if (filter != null) {
                    if (filter.getFilterCategory() == FilterProperty.FilterCategory.HTTP) {
                        l.setIcon(ResultFilterDlg.getCategoryIcon(filter.getFilterCategory()));
                        l.setIconTextGap(2);
                    }
                    else {
                        l.setIcon(ResultFilterDlg.getCategoryIcon(filter.getFilterCategory()));
                        l.setIconTextGap(2);
                    }
                }
                return l;
            }
        });

        this.btnItemEdit.setEnabled((listResultFilter.getSelectedIndices().length > 0));
        this.btnItemRemove.setEnabled((listResultFilter.getSelectedIndices().length > 0));
        this.btnItemApply.setEnabled((listResultFilter.getSelectedIndices().length > 0));

        this.listResultFilter.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                int rowCount = listResultFilter.getSelectedIndices().length;
                btnItemEdit.setEnabled((rowCount > 0));
                btnItemRemove.setEnabled((rowCount > 0));
                btnItemApply.setEnabled((rowCount > 0));
            }
        });

    }

    private final CustomListModel<String> modelResultFilter = new CustomListModel<>();

    private void btnItemDownArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemDownArrawActionPerformed
        int index = this.modelResultFilter.moveDown(this.listResultFilter.getSelectedIndex());
        this.listResultFilter.setSelectedIndex(index);
        firePropertyChange(ResultFilterProperty.RESULT_FILTER_PROPERTY, null, this.getResultFilter());
    }//GEN-LAST:event_btnItemDownArrawActionPerformed

    private void btnItemUpArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemUpArrawActionPerformed
        int index = this.modelResultFilter.moveUp(this.listResultFilter.getSelectedIndex());
        this.listResultFilter.setSelectedIndex(index);
        firePropertyChange(ResultFilterProperty.RESULT_FILTER_PROPERTY, null, this.getResultFilter());
    }//GEN-LAST:event_btnItemUpArrawActionPerformed

    private void btnItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemRemoveActionPerformed
        if (JOptionPane.showConfirmDialog(this, BUNDLE.getString("view.matchreplace.remove"), "Match and Replace", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            String name = this.getFilterSelectedName();
            this.modelResultFilter.removeElement(name);
            this.filterMap.remove(name);
            firePropertyChange(ResultFilterProperty.RESULT_FILTER_PROPERTY, null, this.getResultFilter());
        }
    }//GEN-LAST:event_btnItemRemoveActionPerformed

    private void btnItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemEditActionPerformed
        this.showResultFilterDlg(true);
    }//GEN-LAST:event_btnItemEditActionPerformed

    private void btnItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemNewActionPerformed
        this.showResultFilterDlg(false);
    }//GEN-LAST:event_btnItemNewActionPerformed

    private void btnItemApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemApplyActionPerformed
        final BurpExtension extenderImpl = BurpExtension.getInstance();
        String selectedFilterName = this.getFilterSelectedName();
        if (selectedFilterName != null) {
            BurpConfig.configBambda(BurpExtension.api(), this.filterMap.get(selectedFilterName), true);
        }
        IBurpTab tab = extenderImpl.getRootTabComponent();
        if (tab != null) {
            BurpUtil.flashTab(tab, "Proxy");
        }
    }//GEN-LAST:event_btnItemApplyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnItemApply;
    private javax.swing.JButton btnItemDownArraw;
    private javax.swing.JButton btnItemEdit;
    private javax.swing.JButton btnItemNew;
    private javax.swing.JButton btnItemRemove;
    private javax.swing.JButton btnItemUpArraw;
    private javax.swing.JList listResultFilter;
    private javax.swing.JScrollPane scrollMatchReplace;
    // End of variables declaration//GEN-END:variables

    private final ResultFilterDlg filterDlg = new ResultFilterDlg(null, true);
    private String selectedName = "";

    public String getSelectedName() {
        return this.selectedName;
    }

    public void setSelectedName(String selectedName) {
        this.selectedName = selectedName;
    }

    private final Map<String, FilterProperty> filterMap = Collections.synchronizedMap(new LinkedHashMap<>());

    protected String getFilterSelectedName() {
        int index = this.listResultFilter.getSelectedIndex();
        String name = null;
        if (index > -1) {
            name = (String) this.modelResultFilter.getElementAt(index);
        }
        return name;
    }

    
    @SuppressWarnings("unchecked")
    private void showResultFilterDlg(boolean editMode) {
        this.filterDlg.setLocationRelativeTo(this);
        String filterSelectedName = "";
        final FilterProperty filterProperty = new FilterProperty();
        if (editMode) {
            filterSelectedName = this.getFilterSelectedName();
            if (filterSelectedName == null || "".equals(filterSelectedName)) {
                return;
            }
            filterProperty.setProperty(this.filterMap.get(filterSelectedName));
            this.filterDlg.setEditMode(true);
            this.filterDlg.setFilterName(filterSelectedName);
            this.filterDlg.setProperty(filterProperty);
        } else {
            this.filterDlg.setEditMode(true);
            this.filterDlg.setFilterName("");
            this.filterDlg.setProperty(filterProperty);
        }
        this.filterDlg.setVisible(true);
        if (this.filterDlg.getModalResult() == JOptionPane.OK_OPTION) {
            String name = this.filterDlg.getFilterName();
            filterProperty.setProperty(this.filterDlg.getProperty());
            this.filterMap.put(name, filterProperty);

            if (this.modelResultFilter.contains(name)) {
                if (!editMode) {
                    this.modelResultFilter.removeElement(name);
                    this.modelResultFilter.addElement(name);
                }
            } else {
                this.modelResultFilter.addElement(name);
            }
            this.listResultFilter.setSelectedValue(name, true);
        }
        firePropertyChange(ResultFilterProperty.RESULT_FILTER_PROPERTY, null, this.getResultFilter());
    }

    public Map<String, FilterProperty> getFilterMap() {
        return this.filterMap;
    }

    private Map<String, FilterProperty> renewFilterMap() {
        Map<String, FilterProperty> newMap = new LinkedHashMap<>();
        for (int i = 0; i < this.modelResultFilter.size(); i++) {
            String name = (String) this.modelResultFilter.get(i);
            FilterProperty filter = this.filterMap.get(name);
            newMap.put(name, filter);
        }
        this.filterMap.clear();
        this.filterMap.putAll(newMap);
        return newMap;
    }

    public void setFilterMap(Map<String, FilterProperty> filterMap) {
        this.modelResultFilter.removeAllElements();
        this.filterMap.clear();
        this.filterMap.putAll(filterMap);
        for (String name : filterMap.keySet()) {
            this.modelResultFilter.addElement(name);
        }
        this.listResultFilter.setSelectedValue(this.getSelectedName(), true);
    }

    @Override
    public String getTabCaption() {
        return "ResultFilter";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    public void setResultFilter(ResultFilterProperty resultFilter) {
        this.setSelectedName(resultFilter.getSelectedName());
        this.setFilterMap(resultFilter.getFilterMap());
    }

    public ResultFilterProperty getResultFilter() {
        ResultFilterProperty filter = new ResultFilterProperty();
        filter.setSelectedName(this.getSelectedName());
        filter.setFilterMap(this.renewFilterMap());
        return filter;
    }

}
