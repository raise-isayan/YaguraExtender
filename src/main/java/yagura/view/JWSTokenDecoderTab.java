package yagura.view;

import java.awt.Component;
import java.util.logging.Logger;
import extension.burp.IBurpTab;
import passive.JWSToken;

/**
 *
 * @author isayan
 */
public class JWSTokenDecoderTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(JWSTokenDecoderTab.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private final JWSToken jwsInstance = new JWSToken();

    /**
     * Creates new form JWTWeakTokenScan
     */
    public JWSTokenDecoderTab() {
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        this.txtJsonToken.setWrapStyleWord(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJTokenDecoder = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        txtJsonToken = new javax.swing.JTextArea();
        btnDecode = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblTokenValid = new javax.swing.JLabel();
        pnlToken = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        scrollHeaderJSON = new javax.swing.JScrollPane();
        txtHeaderJSON = new javax.swing.JEditorPane();
        pnlPayload = new javax.swing.JPanel();
        lblPayload = new javax.swing.JLabel();
        scrollPayloadJSON = new javax.swing.JScrollPane();
        txtPayloadJSON = new javax.swing.JEditorPane();
        pnlSignature = new javax.swing.JPanel();
        lblSignature = new javax.swing.JLabel();
        scrollSignatureJSON = new javax.swing.JScrollPane();
        txtSignatureSign = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        txtJsonToken.setColumns(20);
        txtJsonToken.setLineWrap(true);
        txtJsonToken.setRows(5);
        jScrollPane.setViewportView(txtJsonToken);

        btnDecode.setText("Decode");
        btnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlJTokenDecoderLayout = new javax.swing.GroupLayout(pnlJTokenDecoder);
        pnlJTokenDecoder.setLayout(pnlJTokenDecoderLayout);
        pnlJTokenDecoderLayout.setHorizontalGroup(
            pnlJTokenDecoderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJTokenDecoderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1097, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlJTokenDecoderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDecode, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(lblTokenValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlJTokenDecoderLayout.setVerticalGroup(
            pnlJTokenDecoderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJTokenDecoderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDecode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addGap(18, 18, 18)
                .addComponent(lblTokenValid)
                .addContainerGap(42, Short.MAX_VALUE))
            .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        add(pnlJTokenDecoder, java.awt.BorderLayout.NORTH);

        pnlToken.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlToken.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlToken.setPreferredSize(new java.awt.Dimension(100, 454));
        pnlToken.setLayout(new java.awt.BorderLayout());

        pnlHeader.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlHeader.setPreferredSize(new java.awt.Dimension(100, 100));
        pnlHeader.setLayout(new java.awt.BorderLayout());

        lblHeader.setText("Header");
        pnlHeader.add(lblHeader, java.awt.BorderLayout.NORTH);

        scrollHeaderJSON.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollHeaderJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        scrollHeaderJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtHeaderJSON.setEditable(false);
        txtHeaderJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        txtHeaderJSON.setPreferredSize(new java.awt.Dimension(80, 19));
        scrollHeaderJSON.setViewportView(txtHeaderJSON);

        pnlHeader.add(scrollHeaderJSON, java.awt.BorderLayout.CENTER);

        pnlToken.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlPayload.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlPayload.setPreferredSize(new java.awt.Dimension(100, 300));
        pnlPayload.setLayout(new java.awt.BorderLayout());

        lblPayload.setText("Payload");
        pnlPayload.add(lblPayload, java.awt.BorderLayout.NORTH);

        scrollPayloadJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtPayloadJSON.setEditable(false);
        txtPayloadJSON.setMinimumSize(new java.awt.Dimension(80, 19));
        scrollPayloadJSON.setViewportView(txtPayloadJSON);

        pnlPayload.add(scrollPayloadJSON, java.awt.BorderLayout.CENTER);

        pnlToken.add(pnlPayload, java.awt.BorderLayout.CENTER);

        pnlSignature.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlSignature.setPreferredSize(new java.awt.Dimension(100, 50));
        pnlSignature.setLayout(new java.awt.BorderLayout());

        lblSignature.setText("Signature");
        pnlSignature.add(lblSignature, java.awt.BorderLayout.NORTH);

        scrollSignatureJSON.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollSignatureJSON.setMinimumSize(new java.awt.Dimension(0, 0));
        scrollSignatureJSON.setPreferredSize(new java.awt.Dimension(80, 21));

        txtSignatureSign.setEditable(false);
        txtSignatureSign.setMinimumSize(new java.awt.Dimension(0, 0));
        txtSignatureSign.setPreferredSize(new java.awt.Dimension(80, 19));
        scrollSignatureJSON.setViewportView(txtSignatureSign);

        pnlSignature.add(scrollSignatureJSON, java.awt.BorderLayout.CENTER);

        pnlToken.add(pnlSignature, java.awt.BorderLayout.SOUTH);

        add(pnlToken, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeActionPerformed
        JWSToken token = jwsInstance.parseToken(this.txtJsonToken.getText().trim(), true);
        if (token != null) {
            this.lblTokenValid.setText("");
            this.txtHeaderJSON.setText(token.getHeaderJSON(true));
            this.txtPayloadJSON.setText(token.getPayloadJSON(true));
            this.txtSignatureSign.setText(token.getSignature());
        } else {
            this.btnClearActionPerformed(null);
            this.lblTokenValid.setText(BUNDLE.getString("token.invalid.token"));
        }
    }//GEN-LAST:event_btnDecodeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.lblTokenValid.setText("");
        this.txtJsonToken.setText("");
        this.txtHeaderJSON.setText("");
        this.txtPayloadJSON.setText("");
        this.txtSignatureSign.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecode;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPayload;
    private javax.swing.JLabel lblSignature;
    private javax.swing.JLabel lblTokenValid;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlJTokenDecoder;
    private javax.swing.JPanel pnlPayload;
    private javax.swing.JPanel pnlSignature;
    private javax.swing.JPanel pnlToken;
    private javax.swing.JScrollPane scrollHeaderJSON;
    private javax.swing.JScrollPane scrollPayloadJSON;
    private javax.swing.JScrollPane scrollSignatureJSON;
    private javax.swing.JEditorPane txtHeaderJSON;
    private javax.swing.JTextArea txtJsonToken;
    private javax.swing.JEditorPane txtPayloadJSON;
    private javax.swing.JEditorPane txtSignatureSign;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "JWS Token Decoder";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

}
