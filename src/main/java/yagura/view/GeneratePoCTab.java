package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.http.HttpService;
import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.http.message.params.ParsedHttpParameter;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.requests.MalformedRequestException;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpRequestEditor;
import extend.util.external.ThemeUI;
import extend.util.external.TransUtil;
import extension.burp.HttpTarget;
import extension.helpers.ConvertUtil;
import extension.helpers.HttpRequestWapper;
import extension.helpers.HttpResponseWapper;
import extension.helpers.HttpUtil;
import extension.helpers.MatchUtil;
import extension.helpers.SmartCodec;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.helpers.json.JsonUtil;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.text.JTextComponent;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import yagura.model.Parameter;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class GeneratePoCTab extends javax.swing.JPanel implements ExtensionProvidedHttpRequestEditor {

    private final static Logger logger = Logger.getLogger(GeneratePoCTab.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    final PropertyChangeListener listener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            ThemeUI.changeStyleTheme(txtGeneratorPoC);
        }
    };

    /**
     * Creates new form GeneraterPoC
     */
    public GeneratePoCTab() {
        initComponents();
        customizeComponents();
    }

    private org.fife.ui.rtextarea.RTextScrollPane scrollGeneratorPoC;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtGeneratorPoC;

    private QuickSearchTab quickSearchTab = new QuickSearchTab();

    private void customizeComponents() {

        /**
         * * UI design start **
         */
        this.txtGeneratorPoC = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        this.scrollGeneratorPoC = new org.fife.ui.rtextarea.RTextScrollPane(txtGeneratorPoC);
        this.txtGeneratorPoC.setWrapStyleWord(false);

        this.txtGeneratorPoC.setClearWhitespaceLinesEnabled(true);
        this.txtGeneratorPoC.setHighlightCurrentLine(true);
        this.txtGeneratorPoC.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtGeneratorPoC.setBackground(SystemColor.text);
        this.txtGeneratorPoC.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        this.splitGeneratorPoC.setRightComponent(this.scrollGeneratorPoC);

        /**
         * * UI design end **
         */
        this.grpGene.add(this.rdoAuto);
        this.grpGene.add(this.rdoUrlencode);
        this.grpGene.add(this.rdoMultipart);
        this.grpGene.add(this.rdoPlain);
        this.quickSearchTab.setSelectedTextArea(this.txtGeneratorPoC);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);

        this.txtGeneratorPoC.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);

//        this.txtGeneratorPoC.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
//        this.txtGeneratorPoC.setContentType("text/html");
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.listener.propertyChange(null);
        ThemeUI.addPropertyChangeListener(listener);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGene = new javax.swing.ButtonGroup();
        splitGeneratorPoC = new javax.swing.JSplitPane();
        pnlPoC = new javax.swing.JPanel();
        pnlButton = new javax.swing.JPanel();
        btnSavetoFile = new javax.swing.JButton();
        btnCopyClipbord = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        pnlCheck = new javax.swing.JPanel();
        chkAutoSubmit = new javax.swing.JCheckBox();
        chkTimeDelay = new javax.swing.JCheckBox();
        chkGETmethod = new javax.swing.JCheckBox();
        chkUseHttps = new javax.swing.JCheckBox();
        chkXHR = new javax.swing.JCheckBox();
        chkXHRWithXHeader = new javax.swing.JCheckBox();
        spnTime = new javax.swing.JSpinner();
        chkMultiForm = new javax.swing.JCheckBox();
        chkLegacyFileUpload = new javax.swing.JCheckBox();
        pnlSelect = new javax.swing.JPanel();
        rdoPlain = new javax.swing.JRadioButton();
        rdoMultipart = new javax.swing.JRadioButton();
        rdoUrlencode = new javax.swing.JRadioButton();
        rdoAuto = new javax.swing.JRadioButton();

        setLayout(new java.awt.BorderLayout());

        splitGeneratorPoC.setDividerLocation(200);
        splitGeneratorPoC.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPoC.setLayout(new java.awt.GridLayout(1, 3));

        btnSavetoFile.setText("Save to file");
        btnSavetoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavetoFileActionPerformed(evt);
            }
        });

        btnCopyClipbord.setText("Copy to Clipbord");
        btnCopyClipbord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyClipbordActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerate)
                    .addComponent(btnCopyClipbord)
                    .addComponent(btnSavetoFile))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyClipbord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavetoFile)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlButton);

        chkAutoSubmit.setText("auto submit");

        chkTimeDelay.setText("Time delay (ms)");

        chkGETmethod.setText("GET method");

        chkUseHttps.setText("use https");

        chkXHR.setText("XHR");
        chkXHR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkXHRStateChanged(evt);
            }
        });

        chkXHRWithXHeader.setText("with X- Header");
        chkXHRWithXHeader.setEnabled(false);

        spnTime.setValue(1000);

        chkMultiForm.setText("multi form (with target=blank)");

        chkLegacyFileUpload.setText("Legacy FileUpload");
        chkLegacyFileUpload.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkLegacyFileUploadStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlCheckLayout = new javax.swing.GroupLayout(pnlCheck);
        pnlCheck.setLayout(pnlCheckLayout);
        pnlCheckLayout.setHorizontalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addComponent(chkAutoSubmit)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkMultiForm)
                            .addComponent(chkXHR)
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addComponent(chkTimeDelay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addComponent(chkUseHttps)
                                .addGap(22, 22, 22)
                                .addComponent(chkGETmethod))
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(chkXHRWithXHeader))
                            .addComponent(chkLegacyFileUpload))
                        .addGap(0, 64, Short.MAX_VALUE))))
        );
        pnlCheckLayout.setVerticalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAutoSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTimeDelay)
                    .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkGETmethod)
                    .addComponent(chkUseHttps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMultiForm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkXHR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkXHRWithXHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkLegacyFileUpload)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlCheck);

        pnlSelect.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Content-Type"));

        rdoPlain.setText("plain");

        rdoMultipart.setText("multi part");

        rdoUrlencode.setText("urlencode");

        rdoAuto.setSelected(true);
        rdoAuto.setText("auto");

        javax.swing.GroupLayout pnlSelectLayout = new javax.swing.GroupLayout(pnlSelect);
        pnlSelect.setLayout(pnlSelectLayout);
        pnlSelectLayout.setHorizontalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoUrlencode)
                    .addComponent(rdoAuto)
                    .addComponent(rdoMultipart)
                    .addComponent(rdoPlain))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        pnlSelectLayout.setVerticalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoUrlencode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoMultipart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoPlain)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlSelect);

        splitGeneratorPoC.setLeftComponent(pnlPoC);

        add(splitGeneratorPoC, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private File currentPoCDirectory = null;

    private void btnSavetoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavetoFileActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        String encoding = this.quickSearchTab.getSelectedEncoding();
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.setCurrentDirectory(this.currentPoCDirectory);
        int selected = filechooser.showSaveDialog(null);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File saveFile = filechooser.getSelectedFile();
            if (SwingUtil.isFileOverwriteConfirmed(saveFile, String.format(BUNDLE.getString("extend.exists.overwrite.message"), saveFile.getName()), BUNDLE.getString("extend.exists.overwrite.confirm"))) {
                try (BufferedOutputStream fstm = new BufferedOutputStream(new FileOutputStream(saveFile))) {
                    fstm.write(StringUtil.getBytesCharset(ta.getText(), encoding));
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
            this.currentPoCDirectory = saveFile.getParentFile();
        }
    }//GEN-LAST:event_btnSavetoFileActionPerformed

    private void btnCopyClipbordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyClipbordActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        SwingUtil.systemClipboardCopy(ta.getText());
    }//GEN-LAST:event_btnCopyClipbordActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        final GenerateCsrfParameter csrfParam = getGenerateCsrfParameter();
        SwingWorker swPoC = new SwingWorker<String, Object>() {
            @Override
            protected String doInBackground() throws Exception {
                publish("...");
                if (csrfParam.isCsrfXHR()) {
                    return generateXHRPoC(csrfParam);
                } else {
                    return generateStandardPoC(csrfParam);
                }
            }

            @Override
            protected void process(List<Object> chunks) {
                ta.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
            }

            @Override
            protected void done() {
                try {
                    ta.setText(get());
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (Exception ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        };
        swPoC.execute();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void chkXHRStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkXHRStateChanged
        this.chkXHRWithXHeader.setEnabled(this.chkXHR.isSelected());
        this.chkLegacyFileUpload.setEnabled(!this.chkXHR.isSelected());
    }//GEN-LAST:event_chkXHRStateChanged

    private void chkLegacyFileUploadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkLegacyFileUploadStateChanged
        this.chkXHR.setEnabled(!this.chkLegacyFileUpload.isSelected());
    }//GEN-LAST:event_chkLegacyFileUploadStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyClipbord;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSavetoFile;
    private javax.swing.JCheckBox chkAutoSubmit;
    private javax.swing.JCheckBox chkGETmethod;
    private javax.swing.JCheckBox chkLegacyFileUpload;
    private javax.swing.JCheckBox chkMultiForm;
    private javax.swing.JCheckBox chkTimeDelay;
    private javax.swing.JCheckBox chkUseHttps;
    private javax.swing.JCheckBox chkXHR;
    private javax.swing.JCheckBox chkXHRWithXHeader;
    private javax.swing.ButtonGroup grpGene;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlCheck;
    private javax.swing.JPanel pnlPoC;
    private javax.swing.JPanel pnlSelect;
    private javax.swing.JRadioButton rdoAuto;
    private javax.swing.JRadioButton rdoMultipart;
    private javax.swing.JRadioButton rdoPlain;
    private javax.swing.JRadioButton rdoUrlencode;
    private javax.swing.JSplitPane splitGeneratorPoC;
    private javax.swing.JSpinner spnTime;
    // End of variables declaration//GEN-END:variables

    static class GenerateBaseCsrfParameter {
        private boolean csrfAutoSubmit = false;
        private int timeOutValue = 1000;
        public boolean csrfAuto = false;
        public boolean useSecure = false;
        private boolean csrfTimeDelay = false;
        private String csrfEncoding = StandardCharsets.UTF_8.name();

        /**
         * @return the csrfAutoSubmit
         */
        public boolean isCsrfAutoSubmit() {
            return csrfAutoSubmit;
        }

        /**
         * @param csrfAutoSubmit the csrfAutoSubmit to set
         */
        public void setCsrfAutoSubmit(boolean csrfAutoSubmit) {
            this.csrfAutoSubmit = csrfAutoSubmit;
        }

        /**
         * @return the timeOutValue
         */
        public int getTimeOutValue() {
            return timeOutValue;
        }

        /**
         * @param timeOutValue the timeOutValue to set
         */
        public void setTimeOutValue(int timeOutValue) {
            this.timeOutValue = timeOutValue;
        }

        /**
         * @return the csrfAuto
         */
        public boolean isCsrfAuto() {
            return csrfAuto;
        }

        /**
         * @param csrfAuto the csrfAuto to set
         */
        public void setCsrfAuto(boolean csrfAuto) {
            this.csrfAuto = csrfAuto;
        }

        /**
         * @return the useSecure
         */
        public boolean isUseSecure() {
            return useSecure;
        }

        /**
         * @param useSecure the useSecure to set
         */
        public void setUseSecure(boolean useSecure) {
            this.useSecure = useSecure;
        }

        /**
         * @return the csrfTimeDelay
         */
        public boolean isCsrfTimeDelay() {
            return csrfTimeDelay;
        }

        /**
         * @param csrfTimeDelay the csrfTimeDelay to set
         */
        public void setCsrfTimeDelay(boolean csrfTimeDelay) {
            this.csrfTimeDelay = csrfTimeDelay;
        }

        /**
         * @return the csrfEncoding
         */
        public String getCsrfEncoding() {
            return csrfEncoding;
        }

        /**
         * @param csrfEncoding the csrfEncoding to set
         */
        public void setCsrfEncoding(String csrfEncoding) {
            this.csrfEncoding = csrfEncoding;
        }

    }

    protected class GenerateCsrfParameter extends GenerateBaseCsrfParameter {
        private boolean csrfUrlencode = false;
        private boolean csrfMultiPart = false;
        private boolean csrfTextPlain = false;
        public boolean csrfXHR = false;
        private boolean csrfXHRBinaly = false;
        private boolean csrfXHRWithXHeader = false;
        private boolean csrfGetMethod = false;
        private boolean csrfMultiForm = false;
        private boolean csrfLegacyFileUpload = false;

        /**
         * @return the csrfUrlencode
         */
        public boolean isCsrfUrlencode() {
            return csrfUrlencode;
        }

        /**
         * @param csrfUrlencode the csrfUrlencode to set
         */
        public void setCsrfUrlencode(boolean csrfUrlencode) {
            this.csrfUrlencode = csrfUrlencode;
        }

        /**
         * @return the csrfMultiPart
         */
        public boolean isCsrfMultiPart() {
            return csrfMultiPart;
        }

        /**
         * @param csrfMultiPart the csrfMultiPart to set
         */
        public void setCsrfMultiPart(boolean csrfMultiPart) {
            this.csrfMultiPart = csrfMultiPart;
        }

        /**
         * @return the csrfTextPlain
         */
        public boolean isCsrfTextPlain() {
            return csrfTextPlain;
        }

        /**
         * @param csrfTextPlain the csrfTextPlain to set
         */
        public void setCsrfTextPlain(boolean csrfTextPlain) {
            this.csrfTextPlain = csrfTextPlain;
        }

        /**
         * @return the csrfXHR
         */
        public boolean isCsrfXHR() {
            return csrfXHR;
        }

        /**
         * @param csrfXHR the csrfXHR to set
         */
        public void setCsrfXHR(boolean csrfXHR) {
            this.csrfXHR = csrfXHR;
        }

        /**
         * @return the csrfXHRBinaly
         */
        public boolean isCsrfXHRBinaly() {
            return csrfXHRBinaly;
        }

        /**
         * @param csrfXHRBinaly the csrfXHRBinaly to set
         */
        public void setCsrfXHRBinaly(boolean csrfXHRBinaly) {
            this.csrfXHRBinaly = csrfXHRBinaly;
        }

        /**
         * @return the csrfXHRWithXHeader
         */
        public boolean isCsrfXHRWithXHeader() {
            return csrfXHRWithXHeader;
        }

        /**
         * @param csrfXHRWithXHeader the csrfXHRWithXHeader to set
         */
        public void setCsrfXHRWithXHeader(boolean csrfXHRWithXHeader) {
            this.csrfXHRWithXHeader = csrfXHRWithXHeader;
        }

        /**
         * @return the csrfLegacyFileUpload
         */
        public boolean isCsrfLegacyFileUpload() {
            return csrfLegacyFileUpload;
        }

        /**
         * @param csrfLegacyFileUpload the csrfLegacyFileUpload to set
         */
        public void setCsrfLegacyFileUpload(boolean csrfLegacyFileUpload) {
            this.csrfLegacyFileUpload = csrfLegacyFileUpload;
        }

        /**
         * @return the csrfGetMethod
         */
        public boolean isCsrfGetMethod() {
            return csrfGetMethod;
        }

        /**
         * @param csrfGetMethod
         */
        public void setCsrfGetMethod(boolean csrfGetMethod) {
            this.csrfGetMethod = csrfGetMethod;
        }

        /**
         * @return the csrfMultiForm
         */
        public boolean isCsrfMultiForm() {
            return csrfMultiForm;
        }

        /**
         * @param csrfMultiForm the csrfMultiForm to set
         */
        public void setCsrfMultiForm(boolean csrfMultiForm) {
            this.csrfMultiForm = csrfMultiForm;
        }

    }

    protected GenerateCsrfParameter getGenerateCsrfParameter() {
        GenerateCsrfParameter csrfParam = new GenerateCsrfParameter();
        csrfParam.setCsrfAutoSubmit(this.chkAutoSubmit.isSelected());
        csrfParam.setTimeOutValue((int) this.spnTime.getValue());
        csrfParam.setCsrfAuto(this.rdoAuto.isSelected());
        csrfParam.setCsrfUrlencode(this.rdoUrlencode.isSelected());
        csrfParam.setCsrfMultiPart(this.rdoMultipart.isSelected());
        csrfParam.setCsrfTextPlain(this.rdoPlain.isSelected());
        csrfParam.setCsrfEncoding(this.quickSearchTab.getSelectedEncoding());
        csrfParam.setCsrfXHR(this.chkXHR.isSelected());
        csrfParam.setCsrfXHRWithXHeader(this.chkXHRWithXHeader.isSelected());
        csrfParam.setCsrfLegacyFileUpload(this.chkLegacyFileUpload.isSelected());
        csrfParam.setCsrfGetMethod(this.chkGETmethod.isSelected());
        csrfParam.setCsrfMultiForm(this.chkMultiForm.isSelected());
        csrfParam.setUseSecure(this.chkUseHttps.isSelected());
        csrfParam.setCsrfTimeDelay(this.chkTimeDelay.isSelected());
        return csrfParam;
    }

    public void setMessageFont(Font font) {
        this.txtGeneratorPoC.setFont(font);
        this.quickSearchTab.setMessageFont(font);
    }

    private HttpRequestResponse httpRequestResponse;

    public void setMessageEncoding(String encoding) {
        try {
            if (this.httpRequestResponse == null) {
                return;
            }
            JTextComponent ta = this.txtGeneratorPoC;
            if (this.httpRequestResponse != null) {
                // Raw
                ta.setText("");
                ta.setCaretPosition(0);
                // View
            } else {
                ta.setText("");
                ta.setCaretPosition(0);
            }
            this.quickSearchTab.clearView();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    protected String generateMultiFormFunction(boolean isCsrfTimeDelay) {
        String timeDelay = isCsrfTimeDelay ? "msec" : "";
        StringBuilder buff = new StringBuilder();
        buff.append(String.format("function submitPoC(%s) {", new Object[]{timeDelay})).append(HttpUtil.LINE_TERMINATE);
        buff.append("\tfor(let i = 0; i < document.forms.length; i++) {").append(HttpUtil.LINE_TERMINATE);
        if (isCsrfTimeDelay) {
            buff.append("\t\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
        }
        buff.append("\t\tdocument.forms[i].submit();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t}").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    protected String generateDataTransferFunctionCall(String fileid, byte[] binaly, String filename, String contentType) {
        StringBuilder buff = new StringBuilder();
        buff.append("\tconst ").append(fileid).append(" = new File([Uint8Array.of(").append(generateHexBinay(binaly)).append(").buffer],\"").append(ConvertUtil.encodeJsLangQuote(filename, false)).append("\",{\"type\": \"").append(ConvertUtil.encodeJsLangQuote(contentType, false)).append("\"});").append(HttpUtil.LINE_TERMINATE);;
        buff.append("\tfileAttachment(\"").append(fileid).append("\", ").append(fileid).append(");").append(HttpUtil.LINE_TERMINATE);;
        return buff.toString();
    }

    static String generateDataTransferFunction() {
        StringBuilder buff = new StringBuilder();
        buff.append("function fileAttachment(fileid, file){").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tconst part  = document.getElementById(fileid);").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tconst dT = new DataTransfer();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tdT.items.add(file);").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tpart.files = dT.files;").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    static String generateTimeDelayFunction() {
        StringBuilder buff = new StringBuilder();
        buff.append("function msleep(msec) {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tvar preDate = new Date();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tvar curDate = preDate;").append(HttpUtil.LINE_TERMINATE);
        buff.append("\tdo {").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t\tcurDate = new Date();").append(HttpUtil.LINE_TERMINATE);
        buff.append("\t} while(curDate - preDate < msec);").append(HttpUtil.LINE_TERMINATE);
        buff.append("}").append(HttpUtil.LINE_TERMINATE);
        buff.append(HttpUtil.LINE_TERMINATE);
        return buff.toString();
    }

    static String generateHexBinay(byte[] binay) {
        final StringBuilder buff = new StringBuilder();
        for (int i = 0; i < binay.length; i++) {
            if (buff.length() > 0) {
                buff.append(",");
            }
            buff.append("0x");
            buff.append(ConvertUtil.toHexString(binay[i], false));
        }
        return buff.toString();
    }

    /**
     * *
     *
     * <script>
     * function launch(){ const dT = new DataTransfer(); const file = new File(
     * [ "CSRF-filecontent" ], "CSRF-filename" ); dT.items.add( file );
     * document.xss[0].files = dT.files; document.xss.submit() }
     * </script>
     *
     * <form style="display: none" name="xss" method="post" action="<target>"
     * enctype="multipart/form-data">
     * <input id="file" type="file" name="file"/>
     * <input type="submit" name="" value="" size="0" />
     * </form>
     * <button value="button" onclick="launch()">Submit Request</button>
     *
     **
     */
    private String generateStandardPoC(GenerateCsrfParameter csrfParam) {
        final StringBuilder buff = new StringBuilder();
        try {
            boolean csrfSecure = csrfParam.isUseSecure();
            boolean csrfMultiForm = csrfParam.isCsrfMultiForm();
            boolean csrfUrlencode = csrfParam.isCsrfUrlencode();
            boolean csrfMultiPart = csrfParam.isCsrfMultiPart();
            boolean csrfLegacyFileUpload = csrfParam.isCsrfLegacyFileUpload();
            boolean csrfTextPlain = csrfParam.isCsrfTextPlain();
            boolean isCsrfTimeDelay = csrfParam.isCsrfTimeDelay();
            int timeOutValue = csrfParam.getTimeOutValue();
            String csrfEncoding = csrfParam.getCsrfEncoding();

            final HttpRequestWapper wrapRequest = new HttpRequestWapper(this.httpRequestResponse.request());
            // 自動判定
            String contentType = wrapRequest.getEnctype();
            String csrfEnctype = (contentType == null) ? HttpUtil.URL_ENCODED : contentType;
            // select auto
            if (csrfParam.isCsrfAuto()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                        csrfEnctype = "text/plain"; // 固定
                    }
                }
                logger.log(Level.FINE, "multipart:{0}", csrfMultiPart);
            } else {
                // select urlencode mode
                if (csrfUrlencode) {
                    csrfEnctype = HttpUtil.URL_ENCODED;
                }
                // select multipart
                if (csrfMultiPart) {
                    csrfEnctype = HttpUtil.MULTIPART_FORM_DATA;
                }
                // select text/plain
                if (csrfTextPlain) {
                    csrfEnctype = "text/plain"; // 固定
                }
            }

            final StringBuilder dataTransfer = new StringBuilder();
            String csrfFormMethod = csrfParam.isCsrfGetMethod() ? HttpRequestWapper.METHOD_GET : wrapRequest.method();
            int csrfPort = wrapRequest.httpService().port();
            if (HttpUtil.getDefaultPort(wrapRequest.httpService().secure()) == wrapRequest.httpService().port()) {
                csrfPort = (wrapRequest.httpService().secure() == csrfSecure) ? HttpUtil.getDefaultPort(wrapRequest.httpService().secure()) : HttpUtil.getDefaultPort(csrfSecure);
            }
            final HttpTarget httpService = HttpTarget.getHttpTarget(wrapRequest.httpService().host(), csrfPort, csrfSecure);

            String actiontUrl = wrapRequest.withService(httpService).url();
            String csrfUrl = (csrfParam.isCsrfGetMethod() || wrapRequest.isGET()) ? HttpRequestWapper.getUrlPath(actiontUrl) : actiontUrl;

            // 現在時刻
            LocalDateTime localDateTime = LocalDateTime.now();
            DateTimeFormatter localfmt = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");

            final StringBuilder formAction = new StringBuilder();
            formAction.append("<!-- begen form -->").append(HttpUtil.LINE_TERMINATE);
            String targetLink = (csrfMultiForm) ? "target=\"_blank\"" : "";
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                if (HttpUtil.isUrlEencoded(csrfEnctype)) {
                    formAction.append(String.format("<form action=\"%s\" method=\"%s\" %s>",
                            new Object[]{ConvertUtil.encodeJsLangQuote(csrfUrl), csrfFormMethod, targetLink})).append(HttpUtil.LINE_TERMINATE);
                } else {
                    formAction.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\" %s>",
                            new Object[]{ConvertUtil.encodeJsLangQuote(csrfUrl), csrfFormMethod, csrfEnctype, targetLink})).append(HttpUtil.LINE_TERMINATE);
                }
                List<ParsedHttpParameter> parameters = wrapRequest.parameters();
                logger.log(Level.FINE, "parameters.length:{0}", parameters.size());
                boolean binaryParam = false;
                String filename = "";
                for (int i = 0; i < parameters.size(); i++) {
                    ParsedHttpParameter param = parameters.get(i);
                    String paramName = param.name();
                    String paramValue = param.value();
                    HttpParameterType paramType = param.type();
                    if (paramType == HttpParameterType.COOKIE) {
                        continue;
                    }
                    if (paramType == HttpParameterType.URL) {
                        paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                        paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                        if (MatchUtil.isUrlencoded(paramName)) {
                            paramName = SmartCodec.toUrlDecode(paramName, csrfEncoding);
                        }
                        if (MatchUtil.isUrlencoded(paramValue)) {
                            paramValue = SmartCodec.toUrlDecode(paramValue, csrfEncoding);
                        }
                        String decodename = HttpUtil.toHtmlEncode(paramName);
                        String decodevalue = HttpUtil.toHtmlEncode(paramValue);
                        formAction.append(String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">",
                                new Object[]{decodename, decodevalue})).append(HttpUtil.LINE_TERMINATE);
                    } else if (paramType == HttpParameterType.BODY && !binaryParam) {
                        //if Resuest MultiPart binaryParam;
                        if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                            paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                            // ファイルアップロード時エンコードを判定しない
                            if (binaryParam) {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), StandardCharsets.ISO_8859_1);
                            } else {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                        } else {
                            if (MatchUtil.isUrlencoded(paramName)) {
                                paramName = SmartCodec.toUrlDecode(paramName, csrfEncoding);
                            }
                            if (MatchUtil.isUrlencoded(paramValue)) {
                                paramValue = SmartCodec.toUrlDecode(paramValue, csrfEncoding);
                            }
                        }
                        String encodeName = HttpUtil.toHtmlEncode(paramName);
                        String encodeValue = HttpUtil.toHtmlEncode(paramValue);
                        formAction.append(String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">",
                                new Object[]{ConvertUtil.encodeJsLangQuote(encodeName), ConvertUtil.encodeJsLangQuote(encodeValue)})).append(HttpUtil.LINE_TERMINATE);
                    } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                        binaryParam = true;
                        filename = paramValue;
                    } else {
                        String file_encoding = csrfEncoding;
                        String decodevalue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), file_encoding);
                        if (csrfLegacyFileUpload) {
                            formAction.append("<!-- Internet Explorer browser only technique -->").append(HttpUtil.LINE_TERMINATE);
                            formAction.append(String.format("<textarea name=\"%s&quot;; filename=&quot;%s&quot;&#x0d;&#x0a;Content-Type: text/plain; charset=%s\">",
                                    new Object[]{ConvertUtil.encodeJsLangQuote(paramName), ConvertUtil.encodeJsLangQuote(filename), ConvertUtil.encodeJsLangQuote(file_encoding)}));
                            formAction.append(HttpUtil.toHtmlEncode(decodevalue));
                            formAction.append("</textarea>");
                        } else {
                            String fileid = String.format("fileid%s_%d", new Object[]{csrfMultiForm ? localfmt.format(localDateTime) : "", i});
                            formAction.append(String.format("<input id=\"%s\" type=\"file\" name=\"%s\"/>",
                                    new Object[]{fileid, ConvertUtil.encodeJsLangQuote(paramName)})).append(HttpUtil.LINE_TERMINATE);
                            String multiPartContentType = Parameter.getMultipartContentType(wrapRequest.getMessageByte(), param.nameOffsets().startIndexInclusive(), param.valueOffsets().startIndexInclusive());
                            byte[] valueRaw = Arrays.copyOfRange(wrapRequest.getMessageByte(), param.valueOffsets().startIndexInclusive(), param.valueOffsets().endIndexExclusive());
                            dataTransfer.append(generateDataTransferFunctionCall(fileid, valueRaw, ConvertUtil.encodeJsLangQuote(filename), ConvertUtil.encodeJsLangQuote(multiPartContentType)));
                        }
                        binaryParam = false;
                    }
                }
            } else {
                // csrf textplain
                formAction.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\" %s>",
                        new Object[]{csrfUrl, csrfFormMethod, csrfEnctype, targetLink})).append(HttpUtil.LINE_TERMINATE);
                Map.Entry<String, String> pair = HttpUtil.getParameter(StringUtil.getStringCharset(wrapRequest.body().getBytes(), csrfEncoding));
                String paramName = pair.getKey();
                String paramValue = pair.getValue();
                //if (csrfLegacyFileUpload) {
                if ("".equals(paramValue)) {
                    String sp[] = paramName.split("=", 2);
                    if (sp.length == 1) {
                        formAction.append(String.format("<textarea name=\"%s\">%s</textarea>",
                                new Object[]{ConvertUtil.encodeJsLangQuote(HttpUtil.toHtmlEncode(sp[0])), ""}));
                    } else {
                        formAction.append(String.format("<textarea name=\"%s\">%s</textarea>",
                                new Object[]{ConvertUtil.encodeJsLangQuote(HttpUtil.toHtmlEncode(sp[0])), ConvertUtil.encodeJsLangQuote(HttpUtil.toHtmlEncode(sp[1]))}));
                    }
                } else {
                    formAction.append(String.format("<textarea name=\"%s\">%s</textarea>",
                            new Object[]{ConvertUtil.encodeJsLangQuote(HttpUtil.toHtmlEncode(paramName)), ConvertUtil.encodeJsLangQuote(HttpUtil.toHtmlEncode(paramValue))}));
                }
                //} else {
                //    formAction.append(String.format("<input id=\"fileupload\" type=\"file\" name=\"%s\"/>",
                //            new Object[]{ConvertUtil.encodeJsLangQuote(paramName)})).append(HttpUtil.LINE_TERMINATE);
                //}
            }

            String onClick = "";
            if (!csrfParam.isCsrfAutoSubmit()) {
                onClick = " onClick=\"submitPoC();\"";
                if (isCsrfTimeDelay) {
                    onClick = String.format(" onClick=\"submitPoC(%d);\"", new Object[]{timeOutValue});
                }
                formAction.append(String.format("<input type=\"button\" value=\"Submit\" %s>", onClick)).append(HttpUtil.LINE_TERMINATE);
            }
            formAction.append("</form>").append(HttpUtil.LINE_TERMINATE);
            formAction.append("<!-- end form -->").append(HttpUtil.LINE_TERMINATE);

            final StringBuilder scriptTag = new StringBuilder();
            scriptTag.append("<script type=\"text/javascript\">").append(HttpUtil.LINE_TERMINATE);
            if (isCsrfTimeDelay) {
                scriptTag.append(generateTimeDelayFunction());
            }

            final StringBuilder submitFormAction = new StringBuilder();
            if (csrfMultiForm) {
                String submitFunction = String.format("csrfSubmit%s", new Object[]{localfmt.format(localDateTime)});
                submitFormAction.append(String.format("function %s() {", new Object[]{submitFunction})).append(HttpUtil.LINE_TERMINATE);
                // FileUpload
                if (dataTransfer.length() > 0) {
                    submitFormAction.append(dataTransfer);
                }
                submitFormAction.append("}").append(HttpUtil.LINE_TERMINATE);

                // FileUpload
                if (dataTransfer.length() > 0) {
                    scriptTag.append(submitFormAction);
                    scriptTag.append(generateDataTransferFunction()).append(HttpUtil.LINE_TERMINATE);
                }
                String timeDelay = isCsrfTimeDelay ? "msec" : "";
                scriptTag.append(String.format("function submitPoC(%s) {", new Object[]{timeDelay})).append(HttpUtil.LINE_TERMINATE);;
                if (!csrfLegacyFileUpload) {
                    scriptTag.append("\t").append(submitFunction).append("();").append(HttpUtil.LINE_TERMINATE);
                }
                if (isCsrfTimeDelay) {
                    scriptTag.append("\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
                }
                scriptTag.append("\tdocument.forms[0].submit();").append(HttpUtil.LINE_TERMINATE);
                scriptTag.append("}").append(HttpUtil.LINE_TERMINATE);
            } else {
                // FileUpload
                if (dataTransfer.length() > 0) {
                    scriptTag.append(generateDataTransferFunction()).append(HttpUtil.LINE_TERMINATE);
                }
                String timeDelay = isCsrfTimeDelay ? "msec" : "";
                scriptTag.append(String.format("function submitPoC(%s) {", new Object[]{timeDelay})).append(HttpUtil.LINE_TERMINATE);
                if (dataTransfer.length() > 0) {
                    scriptTag.append(dataTransfer).append(HttpUtil.LINE_TERMINATE);
                }
                if (isCsrfTimeDelay) {
                    scriptTag.append("\tmsleep(msec);").append(HttpUtil.LINE_TERMINATE);
                }
                scriptTag.append("\tdocument.forms[0].submit();").append(HttpUtil.LINE_TERMINATE);
                scriptTag.append("}").append(HttpUtil.LINE_TERMINATE);
            }
            scriptTag.append("</script>").append(HttpUtil.LINE_TERMINATE);

            buff.append("<html>").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("<head><meta http-equiv=\"Content-type\" content=\"text/html; charset='%s'\">", new Object[]{csrfEncoding})).append(HttpUtil.LINE_TERMINATE);
            buff.append(scriptTag);
            buff.append("</head>");
            String autoSubmit = "";
            if (csrfParam.isCsrfAutoSubmit()) {
                autoSubmit = " onload=\"submitPoC();\"";
                if (csrfParam.isCsrfTimeDelay()) {
                    autoSubmit = String.format(" onload=\"submitPoC(%d);\"", new Object[]{timeOutValue});
                }
            }
            buff.append(String.format("<body%s>", new Object[]{autoSubmit})).append(HttpUtil.LINE_TERMINATE);
            buff.append(formAction);
            buff.append("</body></html>").append(HttpUtil.LINE_TERMINATE);
        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return buff.toString();
    }

    private String generateXHRPoC(GenerateCsrfParameter csrfParam) {
        final StringBuilder buff = new StringBuilder();
        try {
            boolean csrfSecure = csrfParam.isUseSecure();
            boolean csrfAutoSubmit = csrfParam.isCsrfAutoSubmit();
            boolean csrfMultiForm = csrfParam.isCsrfMultiForm();
            boolean csrfUrlencode = csrfParam.isCsrfUrlencode();
            boolean csrfMultiPart = csrfParam.isCsrfMultiPart();
            boolean csrfTextPlain = csrfParam.isCsrfTextPlain();
            String csrfEncoding = csrfParam.getCsrfEncoding();
            boolean isCsrfTimeDelay = csrfParam.isCsrfTimeDelay();
            int timeOutValue = csrfParam.getTimeOutValue();
            boolean csrfXHRWithXHeader = csrfParam.isCsrfXHRWithXHeader();

            final HttpRequestWapper wrapRequest = new HttpRequestWapper(this.httpRequestResponse.request());
            String contentType = wrapRequest.getEnctype();
            String csrfEnctype = (contentType == null) ? HttpUtil.URL_ENCODED : contentType;
            // 自動判定
            if (csrfParam.isCsrfAuto()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                    }
                }
                logger.log(Level.FINE, "multipart:{0}", csrfMultiPart);
            } else {
                // select urlencode mode
                if (csrfUrlencode) {
                    csrfEnctype = HttpUtil.URL_ENCODED;
                }
                // select multipart
                if (csrfMultiPart) {
                    csrfEnctype = HttpUtil.MULTIPART_FORM_DATA;
                }
                // select text/plain
                if (csrfTextPlain) {
                    csrfEnctype = "text/plain"; // 固定
                }
            }
            String csrfFormMethod = csrfParam.isCsrfGetMethod() ? "GET" : wrapRequest.method();
            int csrfPort = wrapRequest.httpService().port();
            if (HttpUtil.getDefaultPort(wrapRequest.httpService().secure()) == wrapRequest.httpService().port()) {
                csrfPort = (wrapRequest.httpService().secure() == csrfSecure) ? HttpUtil.getDefaultPort(wrapRequest.httpService().secure()) : HttpUtil.getDefaultPort(csrfSecure);
            }
            final HttpTarget httpService = HttpTarget.getHttpTarget(wrapRequest.httpService().host(), csrfPort, csrfSecure);
            String csrfUrl = wrapRequest.withService(httpService).url();

            // 現在時刻
            LocalDateTime localDateTime = LocalDateTime.now();
            DateTimeFormatter localfmt = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");

            buff.append("<html>").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("<head><meta http-equiv=\"Content-type\" content=\"text/html; charset='%s'\">", new Object[]{csrfEncoding})).append(HttpUtil.LINE_TERMINATE);

            String timeDelay = isCsrfTimeDelay ? "msec" : "";
            buff.append("<script type=\"text/javascript\">").append(HttpUtil.LINE_TERMINATE);
            if (isCsrfTimeDelay) {
                buff.append(generateTimeDelayFunction());
            }
            if (csrfMultiForm) {
                buff.append(generateMultiFormFunction(csrfParam.isCsrfTimeDelay()));
            }

            String submitFunction = "submitPoC";
            if (csrfMultiForm) {
                submitFunction = String.format("submitPoC%s", new Object[]{localfmt.format(localDateTime)});
            }
            buff.append("// begen script").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("function %s(%s) {", new Object[]{submitFunction, timeDelay})).append(HttpUtil.LINE_TERMINATE);
            buff.append("\tvar xhr = new XMLHttpRequest();").append(HttpUtil.LINE_TERMINATE);
            buff.append(String.format("\txhr.open('%s', '%s', true);", new Object[]{csrfFormMethod, ConvertUtil.encodeJsLangQuote(csrfUrl, false)})).append(HttpUtil.LINE_TERMINATE);
            buff.append("\txhr.withCredentials = true;").append(HttpUtil.LINE_TERMINATE);       // Cookieを付与
            if (csrfXHRWithXHeader) {
                List<HttpHeader> headers = wrapRequest.headers();
                for (HttpHeader header : headers) {
                    if (header.name().startsWith("X-")) {
                        String name = header.name();
                        String value = header.value();
                        buff.append(String.format("\txhr.setRequestHeader('%s', '%s');", ConvertUtil.encodeJsLangQuote(name, false), ConvertUtil.encodeJsLangQuote(value, false))).append(HttpUtil.LINE_TERMINATE);
                    }
                }
            }
            buff.append("\tvar req = '';").append(HttpUtil.LINE_TERMINATE);
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                String boundary = HttpUtil.generateBoundary();
                if (csrfMultiPart) {
                    buff.append(String.format("\tvar boundary = '--%s';", new Object[]{boundary})).append(HttpUtil.LINE_TERMINATE);
                    buff.append("\txhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);").append(HttpUtil.LINE_TERMINATE);
                    List<ParsedHttpParameter> parameters = wrapRequest.parameters();
                    logger.log(Level.FINE, "parameters.length:{0}", parameters.size());
                    boolean binaryParam = false;
                    String filename = "";
                    StringBuilder parambuff = new StringBuilder();
                    for (int i = 0; i < parameters.size(); i++) {
                        ParsedHttpParameter param = parameters.get(i);
                        String paramName = param.name();
                        String paramValue = param.value();
                        HttpParameterType paramType = param.type();

                        if (paramType == HttpParameterType.URL || paramType == HttpParameterType.COOKIE) {
                            continue;
                        }

                        if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                            paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                            // ファイルアップロード時エンコードを判定しない
                            if (binaryParam) {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), StandardCharsets.ISO_8859_1);
                            } else {
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                        } else {
                            if (MatchUtil.isUrlencoded(paramName)) {
                                paramName = SmartCodec.toUrlDecode(paramName, csrfEncoding);
                            }
                            if (MatchUtil.isUrlencoded(paramValue)) {
                                paramValue = SmartCodec.toUrlDecode(paramValue, csrfEncoding);
                            }
                        }

                        if (paramType == HttpParameterType.BODY && !binaryParam) {
                            if (parambuff.length() > 0) {
                                parambuff.append(";").append(System.lineSeparator());
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + ").append(HttpUtil.LINE_TERMINATE);
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"\\r\\n\\r\\n' + ", new Object[]{paramName})).append(HttpUtil.LINE_TERMINATE);
                            String encodeHex = TransUtil.toByteHex1Encode(StringUtil.getBytesCharset(paramValue, csrfEncoding), SmartCodec.ENCODE_PATTERN_JS, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                        } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                            binaryParam = true;
                            filename = paramValue;
                        } else {
                            if (parambuff.length() > 0) {
                                parambuff.append(";").append(System.lineSeparator());
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + ").append(HttpUtil.LINE_TERMINATE);
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\\r\\n' + ", new Object[]{paramName, filename})).append(HttpUtil.LINE_TERMINATE);
                            parambuff.append("\t'Content-Type: application/octet-stream\\r\\n\\r\\n'");
                            parambuff.append("+ ").append(System.lineSeparator());
                            String encodeHex = TransUtil.toByteHex1Encode(StringUtil.getBytesRaw(paramValue), SmartCodec.ENCODE_PATTERN_JS, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                            binaryParam = false;
                            filename = "";
                        }
                    }
                    parambuff.append(" + '--' + boundary + '--\\r\\n';").append(HttpUtil.LINE_TERMINATE);
                    buff.append(parambuff.toString());
                    buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
                } else {
                    buff.append("\txhr.setRequestHeader('Content-Type', '").append(HttpUtil.URL_ENCODED).append("');").append(HttpUtil.LINE_TERMINATE);
                    List<ParsedHttpParameter> parameters = wrapRequest.parameters();
                    logger.log(Level.FINE, "parameters.size:{0}", parameters.size());
                    boolean binaryParam = false;
                    boolean first = true;
                    for (int i = 0; i < parameters.size(); i++) {
                        ParsedHttpParameter param = parameters.get(i);
                        String paramName = param.name();
                        String paramValue = param.value();
                        HttpParameterType paramType = param.type();
                        if (paramType == HttpParameterType.URL || paramType == HttpParameterType.COOKIE) {
                            continue;
                        }
                        if (paramType == HttpParameterType.BODY && !binaryParam) {
                            buff.append("\treq += ");
                            if (!first) {
                                buff.append("'&' + ");
                            }
                            if (contentType != null && HttpUtil.isMaltiPart(contentType)) {
                                paramName = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramName), csrfEncoding);
                                paramValue = StringUtil.getStringCharset(StringUtil.getBytesRaw(paramValue), csrfEncoding);
                            }
                            if (contentType != null && HttpUtil.isMaltiPart(contentType) && HttpUtil.isUrlEencoded(csrfEnctype)) {
                                // urlencodeの必要がある場合
                                buff.append(String.format("'%s' + '=' + '%s';",
                                        new Object[]{SmartCodec.toUrlEncode(paramName, csrfEncoding, true),
                                            SmartCodec.toUrlEncode(paramValue, csrfEncoding, true)})).append(HttpUtil.LINE_TERMINATE);
                            } else {
                                // js escape
                                buff.append(String.format("'%s' + '=' + '%s';",
                                        new Object[]{
                                            ConvertUtil.encodeJsLangQuote(paramName),
                                            ConvertUtil.encodeJsLangQuote(paramValue)
                                        })).append(HttpUtil.LINE_TERMINATE);
                            }
                            first = false;
                        } else if (paramType == HttpParameterType.MULTIPART_ATTRIBUTE) {
                            binaryParam = true;
                        }
                    }
                    buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                    buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
                }
            } // csrf textplain
            else {
                buff.append(String.format("\txhr.setRequestHeader('Content-Type', '%s');", csrfEnctype)).append(HttpUtil.LINE_TERMINATE);
                byte[] bodyByte = wrapRequest.body().getBytes();
                String escapeJS = TransUtil.toByteHex1Encode(bodyByte, SmartCodec.ENCODE_PATTERN_JS, false);
                String jsonComment = JsonUtil.isJson(StringUtil.getStringUTF8(bodyByte)) ? "//" : "";
                buff.append(String.format("\treq += '%s%s';", new Object[]{escapeJS, jsonComment})).append(HttpUtil.LINE_TERMINATE);
                buff.append("\tvar blob = new Uint8Array(req.length);").append(HttpUtil.LINE_TERMINATE);
                buff.append("\tfor (var i = 0; i < blob.length; i++)").append(HttpUtil.LINE_TERMINATE);
                buff.append("\t\tblob[i] = req.charCodeAt(i);").append(HttpUtil.LINE_TERMINATE);
                buff.append("\txhr.send(new Blob([blob]));").append(HttpUtil.LINE_TERMINATE);
            }
            buff.append("}").append(HttpUtil.LINE_TERMINATE);
            buff.append("// end script").append(HttpUtil.LINE_TERMINATE);
            buff.append("</script>").append(HttpUtil.LINE_TERMINATE);
            buff.append("</head>").append(HttpUtil.LINE_TERMINATE);
            String autoSubmit = "";
            if (csrfAutoSubmit) {
                autoSubmit = " onload=\"submitPoC();\"";
                if (this.chkTimeDelay.isSelected()) {
                    autoSubmit = String.format(" onload=\"submitPoC(%d);\"", new Object[]{timeOutValue});
                }
            }
            buff.append(String.format("<body%s>", new Object[]{autoSubmit})).append(HttpUtil.LINE_TERMINATE);

            autoSubmit = " onClick=\"submitPoC();\"";
            if (isCsrfTimeDelay) {
                autoSubmit = String.format(" onClick=\"submitPoC(%d)\"", new Object[]{timeOutValue});
            }

            if (csrfMultiForm) {
                buff.append("<!-- begen form -->").append(HttpUtil.LINE_TERMINATE);
                buff.append(String.format("<form action=\"javascript:csrfSubmit%s();\">", new Object[]{localfmt.format(localDateTime)})).append(HttpUtil.LINE_TERMINATE);
                buff.append("</form>").append(HttpUtil.LINE_TERMINATE);
                buff.append("<!-- end form -->").append(HttpUtil.LINE_TERMINATE);
            }

            if (!csrfAutoSubmit) {
                buff.append(String.format("<input type=\"button\" value=\"Submit\" %s>", autoSubmit)).append(HttpUtil.LINE_TERMINATE);
            }

            buff.append("</body></html>").append(HttpUtil.LINE_TERMINATE);

        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return buff.toString();
    }

    public HttpRequestResponse getHttpRequestResponse() {
        return this.httpRequestResponse;
    }

    @Override
    public HttpRequest getRequest() {
        return httpRequestResponse.request();
    }

    @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        final BurpExtension extenderImpl = BurpExtension.getInstance();
        this.httpRequestResponse = httpRequestResponse;
        String guessCharset = StandardCharsets.ISO_8859_1.name();
        final boolean useSecure;
        HttpRequestWapper wrapRequest = new HttpRequestWapper(httpRequestResponse.request());
        if (httpRequestResponse.response() != null) {
            HttpResponseWapper wrapResponse = new HttpResponseWapper(httpRequestResponse.response());
            guessCharset = wrapResponse.getGuessCharset(StandardCharsets.UTF_8.name());
        }
        HttpService service = wrapRequest.httpService();
        if (service != null) {
            useSecure = wrapRequest.httpService().secure();
        } else {
            useSecure = wrapRequest.isSecure();
        }
        this.chkUseHttps.setSelected(useSecure);
        this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
        this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
        encodingItemStateChanged.itemStateChanged(null);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        if (httpRequestResponse == null) {
            return false;
        }
        try {
            UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getEncodingProperty();
            EnumSet<UniversalViewProperty.UniversalView> view = viewProperty.getMessageView();
            this.setLineWrap(viewProperty.isLineWrap());
            if (!view.contains(UniversalViewProperty.UniversalView.GENERATE_POC)) {
                return false;
            }
            // Burp v2023.4.1 以降の謎挙動に対応
            if ((httpRequestResponse.request() != null && httpRequestResponse.request().toByteArray().length() == 0 && httpRequestResponse.response() == null)
                    || (httpRequestResponse.response() != null && httpRequestResponse.response().toByteArray().length() == 0)) {
                return true;
            }
            HttpRequestWapper wrapRequest = new HttpRequestWapper(httpRequestResponse.request());
            if (wrapRequest.httpService() == null) {
                return false;
            }
            String host = wrapRequest.httpService().host();
            if (host == null) {
                return false;
            }
            // MalformedRequestExceptionが発生する場合は無視
            try {
                wrapRequest.method();
            } catch (MalformedRequestException ex) {
                return false;
            }
            if (!("POST".equals(wrapRequest.method()) || "GET".equals(wrapRequest.method()))) {
                return false;
            }
            return (wrapRequest.body().length() > 0) || (wrapRequest.hasQueryParameter());
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            return false;
        }
    }

    @Override
    public String caption() {
        return "Generate PoC";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

    @Override
    public boolean isModified() {
        return false;
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.txtGeneratorPoC.getLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.txtGeneratorPoC.setLineWrap(lineWrap);
    }

    public String getSelectedText() {
        String selectText = this.txtGeneratorPoC.getSelectedText();
        return selectText;
    }

}
