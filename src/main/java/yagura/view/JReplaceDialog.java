package yagura.view;

import extend.view.base.CustomDialog;
import extend.model.base.CustomTableModel;
import yagura.model.MatchReplaceItem;
import extend.util.SwingUtil;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author isayan
 */
public class JReplaceDialog extends CustomDialog {
    private final static Logger logger = Logger.getLogger(JReplaceDialog.class.getName());

    /**
     * Creates new form ReplaceDialog
     *
     * @param parent
     * @param modal
     */
    public JReplaceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMatchReplace = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        btnImportRule = new javax.swing.JButton();
        btnRepAdd = new javax.swing.JButton();
        btnEncAllClear = new javax.swing.JButton();
        btnRepDownArraw = new javax.swing.JButton();
        btnRepUpArraw = new javax.swing.JButton();
        btnEncRemove = new javax.swing.JButton();
        btnRepEdit = new javax.swing.JButton();
        txtListName = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        tableReplace = new javax.swing.JTable();
        lblName = new javax.swing.JLabel();
        btnRepAddAll = new javax.swing.JButton();
        chkScopeOnly = new javax.swing.JCheckBox();
        pnlApply = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Math and Replace Extend");
        setName("dialog"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabMatchReplace.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabMatchReplace.setLayout(new java.awt.BorderLayout());

        btnImportRule.setText("burp import match and replace rule");
        btnImportRule.setEnabled(false);
        btnImportRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportRuleActionPerformed(evt);
            }
        });

        btnRepAdd.setText("Add");
        btnRepAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepAddActionPerformed(evt);
            }
        });

        btnEncAllClear.setText("All Clear");
        btnEncAllClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncAllClearActionPerformed(evt);
            }
        });

        btnRepDownArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_down.png"))); // NOI18N
        btnRepDownArraw.setText("down");
        btnRepDownArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnRepDownArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepDownArrawActionPerformed(evt);
            }
        });

        btnRepUpArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_up.png"))); // NOI18N
        btnRepUpArraw.setText("up");
        btnRepUpArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnRepUpArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepUpArrawActionPerformed(evt);
            }
        });

        btnEncRemove.setText("Remove");
        btnEncRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncRemoveActionPerformed(evt);
            }
        });

        btnRepEdit.setText("Edit");
        btnRepEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepEditActionPerformed(evt);
            }
        });

        tableReplace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "type", "match", "smartMatch", "regex", "icase", "replace", "metachar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReplace.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(tableReplace);
        if (tableReplace.getColumnModel().getColumnCount() > 0) {
            tableReplace.getColumnModel().getColumn(2).setResizable(false);
            tableReplace.getColumnModel().getColumn(7).setResizable(false);
        }

        lblName.setText("Name:");

        btnRepAddAll.setText("Add All");
        btnRepAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepAddAllActionPerformed(evt);
            }
        });

        chkScopeOnly.setText("in-scope only");

        javax.swing.GroupLayout pnlCenterLayout = new javax.swing.GroupLayout(pnlCenter);
        pnlCenter.setLayout(pnlCenterLayout);
        pnlCenterLayout.setHorizontalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtListName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkScopeOnly)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImportRule, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCenterLayout.createSequentialGroup()
                                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRepDownArraw)
                                    .addComponent(btnRepUpArraw, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10))
                            .addComponent(btnEncAllClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRepAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRepAddAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRepEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEncRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlCenterLayout.setVerticalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtListName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName)
                    .addComponent(btnImportRule)
                    .addComponent(chkScopeOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addComponent(btnRepEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEncRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRepUpArraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRepDownArraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEncAllClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRepAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRepAddAll)
                        .addGap(0, 75, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabMatchReplace.add(pnlCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(tabMatchReplace, java.awt.BorderLayout.CENTER);

        pnlApply.setPreferredSize(new java.awt.Dimension(595, 50));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(497, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private final MatchReplaceItemDlg matchReplaceItemDlg = new MatchReplaceItemDlg(null, true);

    private CustomTableModel modelReplace = null;

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.modelReplace = new CustomTableModel(this.tableReplace.getModel());
        this.tableReplace.setModel(this.modelReplace);
        this.btnRepEdit.setEnabled(this.tableReplace.getSelectedRowCount() > 0);
        this.tableReplace.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                int rowCount = tableReplace.getSelectedRowCount();
                btnRepEdit.setEnabled((rowCount > 0));
            }
        });

        // selected
        this.tableReplace.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableReplace.getColumnModel().getColumn(0).setPreferredWidth(20);
        this.tableReplace.getColumnModel().getColumn(0).setMaxWidth(30);

        // type
        this.tableReplace.getColumnModel().getColumn(1).setPreferredWidth(120);
        this.tableReplace.getColumnModel().getColumn(1).setMaxWidth(150);

        // smartMatch
        this.tableReplace.getColumnModel().getColumn(3).setMinWidth(20);
        this.tableReplace.getColumnModel().getColumn(3).setPreferredWidth(30);
        this.tableReplace.getColumnModel().getColumn(3).setMaxWidth(40);
                
        // regex
        this.tableReplace.getColumnModel().getColumn(4).setMinWidth(20);
        this.tableReplace.getColumnModel().getColumn(4).setPreferredWidth(30);
        this.tableReplace.getColumnModel().getColumn(4).setMaxWidth(40);

        // ignore
        this.tableReplace.getColumnModel().getColumn(5).setMinWidth(20);
        this.tableReplace.getColumnModel().getColumn(5).setPreferredWidth(30);
        this.tableReplace.getColumnModel().getColumn(5).setMaxWidth(40);

        // metachar
        this.tableReplace.getColumnModel().getColumn(7).setMinWidth(0);
        this.tableReplace.getColumnModel().getColumn(7).setPreferredWidth(0);
        this.tableReplace.getColumnModel().getColumn(7).setMaxWidth(0);

        this.tableReplace.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

//        SwingUtil.setContainerKeyMap(this);
    }
    protected final java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private void btnRepEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepEditActionPerformed
        this.showMatchReplaceItemDlg(true);
    }//GEN-LAST:event_btnRepEditActionPerformed

    private void btnEncRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncRemoveActionPerformed
        if (SwingUtil.removeItem(this.tableReplace)) {
        }
    }//GEN-LAST:event_btnEncRemoveActionPerformed

    private void btnRepUpArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepUpArrawActionPerformed
        int index = this.tableReplace.getSelectedRow();
        index = this.modelReplace.moveUp(index);
        this.tableReplace.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnRepUpArrawActionPerformed

    private void btnRepDownArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepDownArrawActionPerformed
        int index = this.tableReplace.getSelectedRow();
        index = this.modelReplace.moveDn(index);
        this.tableReplace.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnRepDownArrawActionPerformed

    private void btnRepAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepAddActionPerformed
        this.showMatchReplaceItemDlg(false);
    }//GEN-LAST:event_btnRepAddActionPerformed

    private void btnEncAllClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncAllClearActionPerformed
        if (JOptionPane.showConfirmDialog(this, BUNDLE.getString("view.replace.allclear"), "Match and Replace", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            this.modelReplace.removeAll();
        }
    }//GEN-LAST:event_btnEncAllClearActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if ("".equals(this.getReplaceListName())) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.replace.ok.name.empty"), "Match and Replace", JOptionPane.INFORMATION_MESSAGE);
        } else if (this.replaceNameList.contains(this.getReplaceListName())) {
            if (JOptionPane.showConfirmDialog(this, BUNDLE.getString("view.replace.ok.name.update"), "Match and Replace", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                this.setModalResult(JOptionPane.OK_OPTION);
                this.closeDialog(null);
            }
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    }//GEN-LAST:event_formWindowOpened

    private void btnImportRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportRuleActionPerformed
//        BurpPreferences pref = new BurpPreferences(BurpExtender.getCallbacks().saveConfig());
//        if (JOptionPane.showConfirmDialog(this, BUNDLE.getString("view.replace.burpimport"), "Match and Replace", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
//            this.modelReplace.removeAll();
//            for (MatchReplaceItem item : pref.getMatchReplaceList()) {
//                SwingUtil.addOrUpdateItem(this.tableReplace, MatchReplaceItem.toObjects(item), false);
//            }
//        }
    }//GEN-LAST:event_btnImportRuleActionPerformed

    private void btnRepAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepAddAllActionPerformed
        this.showMatchReplaceAllItemDlg();
    }//GEN-LAST:event_btnRepAddAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JReplaceDialog dialog = new JReplaceDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEncAllClear;
    private javax.swing.JButton btnEncRemove;
    private javax.swing.JButton btnImportRule;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRepAdd;
    private javax.swing.JButton btnRepAddAll;
    private javax.swing.JButton btnRepDownArraw;
    private javax.swing.JButton btnRepEdit;
    private javax.swing.JButton btnRepUpArraw;
    private javax.swing.JCheckBox chkScopeOnly;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel tabMatchReplace;
    private javax.swing.JTable tableReplace;
    private javax.swing.JTextField txtListName;
    // End of variables declaration//GEN-END:variables

    public String getReplaceListName() {
        return this.txtListName.getText().trim();
    }
    private String beforeListName = "";

    public void setReplaceName(String name) {
        this.beforeListName = name;
        this.txtListName.setText(name);
    }

    public void setInScopeOnly(boolean scopeOnly) {
        this.chkScopeOnly.setSelected(scopeOnly);
    }

    public boolean isInScopeOnly() {
        return this.chkScopeOnly.isSelected();
    }

    private List<String> replaceNameList = new ArrayList<String>();

    protected void setReplaceNameList(List<String> replaceNameList) {
        this.replaceNameList = replaceNameList;
    }

    public void setMathReplaceList(List<MatchReplaceItem> list) {
        if (list == null) {
            // 新規作成
            this.txtListName.setText("");
            this.modelReplace.removeAll();
        } else {
            // 編集
            this.modelReplace.removeAll();
            Object editRows[] = new Object[0];
            for (int i = 0; i < list.size(); i++) {
                MatchReplaceItem matchReplaceBean = list.get(i);
                editRows = MatchReplaceItem.toObjects(matchReplaceBean);
                this.modelReplace.addRow(editRows);
            }
        }
    }

    public List<MatchReplaceItem> getMathReplaceList() {
        javax.swing.JTable srcTable = this.tableReplace;
        List<MatchReplaceItem> list = new ArrayList<MatchReplaceItem>();
        for (int i = 0; i < srcTable.getRowCount(); i++) {
            Object editRows[] = this.modelReplace.getRows(i);
            list.add(MatchReplaceItem.fromObjects(editRows));
        }
        return list;
    }

    private MatchReplaceItem getEditItem() {
        MatchReplaceItem item = new MatchReplaceItem();
        Object editRows[] = SwingUtil.editItem(this.tableReplace);
        if (editRows != null) {
            item = MatchReplaceItem.fromObjects(editRows);
        }
        return item;
    }

    private void setEditItem(MatchReplaceItem item, boolean update) {
        Object[] rows = MatchReplaceItem.toObjects(item);
        SwingUtil.addOrUpdateItem(this.tableReplace, rows, update);
    }

    @SuppressWarnings("unchecked")
    private void showMatchReplaceItemDlg(boolean editMode) {
        try {
            this.matchReplaceItemDlg.setLocationRelativeTo(this);
            if (editMode) {
                this.matchReplaceItemDlg.setItem(getEditItem());
            } else {
                MatchReplaceItem item = new MatchReplaceItem();
                this.matchReplaceItemDlg.setItem(item);
            }
            this.matchReplaceItemDlg.setVisible(true);
            if (this.matchReplaceItemDlg.getModalResult() == JOptionPane.OK_OPTION) {
                MatchReplaceItem item = this.matchReplaceItemDlg.getItem();
                this.setEditItem(item, editMode);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private final MultiItemDlg multiItemDlg = new MultiItemDlg(null, true);

    private void showMatchReplaceAllItemDlg() {
        try {
            this.multiItemDlg.setLocationRelativeTo(this);
            this.multiItemDlg.setMultiLine(new String[]{""});
            this.multiItemDlg.setVisible(true);
            if (this.multiItemDlg.getModalResult() == JOptionPane.OK_OPTION) {
                String[] lines = this.multiItemDlg.getMultiLine();
                for (String line : lines) {
                    MatchReplaceItem item = new MatchReplaceItem();
                    item.setType(MatchReplaceItem.TYPE_REQUEST_HEADER);
                    item.setSelected(true);
                    item.setMatch("");
                    item.setIgnoreCase(false);
                    item.setRegexp(false);
                    item.setReplace(line);
                    item.setMetaChar(false);
                    this.setEditItem(item, false);
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}
