package yagura.view;

import burp.BurpExtension;
import extension.burp.BurpConfig;
import extension.burp.FilterHTTPProperty;
import extension.burp.FilterProperty;
import extension.view.base.JavaSyntaxDocument;
import extension.view.layout.VerticalFlowLayout;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author isayan
 */
public class FilterHttpPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterHttpPanel
     */
    public FilterHttpPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbetFilter = new javax.swing.JTabbedPane();
        pnlSettings = new javax.swing.JPanel();
        pnlColum = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        pnlHttp = new javax.swing.JPanel();
        pnlHttpExtension = new javax.swing.JPanel();
        txtHide = new javax.swing.JTextField();
        chkHide = new javax.swing.JCheckBox();
        chkShowOnly = new javax.swing.JCheckBox();
        txtShowOnly = new javax.swing.JTextField();
        pnlHttpFilterSearchItem = new javax.swing.JPanel();
        txtMethod = new javax.swing.JTextField();
        chkReqRegExp = new javax.swing.JCheckBox();
        chkReqIgnoreCase = new javax.swing.JCheckBox();
        txtRequest = new javax.swing.JTextField();
        lblMethod = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        lblRequest = new javax.swing.JLabel();
        lblPath = new javax.swing.JLabel();
        txtResponse = new javax.swing.JTextField();
        lblResponse = new javax.swing.JLabel();
        chkResRegExp = new javax.swing.JCheckBox();
        chkResIgnoreCase = new javax.swing.JCheckBox();
        pnlHeader = new javax.swing.JPanel();
        pnlHttpFilterByRequest = new javax.swing.JPanel();
        chkShowOnlyinscopeItem = new javax.swing.JCheckBox();
        chkHideItemsWithoutResponses = new javax.swing.JCheckBox();
        chkShowOnlyParameterizedRequests = new javax.swing.JCheckBox();
        chkShowOnlyEditedMessage = new javax.swing.JCheckBox();
        pnlHttpStatus = new javax.swing.JPanel();
        chkStat2xx = new javax.swing.JCheckBox();
        chkStat3xx = new javax.swing.JCheckBox();
        chkStat4xx = new javax.swing.JCheckBox();
        chkStat5xx = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        pnlSettings.setLayout(new java.awt.BorderLayout());

        pnlColum.setLayout(new java.awt.BorderLayout());
        pnlSettings.add(pnlColum, java.awt.BorderLayout.EAST);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        pnlHttp.setMinimumSize(new java.awt.Dimension(217, 300));
        pnlHttp.setName(""); // NOI18N
        pnlHttp.setPreferredSize(new java.awt.Dimension(500, 300));
        pnlHttp.setLayout(new javax.swing.BoxLayout(pnlHttp, javax.swing.BoxLayout.PAGE_AXIS));

        pnlHttpExtension.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filter by extension")));

        chkHide.setText("hide:");
        chkHide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkHideStateChanged(evt);
            }
        });

        chkShowOnly.setText("show only:");
        chkShowOnly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkShowOnlyStateChanged(evt);
            }
        });
        chkShowOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyActionPerformed(evt);
            }
        });

        txtShowOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowOnlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHttpExtensionLayout = new javax.swing.GroupLayout(pnlHttpExtension);
        pnlHttpExtension.setLayout(pnlHttpExtensionLayout);
        pnlHttpExtensionLayout.setHorizontalGroup(
            pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHttpExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkShowOnly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkHide, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtShowOnly)
                    .addComponent(txtHide, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(454, Short.MAX_VALUE))
        );
        pnlHttpExtensionLayout.setVerticalGroup(
            pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHttpExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkShowOnly)
                    .addComponent(txtShowOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHttpExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkHide))
                .addContainerGap())
        );

        pnlHttp.add(pnlHttpExtension);

        pnlHttpFilterSearchItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by Search Item"));
        pnlHttpFilterSearchItem.setMinimumSize(new java.awt.Dimension(663, 400));

        chkReqRegExp.setSelected(true);
        chkReqRegExp.setText("RegExp");
        chkReqRegExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReqRegExpActionPerformed(evt);
            }
        });

        chkReqIgnoreCase.setText("IgnoreCase");
        chkReqIgnoreCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReqIgnoreCaseActionPerformed(evt);
            }
        });

        lblMethod.setText("Method:");

        lblRequest.setText("Request:");

        lblPath.setText("Path:");

        lblResponse.setText("Response:");

        chkResRegExp.setSelected(true);
        chkResRegExp.setText("RegExp");
        chkResRegExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkResRegExpActionPerformed(evt);
            }
        });

        chkResIgnoreCase.setText("IgnoreCase");

        javax.swing.GroupLayout pnlHttpFilterSearchItemLayout = new javax.swing.GroupLayout(pnlHttpFilterSearchItem);
        pnlHttpFilterSearchItem.setLayout(pnlHttpFilterSearchItemLayout);
        pnlHttpFilterSearchItemLayout.setHorizontalGroup(
            pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHttpFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMethod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblResponse, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(lblRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlHttpFilterSearchItemLayout.createSequentialGroup()
                        .addComponent(txtResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkResRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkResIgnoreCase))
                    .addGroup(pnlHttpFilterSearchItemLayout.createSequentialGroup()
                        .addComponent(txtRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReqRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReqIgnoreCase)))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        pnlHttpFilterSearchItemLayout.setVerticalGroup(
            pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHttpFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMethod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPath)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRequest)
                    .addComponent(txtRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkReqRegExp)
                    .addComponent(chkReqIgnoreCase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkResRegExp)
                        .addComponent(chkResIgnoreCase))
                    .addGroup(pnlHttpFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblResponse)))
                .addContainerGap())
        );

        pnlHttp.add(pnlHttpFilterSearchItem);

        pnlCenter.add(pnlHttp, java.awt.BorderLayout.CENTER);

        pnlHeader.setLayout(new java.awt.BorderLayout());

        pnlHttpFilterByRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by request type"));
        pnlHttpFilterByRequest.setLayout(new javax.swing.BoxLayout(pnlHttpFilterByRequest, javax.swing.BoxLayout.Y_AXIS));

        chkShowOnlyinscopeItem.setText("Show only in-scope items");
        pnlHttpFilterByRequest.add(chkShowOnlyinscopeItem);

        chkHideItemsWithoutResponses.setText("Hide items without responses");
        pnlHttpFilterByRequest.add(chkHideItemsWithoutResponses);

        chkShowOnlyParameterizedRequests.setText("Show only parameterized requests");
        chkShowOnlyParameterizedRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyParameterizedRequestsActionPerformed(evt);
            }
        });
        pnlHttpFilterByRequest.add(chkShowOnlyParameterizedRequests);

        chkShowOnlyEditedMessage.setText("Show only edited message");
        chkShowOnlyEditedMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyEditedMessageActionPerformed(evt);
            }
        });
        pnlHttpFilterByRequest.add(chkShowOnlyEditedMessage);

        pnlHeader.add(pnlHttpFilterByRequest, java.awt.BorderLayout.CENTER);

        pnlHttpStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status Filter"));
        pnlHttpStatus.setMaximumSize(new java.awt.Dimension(133, 110));
        pnlHttpStatus.setMinimumSize(new java.awt.Dimension(133, 110));
        pnlHttpStatus.setPreferredSize(new java.awt.Dimension(200, 130));
        pnlHttpStatus.setRequestFocusEnabled(false);
        pnlHttpStatus.setLayout(new javax.swing.BoxLayout(pnlHttpStatus, javax.swing.BoxLayout.Y_AXIS));

        chkStat2xx.setText("2xx [success]");
        pnlHttpStatus.add(chkStat2xx);

        chkStat3xx.setText("3xx [redirection]");
        pnlHttpStatus.add(chkStat3xx);

        chkStat4xx.setText("4xx [request error]");
        pnlHttpStatus.add(chkStat4xx);

        chkStat5xx.setText("5xx [server error]");
        chkStat5xx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStat5xxActionPerformed(evt);
            }
        });
        pnlHttpStatus.add(chkStat5xx);

        pnlHeader.add(pnlHttpStatus, java.awt.BorderLayout.EAST);

        pnlCenter.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlSettings.add(pnlCenter, java.awt.BorderLayout.CENTER);

        tabbetFilter.addTab("Settings", pnlSettings);

        add(tabbetFilter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void chkHideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkHideStateChanged
        this.chkShowOnly.setEnabled(!this.chkHide.isSelected());
    }//GEN-LAST:event_chkHideStateChanged

    private void chkShowOnlyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkShowOnlyStateChanged
        this.chkHide.setEnabled(!this.chkShowOnly.isSelected());
    }//GEN-LAST:event_chkShowOnlyStateChanged

    private void chkShowOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyActionPerformed

    private void txtShowOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowOnlyActionPerformed

    }//GEN-LAST:event_txtShowOnlyActionPerformed

    private void chkReqRegExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReqRegExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReqRegExpActionPerformed

    private void chkReqIgnoreCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReqIgnoreCaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReqIgnoreCaseActionPerformed

    private void chkResRegExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkResRegExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkResRegExpActionPerformed

    private void chkShowOnlyParameterizedRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyParameterizedRequestsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyParameterizedRequestsActionPerformed

    private void chkShowOnlyEditedMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyEditedMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyEditedMessageActionPerformed

    private void chkStat5xxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStat5xxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkStat5xxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkHide;
    private javax.swing.JCheckBox chkHideItemsWithoutResponses;
    private javax.swing.JCheckBox chkReqIgnoreCase;
    private javax.swing.JCheckBox chkReqRegExp;
    private javax.swing.JCheckBox chkResIgnoreCase;
    private javax.swing.JCheckBox chkResRegExp;
    private javax.swing.JCheckBox chkShowOnly;
    private javax.swing.JCheckBox chkShowOnlyEditedMessage;
    private javax.swing.JCheckBox chkShowOnlyParameterizedRequests;
    private javax.swing.JCheckBox chkShowOnlyinscopeItem;
    private javax.swing.JCheckBox chkStat2xx;
    private javax.swing.JCheckBox chkStat3xx;
    private javax.swing.JCheckBox chkStat4xx;
    private javax.swing.JCheckBox chkStat5xx;
    private javax.swing.JLabel lblMethod;
    private javax.swing.JLabel lblPath;
    private javax.swing.JLabel lblRequest;
    private javax.swing.JLabel lblResponse;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlColum;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlHttp;
    private javax.swing.JPanel pnlHttpExtension;
    private javax.swing.JPanel pnlHttpFilterByRequest;
    private javax.swing.JPanel pnlHttpFilterSearchItem;
    private javax.swing.JPanel pnlHttpStatus;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JTabbedPane tabbetFilter;
    private javax.swing.JTextField txtHide;
    private javax.swing.JTextField txtMethod;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtRequest;
    private javax.swing.JTextField txtResponse;
    private javax.swing.JTextField txtShowOnly;
    // End of variables declaration//GEN-END:variables

    private final EditorKit javaStyleEditorKit = new StyledEditorKit() {
        @Override
        public Document createDefaultDocument() {
            return new JavaSyntaxDocument();
        }
    };

    private FilterAnnotationPanel pnlAnnotation = new FilterAnnotationPanel();

    private javax.swing.JPanel pnlBambda = new javax.swing.JPanel();
    private javax.swing.JScrollPane scrollBabda = new javax.swing.JScrollPane();
    private javax.swing.JEditorPane txtBambda = new javax.swing.JEditorPane();

    private void customizeComponents() {
        this.scrollBabda.setViewportView(this.txtBambda);

        this.txtBambda.setEditorKitForContentType("text/java", this.javaStyleEditorKit);
        this.txtBambda.setContentType("text/java");

        this.pnlBambda.setLayout(new java.awt.BorderLayout());
        this.scrollBabda.setViewportView(this.txtBambda);
        this.pnlBambda.add(scrollBabda, java.awt.BorderLayout.CENTER);
        this.tabbetFilter.addTab("Bambda", this.pnlBambda);

        this.pnlHttpFilterByRequest.setLayout(new VerticalFlowLayout());
        this.pnlHttpStatus.setLayout(new VerticalFlowLayout());
        this.pnlColum.add(this.pnlAnnotation, java.awt.BorderLayout.CENTER);

    }

    public void addTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.addChangeListener(listener);
    }

    public void removeTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.removeChangeListener(listener);
    }

    public boolean isFilterModeSettings() {
        return this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Settings");
    }

    public void ConverToBambda(FilterProperty filter) {
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(filter.build());
    }

    public void ImportBambda(FilterProperty.FilterCategory filterCategory) {
        String bambda = BurpConfig.getBambda(BurpExtension.api(), filterCategory);
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(bambda);
    }

    public void setBambaMode(boolean bamba) {
        this.tabbetFilter.remove(this.pnlBambda);
        if (bamba) {
            this.tabbetFilter.addTab("Bambda", this.pnlBambda);
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        }
    }

    public void setProperty(FilterHTTPProperty filterProp) {
        if (filterProp.getFilterMode() == FilterProperty.FilterMode.SETTING) {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        } else {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        }
        this.chkShowOnlyinscopeItem.setSelected(filterProp.isShowOnlyScopeItems());
        this.chkHideItemsWithoutResponses.setSelected(filterProp.isHideItemsWithoutResponses());
        this.chkShowOnlyParameterizedRequests.setSelected(filterProp.isShowOnlyParameterizedRequests());
        this.chkShowOnlyEditedMessage.setSelected(filterProp.isShowOnlyEditedMessage());

        this.chkShowOnly.setSelected(filterProp.getShowOnly());
        this.txtShowOnly.setText(filterProp.getShowOnlyExtension());
        this.chkHide.setSelected(filterProp.getHide());
        this.txtHide.setText(filterProp.getHideExtension());

        this.chkStat2xx.getModel().setSelected(filterProp.getStat2xx());
        this.chkStat3xx.getModel().setSelected(filterProp.getStat3xx());
        this.chkStat4xx.getModel().setSelected(filterProp.getStat4xx());
        this.chkStat5xx.getModel().setSelected(filterProp.getStat5xx());

        this.txtMethod.setText(filterProp.getMethod());
        this.txtPath.setText(filterProp.getPath());
        this.txtRequest.setText(filterProp.getRequest());
        this.chkReqRegExp.setSelected(filterProp.isRequestRegex());
        this.chkReqIgnoreCase.setSelected(filterProp.isRequestIgnoreCase());
        this.txtResponse.setText(filterProp.getResponse());
        this.chkResRegExp.setSelected(filterProp.isResponseRegex());
        this.chkResIgnoreCase.setSelected(filterProp.isResponseIgnoreCase());
        this.txtBambda.setText(filterProp.getBambdaQuery());

        this.pnlAnnotation.setAnnotationProperty(filterProp);
    }

    public FilterProperty getProperty() {
        FilterProperty filterProp = new FilterProperty();
        filterProp.setFilterCategory(FilterProperty.FilterCategory.HTTP);
        if (this.isFilterModeSettings()) {
            filterProp.setFilterMode(FilterProperty.FilterMode.SETTING);
        } else {
            filterProp.setFilterMode(FilterProperty.FilterMode.BAMBDA);
        }
        filterProp.setShowOnlyScopeItems(this.chkShowOnlyinscopeItem.isSelected());
        filterProp.setHideItemsWithoutResponses(this.chkHideItemsWithoutResponses.isSelected());
        filterProp.setShowOnlyParameterizedRequests(this.chkShowOnlyParameterizedRequests.isSelected());
        filterProp.setShowOnlyEditedMessage(this.chkShowOnlyEditedMessage.isSelected());

        filterProp.setShowOnly(this.chkShowOnly.isSelected());
        filterProp.setShowOnlyExtension(this.txtShowOnly.getText());
        filterProp.setHide(this.chkHide.isSelected());
        filterProp.setHideExtension(this.txtHide.getText());

        filterProp.setStat2xx(this.chkStat2xx.getModel().isSelected());
        filterProp.setStat3xx(this.chkStat3xx.getModel().isSelected());
        filterProp.setStat4xx(this.chkStat4xx.getModel().isSelected());
        filterProp.setStat5xx(this.chkStat5xx.getModel().isSelected());

        this.pnlAnnotation.getAnnotationProperty(filterProp);

        filterProp.setMethod(this.txtMethod.getText());
        filterProp.setPath(this.txtPath.getText());
        filterProp.setRequest(this.txtRequest.getText());
        filterProp.setRequestRegex(this.chkReqRegExp.isSelected());
        filterProp.setRequestIgnoreCase(this.chkReqIgnoreCase.isSelected());
        filterProp.setResponse(this.txtResponse.getText());
        filterProp.setResponseRegex(this.chkResRegExp.isSelected());
        filterProp.setResponseIgnoreCase(this.chkResIgnoreCase.isSelected());
        filterProp.setBambda(this.txtBambda.getText());
        return filterProp;
    }

}
