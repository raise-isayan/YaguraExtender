package yagura.view;

import com.nimbusds.jose.Header;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.util.Base64URL;
import com.nimbusds.jwt.JWTClaimsSet;
import extension.helpers.json.JsonUtil;
import java.awt.SystemColor;
import java.text.ParseException;
import passive.JWSToken;

/**
 *
 * @author isayan
 */
public class JWSViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form JWEView
     */
    public JWSViewPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJWT = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        pnlPayload = new javax.swing.JPanel();
        lblPayload = new javax.swing.JLabel();
        pnlSignature = new javax.swing.JPanel();
        lblSignature = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlJWT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlJWT.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlJWT.setPreferredSize(new java.awt.Dimension(100, 454));
        pnlJWT.setLayout(new java.awt.BorderLayout());

        pnlHeader.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlHeader.setPreferredSize(new java.awt.Dimension(100, 120));
        pnlHeader.setLayout(new java.awt.BorderLayout());

        lblHeader.setText("Header");
        pnlHeader.add(lblHeader, java.awt.BorderLayout.NORTH);

        pnlJWT.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlPayload.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlPayload.setPreferredSize(new java.awt.Dimension(100, 300));
        pnlPayload.setLayout(new java.awt.BorderLayout());

        lblPayload.setText("Payload");
        pnlPayload.add(lblPayload, java.awt.BorderLayout.NORTH);

        pnlJWT.add(pnlPayload, java.awt.BorderLayout.CENTER);

        pnlSignature.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlSignature.setPreferredSize(new java.awt.Dimension(100, 50));
        pnlSignature.setLayout(new java.awt.BorderLayout());

        lblSignature.setText("Signature");
        pnlSignature.add(lblSignature, java.awt.BorderLayout.NORTH);

        pnlJWT.add(pnlSignature, java.awt.BorderLayout.SOUTH);

        add(pnlJWT, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

//    final PropertyChangeListener propertyListener = new PropertyChangeListener() {
//        @Override
//        public void propertyChange(PropertyChangeEvent evt) {
//            ThemeUI.applyStyleTheme(txtHeaderJSON);
//            ThemeUI.applyStyleTheme(txtPayloadJSON);
//            ThemeUI.applyStyleTheme(txtSignatureSign);
//        }
//    };

//    private org.fife.ui.rtextarea.RTextScrollPane scrollHeaderJSON;
//    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtHeaderJSON;
//
//    private org.fife.ui.rtextarea.RTextScrollPane scrollPayloadJSON;
//    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtPayloadJSON;
//
//    private org.fife.ui.rtextarea.RTextScrollPane scrollSignatureSign;
//    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtSignatureSign;

    private javax.swing.JScrollPane scrollHeaderJSON;
    private javax.swing.JTextArea txtHeaderJSON;

    private javax.swing.JScrollPane scrollPayloadJSON;
    private javax.swing.JTextArea txtPayloadJSON;

    private javax.swing.JScrollPane scrollSignatureSign;
    private javax.swing.JTextArea txtSignatureSign;

    private void customizeComponents() {
        /**
         * * UI design start **
         */

        /* Header */
        //this.txtHeaderJSON = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        //this.scrollHeaderJSON = new org.fife.ui.rtextarea.RTextScrollPane(this.txtHeaderJSON);
        this.txtHeaderJSON = new javax.swing.JTextArea();
        this.scrollHeaderJSON = new javax.swing.JScrollPane(this.txtHeaderJSON);
        this.txtHeaderJSON.setWrapStyleWord(false);
//        this.txtHeaderJSON.setCodeFoldingEnabled(true);
//        this.txtHeaderJSON.setClearWhitespaceLinesEnabled(true);
//        this.txtHeaderJSON.setHighlightCurrentLine(false);
//        this.txtHeaderJSON.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtHeaderJSON.setBackground(SystemColor.text);
        this.txtHeaderJSON.setEditable(false);
//        this.txtHeaderJSON.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);

//        scrollURaw.setViewportView(txtURaw);
//        this.scrollHeaderJSON.setLineNumbersEnabled(false);
        this.pnlHeader.add(this.scrollHeaderJSON, java.awt.BorderLayout.CENTER);

        /* Payload */
        //this.txtPayloadJSON = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        //this.scrollPayloadJSON = new org.fife.ui.rtextarea.RTextScrollPane(this.txtPayloadJSON);
        this.txtPayloadJSON = new javax.swing.JTextArea();
        this.scrollPayloadJSON = new javax.swing.JScrollPane(this.txtPayloadJSON);
        this.txtPayloadJSON.setWrapStyleWord(false);
//        this.txtPayloadJSON.setCodeFoldingEnabled(true);
//        this.txtPayloadJSON.setClearWhitespaceLinesEnabled(true);
//        this.txtPayloadJSON.setHighlightCurrentLine(false);
//        this.txtPayloadJSON.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtPayloadJSON.setBackground(SystemColor.text);
        this.txtPayloadJSON.setEditable(false);
//        this.txtPayloadJSON.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);

//        scrollURaw.setViewportView(txtURaw);

        this.pnlPayload.add(this.scrollPayloadJSON, java.awt.BorderLayout.CENTER);

        /* Signature */
        //this.txtSignatureSign = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        //this.scrollSignatureSign = new org.fife.ui.rtextarea.RTextScrollPane(this.txtSignatureSign);
        this.txtSignatureSign = new javax.swing.JTextArea();
        this.scrollSignatureSign = new javax.swing.JScrollPane(this.txtSignatureSign);
        this.txtSignatureSign.setWrapStyleWord(false);

//        this.txtSignatureSign.setCodeFoldingEnabled(true);
//        this.txtSignatureSign.setClearWhitespaceLinesEnabled(true);
//        this.txtSignatureSign.setHighlightCurrentLine(false);
//        this.txtSignatureSign.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtSignatureSign.setBackground(SystemColor.text);
        this.txtSignatureSign.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

//        this.scrollSignatureSign.setLineNumbersEnabled(false);

        this.pnlSignature.add(this.scrollSignatureSign, java.awt.BorderLayout.CENTER);

//        this.propertyListener.propertyChange(null);
//        ThemeUI.addPropertyChangeListener(propertyListener);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPayload;
    private javax.swing.JLabel lblSignature;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlJWT;
    private javax.swing.JPanel pnlPayload;
    private javax.swing.JPanel pnlSignature;
    // End of variables declaration//GEN-END:variables

    private boolean format = true;

    /**
     * @return the format
     */
    public boolean isFormat() {
        return this.format;
    }

    /**
     * @param format the format to set
     */
    public void setFormat(boolean format) {
        this.format = format;
    }

    public JWSHeader getHeader() throws ParseException {
        return JWSHeader.parse(this.txtHeaderJSON.getText());
    }

    public void setHeader(String value) {
        this.txtHeaderJSON.setText(value);
    }

    public void setHeaderJSON(String value, boolean pretty) {
        this.txtHeaderJSON.setText(JsonUtil.prettyJson(value, true));
    }

    public Payload getPayload() throws ParseException {
        return JWTClaimsSet.parse(this.txtPayloadJSON.getText()).toPayload();
    }

    public void setPayload(String value) {
        this.txtPayloadJSON.setText(value);
    }
    
    public void setPayloadJSON(String value, boolean pretty) {
        this.txtPayloadJSON.setText(JsonUtil.prettyJson(value, true));
    }

    public Base64URL getSignature() throws ParseException {
        return Base64URL.from(this.txtSignatureSign.getText());
    }

    public void setSignature(String value) {
        this.txtSignatureSign.setText(value);
    }

    public void clearJWS() {
        this.txtHeaderJSON.setText("");
        this.txtPayloadJSON.setText("");
        this.txtSignatureSign.setText("");
    }

    public void setJWS(JWSToken token) {
        this.setJWS(token, this.format);
    }

    public void setJWS(JWSToken token, boolean format) {
        this.txtHeaderJSON.setText(token.getHeaderJSON(format));
        this.txtPayloadJSON.setText(token.getPayloadJSON(format));
        this.txtSignatureSign.setText(token.getSignature());
    }

    public void setLineWrap(boolean lineWrap) {
        this.txtHeaderJSON.setLineWrap(lineWrap);
        this.txtPayloadJSON.setLineWrap(lineWrap);
        this.txtSignatureSign.setLineWrap(lineWrap);
    }

}
