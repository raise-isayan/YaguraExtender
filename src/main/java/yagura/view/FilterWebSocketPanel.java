package yagura.view;

import burp.BurpExtension;
import extension.burp.BurpConfig;
import extension.burp.FilterProperty;
import extension.burp.FilterWebSocketProperty;
import extension.view.base.JavaSyntaxDocument;
import extension.view.layout.VerticalFlowLayout;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author isayan
 */
public class FilterWebSocketPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public FilterWebSocketPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbetFilter = new javax.swing.JTabbedPane();
        pnlSettings = new javax.swing.JPanel();
        pnlColum = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        pnlFilterByRequest = new javax.swing.JPanel();
        chkShowOnlyinscopeItem = new javax.swing.JCheckBox();
        chkHideOutgoingMessage = new javax.swing.JCheckBox();
        chkHideIncomingMessage = new javax.swing.JCheckBox();
        pnlWebsocketFilterSearchItem = new javax.swing.JPanel();
        chkMsgRegExp = new javax.swing.JCheckBox();
        chkMsgIgnoreCase = new javax.swing.JCheckBox();
        txtMessage = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlSettings.setLayout(new java.awt.BorderLayout());

        pnlColum.setLayout(new java.awt.BorderLayout());
        pnlSettings.add(pnlColum, java.awt.BorderLayout.EAST);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        pnlFilterByRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by request type"));
        pnlFilterByRequest.setLayout(new javax.swing.BoxLayout(pnlFilterByRequest, javax.swing.BoxLayout.Y_AXIS));

        chkShowOnlyinscopeItem.setText("Show only in-scope items");
        pnlFilterByRequest.add(chkShowOnlyinscopeItem);

        chkHideOutgoingMessage.setText("Hide outgoing message");
        pnlFilterByRequest.add(chkHideOutgoingMessage);

        chkHideIncomingMessage.setText("Hide incoming message");
        pnlFilterByRequest.add(chkHideIncomingMessage);

        pnlCenter.add(pnlFilterByRequest, java.awt.BorderLayout.NORTH);

        pnlWebsocketFilterSearchItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by Search Item"));
        pnlWebsocketFilterSearchItem.setMinimumSize(new java.awt.Dimension(663, 400));

        chkMsgRegExp.setSelected(true);
        chkMsgRegExp.setText("RegExp");
        chkMsgRegExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMsgRegExpActionPerformed(evt);
            }
        });

        chkMsgIgnoreCase.setText("IgnoreCase");
        chkMsgIgnoreCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMsgIgnoreCaseActionPerformed(evt);
            }
        });

        lblMessage.setText("Message:");

        javax.swing.GroupLayout pnlWebsocketFilterSearchItemLayout = new javax.swing.GroupLayout(pnlWebsocketFilterSearchItem);
        pnlWebsocketFilterSearchItem.setLayout(pnlWebsocketFilterSearchItemLayout);
        pnlWebsocketFilterSearchItemLayout.setHorizontalGroup(
            pnlWebsocketFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWebsocketFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMsgRegExp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMsgIgnoreCase)
                .addContainerGap(147, Short.MAX_VALUE))
        );
        pnlWebsocketFilterSearchItemLayout.setVerticalGroup(
            pnlWebsocketFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWebsocketFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlWebsocketFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMessage)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkMsgRegExp)
                    .addComponent(chkMsgIgnoreCase))
                .addGap(395, 395, 395))
        );

        pnlCenter.add(pnlWebsocketFilterSearchItem, java.awt.BorderLayout.CENTER);

        pnlSettings.add(pnlCenter, java.awt.BorderLayout.CENTER);

        tabbetFilter.addTab("Settings", pnlSettings);

        add(tabbetFilter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void chkMsgIgnoreCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMsgIgnoreCaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMsgIgnoreCaseActionPerformed

    private void chkMsgRegExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMsgRegExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMsgRegExpActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkHideIncomingMessage;
    private javax.swing.JCheckBox chkHideOutgoingMessage;
    private javax.swing.JCheckBox chkMsgIgnoreCase;
    private javax.swing.JCheckBox chkMsgRegExp;
    private javax.swing.JCheckBox chkShowOnlyinscopeItem;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlColum;
    private javax.swing.JPanel pnlFilterByRequest;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JPanel pnlWebsocketFilterSearchItem;
    private javax.swing.JTabbedPane tabbetFilter;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    private final EditorKit javaStyleEditorKit = new StyledEditorKit() {
        @Override
        public Document createDefaultDocument() {
            return new JavaSyntaxDocument();
        }
    };

    private FilterAnnotationPanel pnlAnnotation = new FilterAnnotationPanel();

    private javax.swing.JPanel pnlBambda = new javax.swing.JPanel();
    private javax.swing.JScrollPane scrollBabda = new javax.swing.JScrollPane();
    private javax.swing.JEditorPane txtBambda = new javax.swing.JEditorPane();

    private void customizeComponents() {
        this.scrollBabda.setViewportView(this.txtBambda);

        this.txtBambda.setEditorKitForContentType("text/java", this.javaStyleEditorKit);
        this.txtBambda.setContentType("text/java");

        this.pnlBambda.setLayout(new java.awt.BorderLayout());
        this.scrollBabda.setViewportView(this.txtBambda);
        this.pnlBambda.add(scrollBabda, java.awt.BorderLayout.CENTER);
        this.tabbetFilter.addTab("Bambda", this.pnlBambda);

        this.pnlFilterByRequest.setLayout(new VerticalFlowLayout());
        this.pnlColum.add(this.pnlAnnotation, java.awt.BorderLayout.CENTER);

    }

    public void addTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.addChangeListener(listener);
    }

    public void removeTableChangeListener(javax.swing.event.ChangeListener listener) {
        this.tabbetFilter.removeChangeListener(listener);
    }

    public boolean isFilterModeSettings() {
        return this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Settings");
    }

    public void ConverToBambda(FilterProperty filter) {
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(filter.build());
    }

    public void ImportBambda(FilterProperty.FilterCategory filterCategory) {
        String bambda = BurpConfig.getBambda(BurpExtension.api(), filterCategory);
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(bambda);
    }

    public void setBambaMode(boolean bamba) {
        this.tabbetFilter.remove(this.pnlBambda);
        if (bamba) {
            this.tabbetFilter.addTab("Bambda", this.pnlBambda);
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        }
    }


    public void setProperty(FilterWebSocketProperty filterProp) {
        if (filterProp.getFilterMode() == FilterProperty.FilterMode.SETTING) {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        } else {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        }
        this.chkShowOnlyinscopeItem.setSelected(filterProp.isShowOnlyScopeItems());
        this.chkHideIncomingMessage.setSelected(filterProp.isHideIncomingMessage());
        this.chkHideOutgoingMessage.setSelected(filterProp.isHideOutgoingMessage());

        this.txtMessage.setText(filterProp.getMessage());
        this.chkMsgRegExp.setSelected(filterProp.isMessageRegex());
        this.chkMsgIgnoreCase.setSelected(filterProp.isMessageIgnoreCase());
        this.txtBambda.setText(filterProp.getBambdaQuery());

        this.pnlAnnotation.setAnnotationProperty(filterProp);
    }

    public FilterProperty getProperty() {
        FilterProperty filterProp = new FilterProperty();
        filterProp.setFilterCategory(FilterProperty.FilterCategory.WEBSOCKET);
        if (this.isFilterModeSettings()) {
            filterProp.setFilterMode(FilterProperty.FilterMode.SETTING);
        } else {
            filterProp.setFilterMode(FilterProperty.FilterMode.BAMBDA);
        }
        filterProp.setShowOnlyScopeItems(this.chkShowOnlyinscopeItem.isSelected());
        filterProp.setHideIncomingMessage(this.chkHideIncomingMessage.isSelected());
        filterProp.setHideOutgoingMessage(this.chkHideOutgoingMessage.isSelected());

        this.pnlAnnotation.getAnnotationProperty(filterProp);

        filterProp.setMessage(this.txtMessage.getText());
        filterProp.setMessageRegex(this.chkMsgRegExp.isSelected());
        filterProp.setMessageIgnoreCase(this.chkMsgIgnoreCase.isSelected());
        filterProp.setBambda(this.txtBambda.getText());
        return filterProp;
    }

}
