package yagura.view;

import extension.helpers.CertUtil;
import extend.util.external.BoncyUtil;
import extension.burp.BurpConfig;
import extension.burp.IBurpTab;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;

import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import yagura.Version;

/**
 *
 * @author isayan
 */
public class CertificateTab extends javax.swing.JPanel implements IBurpTab {

    /**
     * Creates new form Certificate
     */
    public CertificateTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpFormat = new javax.swing.ButtonGroup();
        btnGrpCA = new javax.swing.ButtonGroup();
        tabbetCertificate = new javax.swing.JTabbedPane();
        pnlCACertificate = new javax.swing.JPanel();
        pnlCertExport = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        rdoConvertPairPEM = new javax.swing.JRadioButton();
        rdoConvertCertificateDER = new javax.swing.JRadioButton();
        rdoConvertPrivateDER = new javax.swing.JRadioButton();
        chkProvidedServer = new javax.swing.JCheckBox();
        pnlListenPort = new javax.swing.JPanel();
        lblListenPort = new javax.swing.JLabel();
        spnListenPort = new javax.swing.JSpinner();
        btnProvidedServer = new javax.swing.JToggleButton();
        btnCopy = new javax.swing.JButton();
        pnlCertImport = new javax.swing.JPanel();
        pnlSelectCertificate = new javax.swing.JPanel();
        rdoBurpCA = new javax.swing.JRadioButton();
        rdoCustomCA = new javax.swing.JRadioButton();
        pnlCertSIelectmport = new javax.swing.JPanel();
        btnStoreTypeJKS = new javax.swing.JToggleButton();
        btnStoreTypePKCS12 = new javax.swing.JToggleButton();
        txtStoreFile = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        txtStorePassword = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        pnlCACertificate.setLayout(new java.awt.BorderLayout());

        pnlCertExport.setBorder(javax.swing.BorderFactory.createTitledBorder("Store"));

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnGrpFormat.add(rdoConvertPairPEM);
        rdoConvertPairPEM.setSelected(true);
        rdoConvertPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpFormat.add(rdoConvertCertificateDER);
        rdoConvertCertificateDER.setText("Certificate  in DER format");

        btnGrpFormat.add(rdoConvertPrivateDER);
        rdoConvertPrivateDER.setText("Private key  in DER format");

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("yagura/view/Bundle"); // NOI18N
        chkProvidedServer.setText(bundle.getString("server.ocsp.tab.auto_start")); // NOI18N
        chkProvidedServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkProvidedServerStateChanged(evt);
            }
        });

        lblListenPort.setText(bundle.getString("server.ocsp.tab.listen_port")); // NOI18N
        lblListenPort.setToolTipText("");

        spnListenPort.setModel(new javax.swing.SpinnerNumberModel(6060, 1024, 65535, 1));
        spnListenPort.setEditor(new javax.swing.JSpinner.NumberEditor(spnListenPort, "#0"));
        spnListenPort.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnListenPortStateChanged(evt);
            }
        });

        btnProvidedServer.setText("Start");
        btnProvidedServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvidedServerActionPerformed(evt);
            }
        });

        btnCopy.setText("Copy URL");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListenPortLayout = new javax.swing.GroupLayout(pnlListenPort);
        pnlListenPort.setLayout(pnlListenPortLayout);
        pnlListenPortLayout.setHorizontalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProvidedServer, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnCopy)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlListenPortLayout.setVerticalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProvidedServer)
                    .addComponent(lblListenPort)
                    .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopy))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        lblListenPort.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout pnlCertExportLayout = new javax.swing.GroupLayout(pnlCertExport);
        pnlCertExport.setLayout(pnlCertExportLayout);
        pnlCertExportLayout.setHorizontalGroup(
            pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertExportLayout.createSequentialGroup()
                .addGroup(pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlListenPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCertExportLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdoConvertCertificateDER, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoConvertPrivateDER, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlCertExportLayout.createSequentialGroup()
                                .addComponent(rdoConvertPairPEM, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExport))
                            .addComponent(chkProvidedServer))
                        .addGap(0, 137, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCertExportLayout.setVerticalGroup(
            pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoConvertPairPEM)
                    .addComponent(btnExport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertCertificateDER)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertPrivateDER)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkProvidedServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlListenPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        chkProvidedServer.getAccessibleContext().setAccessibleName("");

        pnlCACertificate.add(pnlCertExport, java.awt.BorderLayout.CENTER);

        pnlCertImport.setBorder(javax.swing.BorderFactory.createTitledBorder("Load"));
        pnlCertImport.setLayout(new java.awt.BorderLayout());

        btnGrpCA.add(rdoBurpCA);
        rdoBurpCA.setSelected(true);
        rdoBurpCA.setText("Burp suite default CA");
        rdoBurpCA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoBurpCAStateChanged(evt);
            }
        });
        rdoBurpCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoBurpCAActionPerformed(evt);
            }
        });

        btnGrpCA.add(rdoCustomCA);
        rdoCustomCA.setText("Custom CA File");
        rdoCustomCA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoCustomCAStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlSelectCertificateLayout = new javax.swing.GroupLayout(pnlSelectCertificate);
        pnlSelectCertificate.setLayout(pnlSelectCertificateLayout);
        pnlSelectCertificateLayout.setHorizontalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoBurpCA)
                    .addComponent(rdoCustomCA))
                .addContainerGap(370, Short.MAX_VALUE))
        );
        pnlSelectCertificateLayout.setVerticalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoBurpCA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoCustomCA)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCertImport.add(pnlSelectCertificate, java.awt.BorderLayout.NORTH);

        pnlCertSIelectmport.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnGrpFormat.add(btnStoreTypeJKS);
        btnStoreTypeJKS.setText("JKS");
        btnStoreTypeJKS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreTypeJKSActionPerformed(evt);
            }
        });

        btnGrpFormat.add(btnStoreTypePKCS12);
        btnStoreTypePKCS12.setText("PKCS12");

        txtStoreFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStoreFileKeyPressed(evt);
            }
        });

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        lblPassword.setText("Password:");

        javax.swing.GroupLayout pnlCertSIelectmportLayout = new javax.swing.GroupLayout(pnlCertSIelectmport);
        pnlCertSIelectmport.setLayout(pnlCertSIelectmportLayout);
        pnlCertSIelectmportLayout.setHorizontalGroup(
            pnlCertSIelectmportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertSIelectmportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertSIelectmportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCertSIelectmportLayout.createSequentialGroup()
                        .addComponent(btnStoreTypeJKS, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStoreTypePKCS12))
                    .addGroup(pnlCertSIelectmportLayout.createSequentialGroup()
                        .addComponent(txtStoreFile, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnImport))
                    .addComponent(lblPassword)
                    .addComponent(txtStorePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        pnlCertSIelectmportLayout.setVerticalGroup(
            pnlCertSIelectmportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertSIelectmportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertSIelectmportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStoreTypeJKS)
                    .addComponent(btnStoreTypePKCS12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCertSIelectmportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStoreFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStorePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pnlCertImport.add(pnlCertSIelectmport, java.awt.BorderLayout.CENTER);

        pnlCACertificate.add(pnlCertImport, java.awt.BorderLayout.NORTH);

        tabbetCertificate.addTab("CA Certificate", pnlCACertificate);

        add(tabbetCertificate, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {
        SwingUtil.setContainerEnable(this.pnlCertSIelectmport, this.rdoCustomCA.isSelected());
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        mockServer.setDispatcher(dispatcher);
    }

    private final Dispatcher dispatcher = new Dispatcher() {
        @Override
        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
            try {
                if (request.getPath().equals("/")){
                    return new MockResponse().addHeader("Content-Type", "text/html; " + "charset=utf-8")
                        .setBody("<html><head><title>" + Version.getInstance().getProjectName() + "</title>\n" +
                                "<style type=\"text/css\">\n" +
                                "body { background: #dedede; font-family: Arial, sans-serif; color: #404042; -webkit-font-smoothing: antialiased; }\n" +
                                "#container { padding: 0 15px; margin: 10px auto; background-color: #ffffff; }\n" +
                                "a { word-wrap: break-word; }\n" +
                                "a:link, a:visited { color: #2862e0; text-decoration: none; }\n" +
                                "a:hover, a:active { color: #404042; text-decoration: underline; }\n" +
                                "h1 { font-size: 1.6em; line-height: 1.2em; font-weight: normal; color: #404042; }\n" +
                                "h2 { font-size: 1.3em; line-height: 1.2em; padding: 0; margin: 0.8em 0 0.3em 0; font-weight: normal; color: #404042;}\n" +
                                ".title { color: #ffffff; background: #2862e0; padding: 10px 15px; margin: 0 -15px 10px -15px; overflow: hidden; }\n" +
                                ".title h1 { color: #ffffff; padding: 0; margin: 0; font-size: 1.8em; }\n" +
                                "</style>" +
                                "</head>\n" +
                                "<body>\n" +
                                "<div id=\"container\">\n" +
                                "<div class=\"title\"><h1>" + Version.getInstance().getProjectName() + "</h1></div>\n" +
                                "</div>\n" +
                                "<div><ul>\n" +
                                "<li><a href=\"/burp-keycert.pem.der\">Certificate and Private key in PEM format</a></li>\n" +
                                "<li><a href=\"/burp-cert.pem.der\">Certificate in PEM format</a></li>\n" +
                                "</ul></div>\n" +
                                "</body>\n" +
                                "</html>").setResponseCode(200);
                }
                else if (request.getPath().equals("/burp-keycert.pem.der")){
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BoncyUtil.exportCertificatePem(cert.getKey(), cert.getValue());
                    return new MockResponse()
                        .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                        .addHeader("Content-Disposition", "attachment; filename=\"burp-keycert.pem.der\"")
                        .setBody(exportCA).setResponseCode(200);
                }
                else if (request.getPath().equals("/burp-cert.pem.der")){
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BoncyUtil.exportCertificatePem(cert.getValue());
                    return new MockResponse()
                        .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                        .addHeader("Content-Disposition", "attachment; filename=\"burp-cert.pem.der\"")
                        .setBody(exportCA).setResponseCode(200);
                }
            } catch (IOException ex) {
                return new MockResponse().setResponseCode(500).setBody(StringUtil.getStackTrace(ex));
            }
            return new MockResponse().setResponseCode(404);
        }
    };

    private Map.Entry<Key, X509Certificate> getExportCerticate() {
        Map.Entry<Key, X509Certificate> cert = null;
        HashMap<String, Map.Entry<Key, X509Certificate>> mapCert = null;
        try {
            if (this.rdoBurpCA.isSelected()) {
                KeyStore ks = BurpConfig.loadCACeart();
                mapCert = CertUtil.loadFromKeyStore(ks, BurpConfig.getCAPassword());
            }
            else {
                File storeFile = new File(this.txtStoreFile.getText());
                if (this.btnStoreTypeJKS.isSelected()) {
                    mapCert = CertUtil.loadFromJKS(storeFile, this.txtStorePassword.getText());
                } else if (this.btnStoreTypePKCS12.isSelected()) {
                    mapCert = CertUtil.loadFromPKCS12(storeFile, this.txtStorePassword.getText());
                }
            }
            if (mapCert != null) {
                for (String ailias : mapCert.keySet()) {
                    cert = mapCert.get(ailias);
                    break;
                }
            }
        } catch (KeyStoreException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CertificateException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnrecoverableKeyException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cert;
    }

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        Map.Entry<Key, X509Certificate> cert = getExportCerticate();
        if (cert != null) {
            try {
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoConvertPairPEM.isSelected()) {
                            BoncyUtil.storeCertificatePem(cert.getKey(), cert.getValue(), saveFile);
                    }
                    else if (this.rdoConvertCertificateDER.isSelected()) {
                        BoncyUtil.storeCertificateDer(cert.getValue(), saveFile);
                    }
                    else if (this.rdoConvertPrivateDER.isSelected()) {
                        BoncyUtil.storeCertificateDer(cert.getKey(), saveFile);
                    }
                    //String output = CertUtil.exportToPem(cert.getKey(), cert.getValue());
                    //FileUtil.bytesToFile(StringUtil.getBytesRaw(output), pemFile);
                }
            } catch (IOException ex) {
                Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void txtStoreFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStoreFileKeyPressed

    }//GEN-LAST:event_txtStoreFileKeyPressed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            this.txtStoreFile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnStoreTypeJKSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreTypeJKSActionPerformed
    }//GEN-LAST:event_btnStoreTypeJKSActionPerformed

    private void rdoBurpCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoBurpCAActionPerformed
    }//GEN-LAST:event_rdoBurpCAActionPerformed

    private void rdoBurpCAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoBurpCAStateChanged
        SwingUtil.setContainerEnable(this.pnlCertSIelectmport, this.rdoCustomCA.isSelected());
    }//GEN-LAST:event_rdoBurpCAStateChanged

    private void rdoCustomCAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoCustomCAStateChanged
        SwingUtil.setContainerEnable(this.pnlCertSIelectmport, this.rdoCustomCA.isSelected());
    }//GEN-LAST:event_rdoCustomCAStateChanged

    private void btnProvidedServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvidedServerActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            if (this.mockServer != null) {
                startMockServer((int)this.spnListenPort.getValue());
            }
        } else {
            this.stopMockServer();
        }
    }//GEN-LAST:event_btnProvidedServerActionPerformed

    private void chkProvidedServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkProvidedServerStateChanged
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        if (!this.chkProvidedServer.isSelected()) {
            this.btnProvidedServer.setSelected(false);
            btnProvidedServerActionPerformed(null);
        }
    }//GEN-LAST:event_chkProvidedServerStateChanged

    private void spnListenPortStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnListenPortStateChanged

    }//GEN-LAST:event_spnListenPortStateChanged

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            SwingUtil.systemClipboardCopy(this.mockServer.url("/").url().toExternalForm());
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnExport;
    private javax.swing.ButtonGroup btnGrpCA;
    private javax.swing.ButtonGroup btnGrpFormat;
    private javax.swing.JButton btnImport;
    private javax.swing.JToggleButton btnProvidedServer;
    private javax.swing.JToggleButton btnStoreTypeJKS;
    private javax.swing.JToggleButton btnStoreTypePKCS12;
    private javax.swing.JCheckBox chkProvidedServer;
    private javax.swing.JLabel lblListenPort;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JPanel pnlCACertificate;
    private javax.swing.JPanel pnlCertExport;
    private javax.swing.JPanel pnlCertImport;
    private javax.swing.JPanel pnlCertSIelectmport;
    private javax.swing.JPanel pnlListenPort;
    private javax.swing.JPanel pnlSelectCertificate;
    private javax.swing.JRadioButton rdoBurpCA;
    private javax.swing.JRadioButton rdoConvertCertificateDER;
    private javax.swing.JRadioButton rdoConvertPairPEM;
    private javax.swing.JRadioButton rdoConvertPrivateDER;
    private javax.swing.JRadioButton rdoCustomCA;
    private javax.swing.JSpinner spnListenPort;
    private javax.swing.JTabbedPane tabbetCertificate;
    private javax.swing.JTextField txtStoreFile;
    private javax.swing.JTextField txtStorePassword;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Certificate";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    private MockWebServer mockServer = new MockWebServer();

    protected void startMockServer(int port) {
        try {
            this.mockServer.start(port);
        } catch (IOException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected void stopMockServer() {
        try {
            this.mockServer.shutdown();
        } catch (IOException ex) {
            Logger.getLogger(CertificateTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
