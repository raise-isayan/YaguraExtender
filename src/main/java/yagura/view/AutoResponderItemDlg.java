package yagura.view;

import yagura.model.AutoResponderItem;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import extension.helpers.ConvertUtil;
import extension.helpers.HttpUtil;
import extension.helpers.SwingUtil;
import extension.view.base.CustomDialog;
import java.util.logging.Logger;

/**
 *
 * @author isayan
 */
public class AutoResponderItemDlg extends CustomDialog {

    private final static Logger logger = Logger.getLogger(AutoResponderItemDlg.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form AutoResponderItemDlg
     *
     * @param parent
     * @param modal
     */
    public AutoResponderItemDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        lblMatch = new javax.swing.JLabel();
        lblReplace = new javax.swing.JLabel();
        txtRepReplace = new javax.swing.JTextField();
        txtRepMatch = new javax.swing.JTextField();
        chkRegExp = new javax.swing.JCheckBox();
        btnSelectExecute = new javax.swing.JButton();
        chkIgnoreCase = new javax.swing.JCheckBox();
        cmbContentType = new javax.swing.JComboBox<>();
        lblReplace1 = new javax.swing.JLabel();
        chkBodyOnly = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(401, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        lblMatch.setText("Match URL:");

        lblReplace.setText("Replace:");

        txtRepReplace.setName(""); // NOI18N
        txtRepReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRepReplaceActionPerformed(evt);
            }
        });

        txtRepMatch.setName(""); // NOI18N
        txtRepMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRepMatchActionPerformed(evt);
            }
        });

        chkRegExp.setText("RegExp");

        btnSelectExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_image.png"))); // NOI18N
        btnSelectExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExecuteActionPerformed(evt);
            }
        });

        chkIgnoreCase.setText("IgnoreCase");
        chkIgnoreCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIgnoreCaseActionPerformed(evt);
            }
        });

        cmbContentType.setEditable(true);
        cmbContentType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "text/html", "text/plain", "image/jpeg", "image/gif", "image/png", "application/json", "application/javascript" }));

        lblReplace1.setText("Content-Type:");

        chkBodyOnly.setText("Body only");
        chkBodyOnly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkBodyOnlyStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMatch)
                    .addComponent(lblReplace)
                    .addComponent(lblReplace1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbContentType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtRepReplace)
                    .addComponent(txtRepMatch, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(chkRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkIgnoreCase))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(btnSelectExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkBodyOnly)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMatch)
                    .addComponent(txtRepMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkRegExp)
                    .addComponent(chkIgnoreCase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblReplace)
                        .addComponent(txtRepReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSelectExecute)
                    .addComponent(chkBodyOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbContentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReplace1))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {
        this.cmbContentType.setEnabled(this.chkBodyOnly.isSelected());
        // Drag and Drop
        this.txtRepReplace.setTransferHandler(new SwingUtil.FileDropAndClipbordTransferHandler() {
            @Override
            public void setData(File file, byte[] rawData) {
                txtRepReplace.setText(file.getAbsolutePath());
            }
        });
    }

    private void txtRepReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRepReplaceActionPerformed

    }//GEN-LAST:event_txtRepReplaceActionPerformed

    private void chkIgnoreCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIgnoreCaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkIgnoreCaseActionPerformed

    private void btnSelectExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExecuteActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        filechooser.setSelectedFile(new File(this.txtRepReplace.getText()));
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            this.txtRepReplace.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_btnSelectExecuteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        AutoResponderItem item = this.getItem();
        String mime = ConvertUtil.toEmpty(this.cmbContentType.getEditor().getItem());
        if (item.getMatch().isEmpty()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.responder.repmatch.empty"), "AutoResponder", JOptionPane.INFORMATION_MESSAGE);
        } else if (!item.isRegexp() && item.isValidRegex() && !HttpUtil.isValidUrl(item.getMatch())) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.responder.match.invalid.url"), "AutoResponder", JOptionPane.INFORMATION_MESSAGE);
        } else if (item.isRegexp() && !item.isValidRegex()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.responder.repmatch.regex"), "AutoResponder", JOptionPane.INFORMATION_MESSAGE);
        } else if (item.isBodyOnly() && mime.isEmpty()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.responder.mime.empty"), "AutoResponder", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void txtRepMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRepMatchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRepMatchActionPerformed

    private void chkBodyOnlyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkBodyOnlyStateChanged
        this.cmbContentType.setEnabled(this.chkBodyOnly.isSelected());
    }//GEN-LAST:event_chkBodyOnlyStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AutoResponderItemDlg dialog = new AutoResponderItemDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSelectExecute;
    private javax.swing.JCheckBox chkBodyOnly;
    private javax.swing.JCheckBox chkIgnoreCase;
    private javax.swing.JCheckBox chkRegExp;
    private javax.swing.JComboBox<String> cmbContentType;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblReplace;
    private javax.swing.JLabel lblReplace1;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTextField txtRepMatch;
    private javax.swing.JTextField txtRepReplace;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the item
     */
    public AutoResponderItem getItem() {
        AutoResponderItem item = new AutoResponderItem();
        item.setSelected(true);
        item.setRegexp(this.chkRegExp.isSelected());
        item.setIgnoreCase(this.chkIgnoreCase.isSelected());
        item.setMatch(this.txtRepMatch.getText());
        item.setReplace(this.txtRepReplace.getText());
        item.setBodyOnly(this.chkBodyOnly.isSelected());
        item.setContentType(ConvertUtil.toEmpty(this.cmbContentType.getEditor().getItem()));
        return item;
    }

    /**
     * @param item the item to set
     */
    public void setItem(AutoResponderItem item) {
        this.txtRepMatch.setText(item.getMatch());
        this.chkRegExp.setSelected(item.isRegexp());
        this.chkIgnoreCase.setSelected(item.isIgnoreCase());
        this.txtRepReplace.setText(item.getReplace());
        this.chkBodyOnly.setSelected(item.isBodyOnly());
        this.cmbContentType.getEditor().setItem(item.getContentType());
    }

}
