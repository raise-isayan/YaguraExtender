package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.http.message.params.ParsedHttpParameter;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.ui.Selection;
import extension.burp.IBurpMessageTab;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import java.awt.Component;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import passive.JWSToken;
import passive.JWTToken;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class JWSViewTab extends javax.swing.JPanel implements IBurpMessageTab {

    private final static Logger logger = Logger.getLogger(JWSViewTab.class.getName());
    private final JWSToken jwsinstance = new JWSToken();

    private final Map<String, JWSToken> tokenMap = Collections.synchronizedMap(new HashMap<>());

    /**
     * Creates new form JWSTViewTab
     */
    public JWSViewTab() {
        initComponents();
        customizeComponents();
    }

    private final JWSViewPanel panelJWSView = new JWSViewPanel();

    private void customizeComponents() {
        this.pnlJWS.add(this.panelJWSView, java.awt.BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJWS = new javax.swing.JPanel();
        pnlChoiceJWS = new javax.swing.JPanel();
        cmbParam = new javax.swing.JComboBox<>();
        btnCopy = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlJWSLayout = new javax.swing.GroupLayout(pnlJWS);
        pnlJWS.setLayout(pnlJWSLayout);
        pnlJWSLayout.setHorizontalGroup(
            pnlJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );
        pnlJWSLayout.setVerticalGroup(
            pnlJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        add(pnlJWS, java.awt.BorderLayout.CENTER);

        cmbParam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbParamItemStateChanged(evt);
            }
        });

        btnCopy.setText("Copy");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChoiceJWSLayout = new javax.swing.GroupLayout(pnlChoiceJWS);
        pnlChoiceJWS.setLayout(pnlChoiceJWSLayout);
        pnlChoiceJWSLayout.setHorizontalGroup(
            pnlChoiceJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
            .addGroup(pnlChoiceJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlChoiceJWSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(cmbParam, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(btnCopy)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnlChoiceJWSLayout.setVerticalGroup(
            pnlChoiceJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
            .addGroup(pnlChoiceJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlChoiceJWSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(pnlChoiceJWSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCopy))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        add(pnlChoiceJWS, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbParamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbParamItemStateChanged
        String key = (String) this.cmbParam.getSelectedItem();
        JWSToken token = this.tokenMap.get(key);
        if (token != null) {
            this.panelJWSView.setJWS(token, true);
        }
    }//GEN-LAST:event_cmbParamItemStateChanged

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        String token = (String) this.cmbParam.getSelectedItem();
        if (token != null) {
            SwingUtil.systemClipboardCopy(token);
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JComboBox<String> cmbParam;
    private javax.swing.JPanel pnlChoiceJWS;
    private javax.swing.JPanel pnlJWS;
    // End of variables declaration//GEN-END:variables

    private HttpRequestResponse httpRequestResponse = null;

    @Override
    public HttpRequestResponse getHttpRequestResponse() {
        return httpRequestResponse;
    }

    @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        final HttpRequest httpRequest = httpRequestResponse.request();
        this.httpRequestResponse = httpRequestResponse;
        this.tokenMap.clear();
        this.cmbParam.removeAllItems();
        List<HttpHeader> headers = httpRequest.headers();
        for (HttpHeader h : headers) {
            String value = h.value();
            JWSToken token = jwsinstance.parseToken(value, false);
            if (token != null) {
                tokenMap.put(h.name(), token);
                this.cmbParam.addItem(h.name());
            }
        }
        boolean find = false;
        List<ParsedHttpParameter> parameters = httpRequest.parameters();
        for (ParsedHttpParameter p : parameters) {
            if (JWSToken.containsTokenFormat(p.value())) {
                if (p.type() == HttpParameterType.COOKIE) {
                    String name = p.name();
                    String value = p.value();
                    String key = p.type().name() + " " + name;
                    JWSToken token = jwsinstance.parseToken(value, true);
                    if (token != null) {
                        tokenMap.put(key, token);
                        this.cmbParam.addItem(key);
                    }
                } else if (p.type() == HttpParameterType.URL || p.type() == HttpParameterType.BODY) {
                    String name = p.name();
                    String value = p.value();
                    String key = p.type().name() + " " + name;
                    JWSToken token = jwsinstance.parseToken(value, true);
                    if (token != null) {
                        tokenMap.put(key, token);
                        this.cmbParam.addItem(key);
                        find = true;
                    }
                }
            }
        }
        if (!find) {
            String body = StringUtil.getBytesRawString(httpRequest.body().getBytes());
            if (JWSToken.containsTokenFormat(body)) {
                JWSToken token = jwsinstance.parseToken(body, false);
                if (token != null) {
                    String key = "(body)";
                    tokenMap.put(key, token);
                    this.cmbParam.addItem(key);
                }
            }
        }
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        final BurpExtension extenderImpl = BurpExtension.getInstance();
        if (httpRequestResponse == null) {
            return false;
        }
        boolean find = false;
        try {
            UniversalViewProperty viewProperty = extenderImpl.getProperty().getUniversalViewProperty();
            EnumSet<UniversalViewProperty.MessageView> view = viewProperty.getMessageView();
            if (!view.contains(UniversalViewProperty.MessageView.JWT)) {
                return false;
            }
            // Burp v2023.4.1 以降の謎挙動に対応
            if ((httpRequestResponse.request() != null && httpRequestResponse.request().toByteArray().length() == 0 && httpRequestResponse.response() == null)
                    || (httpRequestResponse.response() != null && httpRequestResponse.response().toByteArray().length() == 0)) {
                return true;
            }
            final HttpRequest httpRequest = httpRequestResponse.request();
            if (httpRequest.toByteArray().length() > viewProperty.getDispayMaxLength() && viewProperty.getDispayMaxLength() != 0) {
                return false;
            }
            this.setLineWrap(viewProperty.isLineWrap());
            List<HttpHeader> headers = httpRequest.headers();
            for (HttpHeader h : headers) {
                if (JWTToken.containsTokenFormat(h.value())) {
                    return true;
                }
            }
            List<ParsedHttpParameter> parameters = httpRequest.parameters();
            for (ParsedHttpParameter p : parameters) {
                if (p.type() == HttpParameterType.URL || p.type() == HttpParameterType.BODY) {
                    find = jwsinstance.isValidFormat(p.value());
                    if (find) {
                        break;
                    }
                }
            }
            if (!find) {
                String body = StringUtil.getStringRaw(httpRequest.body().getBytes());
                find = JWTToken.containsTokenFormat(body);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return find;
    }

    @Override
    public String caption() {
        return "JWS";
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }

    @Override
    public boolean isModified() {
        return false;
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    private void setLineWrap(boolean lineWrap) {
        this.panelJWSView.setLineWrap(lineWrap);
    }


}
