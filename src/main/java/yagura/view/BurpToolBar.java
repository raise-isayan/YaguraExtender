package yagura.view;

import burp.api.montoya.MontoyaApi;
import java.util.Timer;
import java.util.TimerTask;
import burp.api.montoya.ui.Theme;
import javax.swing.plaf.basic.BasicToolBarUI;


/**
 *
 * @author isayan
 */
public class BurpToolBar extends javax.swing.JPanel {

    private final MontoyaApi api;

    /**
     * Creates new form NewJPanel
     * @param api
     */
    public BurpToolBar(final MontoyaApi api) {
        this.api = api;
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        tglIntercept = new javax.swing.JToggleButton();

        setLayout(new java.awt.BorderLayout());

        toolBar.setFloatable(true);
        toolBar.setRollover(true);

        tglIntercept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/untick.png"))); // NOI18N
        tglIntercept.setSelected(true);
        tglIntercept.setText("Intercept off");
        tglIntercept.setFocusable(false);
        tglIntercept.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        tglIntercept.setMaximumSize(new java.awt.Dimension(150, 30));
        tglIntercept.setMinimumSize(new java.awt.Dimension(150, 30));
        tglIntercept.setPreferredSize(new java.awt.Dimension(150, 30));
        tglIntercept.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/tick.png"))); // NOI18N
        tglIntercept.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tglInterceptStateChanged(evt);
            }
        });
        tglIntercept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglInterceptActionPerformed(evt);
            }
        });
        toolBar.add(tglIntercept);
        tglIntercept.getAccessibleContext().setAccessibleDescription("");

        add(toolBar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final javax.swing.ImageIcon inspector_on_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_dark = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/dark/switch-off.svg"));

    private final javax.swing.ImageIcon inspector_on_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-on.svg"));
    private final javax.swing.ImageIcon inspector_off_light = new javax.swing.ImageIcon(getClass().getResource("/resources/Media/svg/light/switch-off.svg"));

    private final Timer timer = new Timer(); // 今回追加する処理
    private final TimerTask task = new TimerTask() {
        public void run() {
            boolean interceptEnabled = api.proxy().isInterceptEnabled();
            if (interceptEnabled != isIntercept()) {
                setIntercept(interceptEnabled);
            }
        }
    };

//    final PropertyChangeListener listener = new PropertyChangeListener() {
//        @Override
//        public void propertyChange(PropertyChangeEvent evt) {
//            applyStyleTheme(api.userInterface().currentTheme());
//        }
//    };

    private void customizeComponents() {
//        applyStyleTheme(api.userInterface().currentTheme());
//        ThemeUI.addPropertyChangeListener(listener);
        this.timer.schedule(this.task, 0, this.interval_time);
    }

    private void tglInterceptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tglInterceptStateChanged
        boolean interceptEnabled = isIntercept();
        this.tglIntercept.setText(interceptEnabled ? "Intercept on" : "Intercept off");
    }//GEN-LAST:event_tglInterceptStateChanged

    private void tglInterceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglInterceptActionPerformed
        boolean interceptEnabled = api.proxy().isInterceptEnabled();
        if (interceptEnabled != isIntercept()) {
            if (interceptEnabled) {
                api.proxy().disableIntercept();
            }
            else {
                api.proxy().enableIntercept();
            }
        }
    }//GEN-LAST:event_tglInterceptActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton tglIntercept;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    public void applyStyleTheme(Theme theme) {
        switch (theme) {
        case DARK:
            this.tglIntercept.setIcon(inspector_off_dark);
            this.tglIntercept.setSelectedIcon(inspector_on_dark);
            break;
        case LIGHT:
            this.tglIntercept.setIcon(inspector_off_light);
            this.tglIntercept.setSelectedIcon(inspector_on_light);
            break;
        }
        this.tglIntercept.updateUI();
    }


    public void setIntercept(boolean interceptEnabled) {
        this.tglIntercept.setSelected(interceptEnabled);
    }

    public boolean isIntercept() {
        return this.tglIntercept.isSelected();
    }

    private int interval_time = 500;

    public void setFlotingBar(boolean floating) {
        if (toolBar.getUI() instanceof BasicToolBarUI ui) {
            ui.setFloating(floating, null);
        }
    }

//    public void setIntervalTime(int interval_time) {
//        this.interval_time = interval_time;
//    }
//
//    public int getIntervalTime() {
//        return this.interval_time;
//    }

}
