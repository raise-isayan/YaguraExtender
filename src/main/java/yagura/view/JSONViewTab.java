package yagura.view;

import burp.BurpExtender;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IRequestInfo;
import burp.IResponseInfo;
import extend.util.external.FormatUtil;
import extension.burp.RequestInfo;
import extension.burp.ResponseInfo;
import extension.helpers.HttpMessage;
import extension.helpers.HttpRequest;
import extension.helpers.HttpResponse;
import extension.helpers.StringUtil;
import java.awt.Component;
import java.awt.Font;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.JTextComponent;
import yagura.model.QuickSearchEvent;
import yagura.model.QuickSearchListener;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class JSONViewTab extends javax.swing.JPanel implements IMessageEditorTab {
    private final static Logger logger = Logger.getLogger(JSONViewTab.class.getName());

    private final boolean isRequest;

    /**
     * Creates new form JSONView
     */
    public JSONViewTab(boolean isResuest) {
        this(null, false, isResuest);
    }

    /**
     * Creates new form JSONView
     */
    public JSONViewTab(IMessageEditorController controller, boolean editable, boolean isResuest) {
        this.isRequest = isResuest;
        initComponents();
        customizeComponents();
    }

    private final JSONView jsonView = new JSONView(isJsonp());
    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.quickSearchTab.setSelectedTextArea((org.fife.ui.rtextarea.RTextArea)this.jsonView.getTextArea());
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        this.quickSearchTab.addQuickSearchListener(quickSerchStateChanged);

        this.add(jsonView, java.awt.BorderLayout.CENTER);
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);
    }

    public boolean isJsonp() {
        return false;
    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    private final QuickSearchListener quickSerchStateChanged = new QuickSearchListener() {

        @Override
        public void quickBackPerformed(QuickSearchEvent evt) {

        }

        @Override
        public void quickForwardPerformed(QuickSearchEvent evt) {

        }

    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void setMessageEncoding(String encoding) {
        try {
            if (this.message != null) {
                String msg = StringUtil.getStringCharset(this.message.getBodyBytes(), encoding);
                // Raw
                this.jsonView.setMessage(msg);
            } else {
                this.jsonView.setMessage(null);
            }
            this.quickSearchTab.clearViewAndSearch();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    public void setMessageFont(Font font) {
        this.jsonView.setMessageFont(font);
        this.quickSearchTab.setMessageFont(font);
    }

    protected JTextComponent getSelectedTextArea() {
        return this.jsonView.getTextArea();
    }

    public String getSelectedText() {
        JTextComponent area = this.getSelectedTextArea();
        return area.getSelectedText();
    }

    public boolean isExtendVisible() {
        return false;
    }

    @Override
    public String getTabCaption() {
        if (this.isJsonp()) {
            return "JSONP";
        }
        else {
            return "JSON";
        }
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isMessageRequest) {
        if (content == null || content.length == 0) {
            return false;
        }
        if (this.isJsonp()) {
            return isEnabledJsonp(content, isMessageRequest);
        }
        else {
            return isEnabledJson(content, isMessageRequest);
        }
    }

    public boolean isEnabledJson(byte[] content, boolean isMessageRequest) {
        UniversalViewProperty viewProperty = BurpExtender.getInstance().getProperty().getEncodingProperty();
        EnumSet<UniversalViewProperty.UniversalView> view = viewProperty.getMessageView();
        if (!view.contains(UniversalViewProperty.UniversalView.JSON)) {
            return false;
        }
        if (content.length > viewProperty.getDispayMaxLength() && viewProperty.getDispayMaxLength() != 0) {
            return false;
        }
        this.setLineWrap(viewProperty.isLineWrap());
        boolean mimeJsonType = false;
        byte[] body = new byte[0];
        if (this.isRequest && isMessageRequest) {
            IRequestInfo reqInfo = BurpExtender.getHelpers().analyzeRequest(content);
            mimeJsonType = (reqInfo.getContentType() == IRequestInfo.CONTENT_TYPE_JSON);
            body = RequestInfo.getBodyBytes(reqInfo, content);
        } else if (!this.isRequest && !isMessageRequest) {
            IResponseInfo resInfo = BurpExtender.getHelpers().analyzeResponse(content);
            String mimeType = resInfo.getInferredMimeType();
            mimeJsonType = "JSON".equals(mimeType);
            body = ResponseInfo.getBodyBytes(resInfo, content);
        }
        if (body.length > 0 && mimeJsonType) {
            return FormatUtil.isJson(StringUtil.getBytesRawString(body));
        } else {
            return FormatUtil.isJson(StringUtil.getBytesRawString(body));
        }
    }

    public boolean isEnabledJsonp(byte[] content, boolean isMessageRequest) {
        EnumSet<UniversalViewProperty.UniversalView> view = BurpExtender.getInstance().getProperty().getEncodingProperty().getMessageView();
        if (!view.contains(UniversalViewProperty.UniversalView.JSONP)) {
            return false;
        }
        if (content.length > BurpExtender.getInstance().getProperty().getEncodingProperty().getDispayMaxLength() && BurpExtender.getInstance().getProperty().getEncodingProperty().getDispayMaxLength() != 0) {
            return false;
        }
        byte[] body = new byte[0];
        if (this.isRequest && isMessageRequest) {
            IRequestInfo reqInfo = BurpExtender.getHelpers().analyzeRequest(content);
            body = RequestInfo.getBodyBytes(reqInfo, content);
        } else if (!this.isRequest && !isMessageRequest) {
            IResponseInfo resInfo = BurpExtender.getHelpers().analyzeResponse(content);
            body = ResponseInfo.getBodyBytes(resInfo, content);
        }
        return FormatUtil.isJsonp(StringUtil.getBytesRawString(body));
    }

    private HttpMessage message = null;

    @Override
    public void setMessage(byte[] content, boolean isMessageRequest) {
        try {
            BurpExtender extenderImpl = BurpExtender.getInstance();
            String guessCharset = null;
            HttpMessage httpmessage = null;
            if (isMessageRequest) {
                HttpRequest request = HttpRequest.parseHttpRequest(content);
                httpmessage = request;
                guessCharset = request.getGuessCharset();
            } else {
                HttpResponse response = HttpResponse.parseHttpResponse(content);
                httpmessage = response;
                guessCharset = response.getGuessCharset();
            }
            if (guessCharset == null) {
                guessCharset = StandardCharsets.ISO_8859_1.name();
            }
            this.message = httpmessage;
            this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
            this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
            encodingItemStateChanged.itemStateChanged(null);
            this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);

        } catch (ParseException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public byte[] getMessage() {
        if (this.message != null) {
            return this.message.getMessageBytes();
        } else {
            return new byte[]{};
        }
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.jsonView.isLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.jsonView.setLineWrap(lineWrap);
    }

}
