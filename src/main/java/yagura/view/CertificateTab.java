package yagura.view;

import extension.helpers.CertUtil;
import extend.util.external.BoncyUtil;
import extension.burp.IBurpTab;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.security.Key;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author isayan
 */
public class CertificateTab extends javax.swing.JPanel implements IBurpTab {

    /**
     * Creates new form Certificate
     */
    public CertificateTab() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlCertImport = new javax.swing.JPanel();
        btnStoreTypeJKS = new javax.swing.JToggleButton();
        btnStoreTypePKCS12 = new javax.swing.JToggleButton();
        txtStoreFile = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        txtStorePassword = new javax.swing.JTextField();
        pnlCertExport = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        rdoConvertPEM = new javax.swing.JRadioButton();

        setLayout(new java.awt.BorderLayout());

        buttonGroup1.add(btnStoreTypeJKS);
        btnStoreTypeJKS.setText("JKS");
        btnStoreTypeJKS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreTypeJKSActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnStoreTypePKCS12);
        btnStoreTypePKCS12.setSelected(true);
        btnStoreTypePKCS12.setText("PKCS12");

        txtStoreFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStoreFileKeyPressed(evt);
            }
        });

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        lblPassword.setText("Password:");

        javax.swing.GroupLayout pnlCertImportLayout = new javax.swing.GroupLayout(pnlCertImport);
        pnlCertImport.setLayout(pnlCertImportLayout);
        pnlCertImportLayout.setHorizontalGroup(
            pnlCertImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertImportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCertImportLayout.createSequentialGroup()
                        .addComponent(btnStoreTypeJKS, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStoreTypePKCS12))
                    .addGroup(pnlCertImportLayout.createSequentialGroup()
                        .addComponent(txtStoreFile, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnImport))
                    .addComponent(lblPassword)
                    .addComponent(txtStorePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1694, Short.MAX_VALUE))
        );
        pnlCertImportLayout.setVerticalGroup(
            pnlCertImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertImportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStoreTypeJKS)
                    .addComponent(btnStoreTypePKCS12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCertImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStoreFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStorePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(pnlCertImport, java.awt.BorderLayout.NORTH);

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        rdoConvertPEM.setSelected(true);
        rdoConvertPEM.setText("Certificate and Private key in PEM format");

        javax.swing.GroupLayout pnlCertExportLayout = new javax.swing.GroupLayout(pnlCertExport);
        pnlCertExport.setLayout(pnlCertExportLayout);
        pnlCertExportLayout.setHorizontalGroup(
            pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoConvertPEM, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExport)
                .addContainerGap(1697, Short.MAX_VALUE))
        );
        pnlCertExportLayout.setVerticalGroup(
            pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoConvertPEM)
                    .addComponent(btnExport))
                .addContainerGap(637, Short.MAX_VALUE))
        );

        add(pnlCertExport, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        try {
            HashMap<String, Map.Entry<Key, X509Certificate>> mapCert = null;
            File storeFile = new File(this.txtStoreFile.getText());
            if (this.rdoConvertPEM.isSelected()) {
                if (this.btnStoreTypeJKS.isSelected()) {
                    mapCert = CertUtil.loadFromJKS(storeFile, this.txtStorePassword.getText());
                } else {
                    mapCert = CertUtil.loadFromPKCS12(storeFile, this.txtStorePassword.getText());
                }
            }
            for (String ailias : mapCert.keySet()) {
                Map.Entry<Key, X509Certificate> cert = mapCert.get(ailias);
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File pemFile = filechooser.getSelectedFile();
                    BoncyUtil.storeCertificatePem(cert.getKey(), cert.getValue(), pemFile);
                    //String output = CertUtil.exportToPem(cert.getKey(), cert.getValue());
                    //FileUtil.bytesToFile(StringUtil.getBytesRaw(output), pemFile);
                }
                break;
            }
        } catch (CertificateEncodingException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "JTransCoder", JOptionPane.INFORMATION_MESSAGE);
        } catch (UnrecoverableKeyException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "JTransCoder", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "JTransCoder", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void txtStoreFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStoreFileKeyPressed

    }//GEN-LAST:event_txtStoreFileKeyPressed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            this.txtStoreFile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnStoreTypeJKSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreTypeJKSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStoreTypeJKSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JToggleButton btnStoreTypeJKS;
    private javax.swing.JToggleButton btnStoreTypePKCS12;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JPanel pnlCertExport;
    private javax.swing.JPanel pnlCertImport;
    private javax.swing.JRadioButton rdoConvertPEM;
    private javax.swing.JTextField txtStoreFile;
    private javax.swing.JTextField txtStorePassword;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Certificate";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }
}
