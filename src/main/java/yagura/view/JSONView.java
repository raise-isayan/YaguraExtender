package yagura.view;

import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.helpers.json.JsonUtil;
import extension.helpers.json.JsonpElement;
import java.awt.Font;
import java.awt.SystemColor;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

/**
 *
 * @author isayan
 */
public class JSONView extends javax.swing.JPanel {
    private final static Logger logger = Logger.getLogger(JSONView.class.getName());

    private final boolean isJsonp;

    /**
     * Creates new form JSONView
     */
    public JSONView() {
        this(false);
    }

    /**
     * Creates new form JSONView
     */
    public JSONView(boolean isJsonp) {
        this.isJsonp = isJsonp;
        initComponents();
        customizeComponents();
    }

//    private final EditorKit jsonStyleEditorKit = new StyledEditorKit() {
//        @Override
//        public Document createDefaultDocument() {
//            return new JSONSyntaxDocument();
//        }
//    };

    private DefaultTreeModel modelJSON;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbetJSON = new javax.swing.JTabbedPane();
        pnlTree = new javax.swing.JPanel();
        scrollTree = new javax.swing.JScrollPane();
        treeJSON = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        btnExpand = new javax.swing.JButton();
        btnCollapse = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlTree.setLayout(new java.awt.BorderLayout());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeJSON.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        scrollTree.setViewportView(treeJSON);

        pnlTree.add(scrollTree, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        btnExpand.setText("expand");
        btnExpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpandActionPerformed(evt);
            }
        });
        jPanel1.add(btnExpand);

        btnCollapse.setText("collapse");
        btnCollapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollapseActionPerformed(evt);
            }
        });
        jPanel1.add(btnCollapse);

        pnlTree.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        tabbetJSON.addTab("Tree", pnlTree);

        add(tabbetJSON, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private org.fife.ui.rtextarea.RTextScrollPane scrollJSON;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtJSON;

    @SuppressWarnings("unchecked")
    private void customizeComponents() {

        /*** UI design start ***/

        this.txtJSON = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        this.scrollJSON = new org.fife.ui.rtextarea.RTextScrollPane(this.txtJSON);
        this.txtJSON.setWrapStyleWord(false);

        this.txtJSON.setCodeFoldingEnabled(true);
        this.txtJSON.setClearWhitespaceLinesEnabled(true);
        this.txtJSON.setHighlightCurrentLine(true);
        this.txtJSON.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtJSON.setBackground(SystemColor.text);
        this.txtJSON.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        add(this.scrollJSON, java.awt.BorderLayout.CENTER);

//        tabbetJSON.addTab("pretty", scrollJSON);
//        add(tabbetJSON, java.awt.BorderLayout.CENTER);

        /*** UI design end ***/

        this.txtJSON.setEditable(false);
        this.txtJSON.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);

//        this.txtJSON.setEditorKitForContentType("application/json", this.jsonStyleEditorKit);
//        this.txtJSON.setContentType("application/json");

        Icon emptyIcon = SwingUtil.createEmptyIcon();
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) this.treeJSON.getCellRenderer();
        renderer.setOpenIcon(emptyIcon);
        renderer.setClosedIcon(emptyIcon);
        renderer.setLeafIcon(emptyIcon);
        this.modelJSON = (DefaultTreeModel) this.treeJSON.getModel();

    }

    private void btnExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpandActionPerformed
        expandJsonTree();
    }//GEN-LAST:event_btnExpandActionPerformed

    private void btnCollapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCollapseActionPerformed
        collapseJsonTree();
    }//GEN-LAST:event_btnCollapseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCollapse;
    private javax.swing.JButton btnExpand;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlTree;
    private javax.swing.JScrollPane scrollTree;
    private javax.swing.JTabbedPane tabbetJSON;
    private javax.swing.JTree treeJSON;
    // End of variables declaration//GEN-END:variables

    public void setMessage(String content) {
        this.txtJSON.setText("");
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.modelJSON.getRoot();
        root.removeAllChildren();

        if (content != null) {
            if (this.isJsonp) {
                setMessageJsonp(content);
            }
            else {
                setMessageJson(content);
            }
        }
    }

    private void setMessageJson(String content) {
        // Raw
        SwingWorker swRaw = new SwingWorker<String, Object>() {
            @Override
            protected String doInBackground() throws Exception {
                publish("...");
                return JsonUtil.prettyJson(content);
            }

            protected void process(List<Object> chunks) {
                txtJSON.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
            }

            protected void done() {
                try {
                    txtJSON.setText(get());
                    txtJSON.setCaretPosition(0);
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }

        };
        swRaw.execute();

//        // Tree View
//        SwingWorker swTree = new SwingWorker<DefaultTreeModel, Object>() {
//            @Override
//            protected DefaultTreeModel doInBackground() throws Exception {
//                publish("...");
//                return (DefaultTreeModel) JsonUtil.toJsonTreeModel(JsonUtil.parse(content));
//            }
//
//            protected void process(List<Object> chunks) {
//                modelJSON.setRoot(new DefaultMutableTreeNode("Heavy Processing" + ConvertUtil.repeat("...", chunks.size())));
//            }
//
//            protected void done() {
//                try {
//                    modelJSON = get();
//                    SwingUtil.allNodesChanged(treeJSON);
//                    treeJSON.setModel(modelJSON);
//                    expandJsonTree();
//                } catch (InterruptedException ex) {
//                    logger.log(Level.SEVERE, null, ex);
//                } catch (ExecutionException ex) {
//                    logger.log(Level.SEVERE, null, ex);
//                }
//            }
//        };
//        swTree.execute();
    }

    private void setMessageJsonp(String content) {
        // Raw
        SwingWorker swRaw = new SwingWorker<JsonpElement, Object>() {
            @Override
            protected JsonpElement doInBackground() throws Exception {
                publish("...");
                return JsonpElement.parseJsonp(content);
            }

            protected void process(List<Object> chunks) {
                txtJSON.setText("Heavy Processing" + StringUtil.repeat("...", chunks.size()));
            }

            protected void done() {
                try {
                    JsonpElement jsonpElement = get();
                    txtJSON.setText(jsonpElement.pretty());
                    txtJSON.setCaretPosition(0);
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }

        };
        swRaw.execute();

        // Tree View
        SwingWorker swTree = new SwingWorker<DefaultTreeModel, Object>() {
            @Override
            protected DefaultTreeModel doInBackground() throws Exception {
                publish("...");
                JsonpElement jsonpElement = JsonpElement.parseJsonp(content);
                return (DefaultTreeModel) JsonUtil.toJsonTreeModel(jsonpElement);
            }

            protected void process(List<Object> chunks) {
                modelJSON.setRoot(new DefaultMutableTreeNode("Heavy Processing" + StringUtil.repeat("...", chunks.size())));
            }

            protected void done() {
                try {
                    modelJSON = get();
                    SwingUtil.allNodesChanged(treeJSON);
                    treeJSON.setModel(modelJSON);
                    expandJsonTree();
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        };
        swTree.execute();
    }

    public String getMessage() {
        return this.txtJSON.getText();
    }

    public javax.swing.text.JTextComponent getTextArea() {
        return this.txtJSON;
    }

    public void setMessageFont(Font font) {
        this.txtJSON.setFont(font);
        this.treeJSON.setFont(font);
    }

    public void expandJsonTree() {
        TreePath path = this.treeJSON.getSelectionPath();
        if (path == null) {
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.modelJSON.getRoot();
            path = new TreePath(root.getPath());
        }
        SwingUtil.expandAll(this.treeJSON, path);
    }

    public void collapseJsonTree() {
        TreePath path = this.treeJSON.getSelectionPath();
        if (path == null) {
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.modelJSON.getRoot();
            path = new TreePath(root.getPath());
        }
        SwingUtil.collapseAll(this.treeJSON, path);
    }

    public void quickSearch(String keyword) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.modelJSON.getRoot();
        quickSearch(root, keyword);
    }

    protected void quickSearch(DefaultMutableTreeNode node, String keyword) {
       for (int i = 0; i < node.getChildCount(); i++) {
           TreeNode child = node.getChildAt(i);
           child.toString();
       }
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.txtJSON.getLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.txtJSON.setLineWrap(lineWrap);
    }

}
