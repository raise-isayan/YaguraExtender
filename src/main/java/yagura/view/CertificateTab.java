package yagura.view;

import burp.BurpPreferences;
import extension.helpers.CertUtil;
import extend.util.external.BouncyUtil;
import extension.burp.IBurpTab;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.view.base.CustomTableModel;
import extension.view.layout.VerticalFlowLayout;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;

import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import okio.Buffer;
import org.bouncycastle.asn1.x500.style.BCStyle;
import yagura.Version;
import yagura.model.CertificateItem;

/**
 *
 * @author isayan
 */
public class CertificateTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(CertificateTab.class.getName());

    protected final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form Certificate
     */
    public CertificateTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpFormat = new javax.swing.ButtonGroup();
        btnGrpCA = new javax.swing.ButtonGroup();
        btnGrpExportCertificate = new javax.swing.ButtonGroup();
        btnGrpExportIssuerCA = new javax.swing.ButtonGroup();
        tabGenerate = new javax.swing.JTabbedPane();
        pnlCertificateCA = new javax.swing.JPanel();
        pnlSelectCertificate = new javax.swing.JPanel();
        rdoBurpCA = new javax.swing.JRadioButton();
        rdoCustomCA = new javax.swing.JRadioButton();
        btnSelectExecute = new javax.swing.JButton();
        pnlCertificateExports = new javax.swing.JPanel();
        scrollCertificate = new javax.swing.JScrollPane();
        tableCertificate = new javax.swing.JTable();
        pnlConvertFormat = new javax.swing.JPanel();
        rdoConvertPairPEM = new javax.swing.JRadioButton();
        rdoConvertPrivateDER = new javax.swing.JRadioButton();
        rdoConvertCertificateDER = new javax.swing.JRadioButton();
        rdoConvertCertificatePEM = new javax.swing.JRadioButton();
        btnExportCA = new javax.swing.JButton();
        pnlCertificate = new javax.swing.JPanel();
        pnlServerCertificate = new javax.swing.JPanel();
        pnlServerEnable = new javax.swing.JPanel();
        chkProvidedServer = new javax.swing.JCheckBox();
        pnlListenPort = new javax.swing.JPanel();
        lblListenPort = new javax.swing.JLabel();
        spnListenPort = new javax.swing.JSpinner();
        btnProvidedServer = new javax.swing.JToggleButton();
        btnCopy = new javax.swing.JButton();
        pnlGenerateCA = new javax.swing.JPanel();
        btnExportIssuerCA = new javax.swing.JButton();
        txtCommonName = new javax.swing.JTextField();
        lblCommonName = new javax.swing.JLabel();
        lblOrganizationName = new javax.swing.JLabel();
        txtOrganizationName = new javax.swing.JTextField();
        lblLoccalityName = new javax.swing.JLabel();
        txtLoccalityName = new javax.swing.JTextField();
        txtCountry = new javax.swing.JTextField();
        lblCountry = new javax.swing.JLabel();
        spnYear = new javax.swing.JSpinner();
        rdoExportIssuPairPEM = new javax.swing.JRadioButton();
        rdoExportIssuPairPKCS12 = new javax.swing.JRadioButton();
        txtPKCS12Password = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlCertificateCA.setLayout(new java.awt.BorderLayout());

        btnGrpCA.add(rdoBurpCA);
        rdoBurpCA.setSelected(true);
        rdoBurpCA.setText("Burp suite default CA");
        rdoBurpCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoBurpCAActionPerformed(evt);
            }
        });

        btnGrpCA.add(rdoCustomCA);
        rdoCustomCA.setText("Custom CA File");
        rdoCustomCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCustomCAActionPerformed(evt);
            }
        });

        btnSelectExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_image.png"))); // NOI18N
        btnSelectExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExecuteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSelectCertificateLayout = new javax.swing.GroupLayout(pnlSelectCertificate);
        pnlSelectCertificate.setLayout(pnlSelectCertificateLayout);
        pnlSelectCertificateLayout.setHorizontalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoBurpCA)
                    .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                        .addComponent(rdoCustomCA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(668, Short.MAX_VALUE))
        );
        pnlSelectCertificateLayout.setVerticalGroup(
            pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoBurpCA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSelectCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSelectCertificateLayout.createSequentialGroup()
                        .addComponent(rdoCustomCA)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnSelectExecute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlCertificateCA.add(pnlSelectCertificate, java.awt.BorderLayout.NORTH);

        tableCertificate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "StoreType", "Certificate", "CertificatePasswd", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCertificate.getTableHeader().setReorderingAllowed(false);
        scrollCertificate.setViewportView(tableCertificate);
        if (tableCertificate.getColumnModel().getColumnCount() > 0) {
            tableCertificate.getColumnModel().getColumn(2).setResizable(false);
            tableCertificate.getColumnModel().getColumn(2).setPreferredWidth(0);
            tableCertificate.getColumnModel().getColumn(3).setResizable(false);
            tableCertificate.getColumnModel().getColumn(3).setPreferredWidth(0);
            tableCertificate.getColumnModel().getColumn(4).setResizable(false);
        }

        btnGrpExportCertificate.add(rdoConvertPairPEM);
        rdoConvertPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpExportCertificate.add(rdoConvertPrivateDER);
        rdoConvertPrivateDER.setText("Private key  in DER format");

        btnGrpExportCertificate.add(rdoConvertCertificateDER);
        rdoConvertCertificateDER.setText("Certificate  in DER format");

        btnGrpExportCertificate.add(rdoConvertCertificatePEM);
        rdoConvertCertificatePEM.setText("Certificate  in PEM format");

        btnExportCA.setText("Export");
        btnExportCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportCAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConvertFormatLayout = new javax.swing.GroupLayout(pnlConvertFormat);
        pnlConvertFormat.setLayout(pnlConvertFormatLayout);
        pnlConvertFormatLayout.setHorizontalGroup(
            pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoConvertCertificateDER)
                    .addComponent(rdoConvertCertificatePEM)
                    .addComponent(rdoConvertPrivateDER)
                    .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                        .addComponent(rdoConvertPairPEM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportCA)))
                .addContainerGap())
        );
        pnlConvertFormatLayout.setVerticalGroup(
            pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExportCA)
                    .addComponent(rdoConvertPairPEM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdoConvertCertificatePEM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertCertificateDER)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoConvertPrivateDER)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlCertificateExportsLayout = new javax.swing.GroupLayout(pnlCertificateExports);
        pnlCertificateExports.setLayout(pnlCertificateExportsLayout);
        pnlCertificateExportsLayout.setHorizontalGroup(
            pnlCertificateExportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertificateExportsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCertificateExportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollCertificate)
                    .addComponent(pnlConvertFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCertificateExportsLayout.setVerticalGroup(
            pnlCertificateExportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCertificateExportsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlConvertFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCertificateCA.add(pnlCertificateExports, java.awt.BorderLayout.CENTER);

        pnlCertificate.setLayout(new java.awt.BorderLayout());

        pnlServerCertificate.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("yagura/view/Bundle"); // NOI18N
        chkProvidedServer.setText(bundle.getString("server.ocsp.tab.auto_start")); // NOI18N
        chkProvidedServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkProvidedServerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlServerEnableLayout = new javax.swing.GroupLayout(pnlServerEnable);
        pnlServerEnable.setLayout(pnlServerEnableLayout);
        pnlServerEnableLayout.setHorizontalGroup(
            pnlServerEnableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerEnableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkProvidedServer)
                .addContainerGap())
        );
        pnlServerEnableLayout.setVerticalGroup(
            pnlServerEnableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerEnableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkProvidedServer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkProvidedServer.getAccessibleContext().setAccessibleName("");

        pnlServerCertificate.add(pnlServerEnable, java.awt.BorderLayout.NORTH);

        lblListenPort.setText(bundle.getString("server.ocsp.tab.listen_port")); // NOI18N
        lblListenPort.setToolTipText("");

        spnListenPort.setModel(new javax.swing.SpinnerNumberModel(5050, 1024, 65535, 1));
        spnListenPort.setEditor(new javax.swing.JSpinner.NumberEditor(spnListenPort, "#0"));
        spnListenPort.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnListenPortStateChanged(evt);
            }
        });

        btnProvidedServer.setText("Start");
        btnProvidedServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvidedServerActionPerformed(evt);
            }
        });

        btnCopy.setText("Copy URL");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListenPortLayout = new javax.swing.GroupLayout(pnlListenPort);
        pnlListenPort.setLayout(pnlListenPortLayout);
        pnlListenPortLayout.setHorizontalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListenPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnProvidedServer)
                .addGap(18, 18, 18)
                .addComponent(btnCopy)
                .addContainerGap())
        );
        pnlListenPortLayout.setVerticalGroup(
            pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenPortLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListenPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProvidedServer)
                    .addComponent(lblListenPort)
                    .addComponent(spnListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopy))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        lblListenPort.getAccessibleContext().setAccessibleName("");

        pnlServerCertificate.add(pnlListenPort, java.awt.BorderLayout.CENTER);

        pnlCertificate.add(pnlServerCertificate, java.awt.BorderLayout.SOUTH);

        pnlCertificateCA.add(pnlCertificate, java.awt.BorderLayout.SOUTH);

        tabGenerate.addTab("CA Certificate", pnlCertificateCA);

        btnExportIssuerCA.setText("Export");
        btnExportIssuerCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportIssuerCAActionPerformed(evt);
            }
        });

        lblCommonName.setText("Common Name (CN):");

        lblOrganizationName.setText("Organization Name (O):");

        lblLoccalityName.setText("Loccality Name (L):");

        lblCountry.setText("Country (C):");

        spnYear.setModel(new javax.swing.SpinnerNumberModel(10, 1, 20, 1));

        btnGrpExportIssuerCA.add(rdoExportIssuPairPEM);
        rdoExportIssuPairPEM.setSelected(true);
        rdoExportIssuPairPEM.setText("Certificate and Private key in PEM format");

        btnGrpExportIssuerCA.add(rdoExportIssuPairPKCS12);
        rdoExportIssuPairPKCS12.setText("Certificate and Private key in PKCS#12 keystore");

        jLabel1.setText("Year:");

        javax.swing.GroupLayout pnlGenerateCALayout = new javax.swing.GroupLayout(pnlGenerateCA);
        pnlGenerateCA.setLayout(pnlGenerateCALayout);
        pnlGenerateCALayout.setHorizontalGroup(
            pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateCALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGenerateCALayout.createSequentialGroup()
                        .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlGenerateCALayout.createSequentialGroup()
                                .addComponent(rdoExportIssuPairPKCS12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPKCS12Password))
                            .addGroup(pnlGenerateCALayout.createSequentialGroup()
                                .addComponent(rdoExportIssuPairPEM)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportIssuerCA))
                    .addGroup(pnlGenerateCALayout.createSequentialGroup()
                        .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblCommonName)
                            .addComponent(lblOrganizationName)
                            .addComponent(lblLoccalityName)
                            .addComponent(lblCountry))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlGenerateCALayout.setVerticalGroup(
            pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateCALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spnYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommonName)
                    .addComponent(txtCommonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrganizationName)
                    .addComponent(txtOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoccalityName)
                    .addComponent(txtLoccalityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCountry, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoExportIssuPairPEM)
                    .addComponent(btnExportIssuerCA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateCALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoExportIssuPairPKCS12)
                    .addComponent(txtPKCS12Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );

        tabGenerate.addTab("generateCA", pnlGenerateCA);

        add(tabGenerate, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private CustomTableModel modelCertificate = null;

    private void customizeComponents() {
        this.pnlCertificateCA.setLayout(new VerticalFlowLayout());

        this.modelCertificate = new CustomTableModel(this.tableCertificate.getModel());
        this.tableCertificate.setModel(this.modelCertificate);
        this.tableCertificate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.tableCertificate.setFillsViewportHeight(true);

        // selected
        this.tableCertificate.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableCertificate.getColumnModel().getColumn(0).setPreferredWidth(20);
        this.tableCertificate.getColumnModel().getColumn(0).setMaxWidth(30);

        // StoreType
        this.tableCertificate.getColumnModel().getColumn(1).setMinWidth(40);
        this.tableCertificate.getColumnModel().getColumn(1).setPreferredWidth(80);
        this.tableCertificate.getColumnModel().getColumn(1).setMaxWidth(120);

        //
        this.tableCertificate.getColumnModel().getColumn(2).setMinWidth(0);
        this.tableCertificate.getColumnModel().getColumn(2).setPreferredWidth(0);
        this.tableCertificate.getColumnModel().getColumn(2).setMaxWidth(0);

        // password
        this.tableCertificate.getColumnModel().getColumn(3).setMinWidth(0);
        this.tableCertificate.getColumnModel().getColumn(3).setPreferredWidth(0);
        this.tableCertificate.getColumnModel().getColumn(3).setMaxWidth(0);

        //SwingUtil.setContainerEnable(this.pnlCertSIelectmport, this.rdoCustomCA.isSelected());
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        this.mockServer.setDispatcher(dispatcher);
    }

    private final Dispatcher dispatcher = new Dispatcher() {
        @Override
        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
            try {
                if ("/".equals(request.getPath())) {
                    return new MockResponse().addHeader("Content-Type", "text/html; " + "charset=utf-8")
                            .setBody("<html><head><title>" + Version.getInstance().getProjectName() + "</title>\n"
                                    + "<style type=\"text/css\">\n"
                                    + "body { background: #dedede; font-family: Arial, sans-serif; color: #404042; -webkit-font-smoothing: antialiased; }\n"
                                    + "#container { padding: 0 15px; margin: 10px auto; background-color: #ffffff; }\n"
                                    + "a { word-wrap: break-word; }\n"
                                    + "a:link, a:visited { color: #2862e0; text-decoration: none; }\n"
                                    + "a:hover, a:active { color: #404042; text-decoration: underline; }\n"
                                    + "h1 { font-size: 1.6em; line-height: 1.2em; font-weight: normal; color: #404042; }\n"
                                    + "h2 { font-size: 1.3em; line-height: 1.2em; padding: 0; margin: 0.8em 0 0.3em 0; font-weight: normal; color: #404042;}\n"
                                    + ".title { color: #ffffff; background: #2862e0; padding: 10px 15px; margin: 0 -15px 10px -15px; overflow: hidden; }\n"
                                    + ".title h1 { color: #ffffff; padding: 0; margin: 0; font-size: 1.8em; }\n"
                                    + "</style>"
                                    + "</head>\n"
                                    + "<body>\n"
                                    + "<div id=\"container\">\n"
                                    + "<div class=\"title\"><h1>" + Version.getInstance().getProjectName() + "</h1></div>\n"
                                    + "</div>\n"
                                    + "<div><ul>\n"
                                    + "<li><a href=\"/burp-keycert.pem.cer\">Certificate and Private key in PEM format</a></li>\n"
                                    + "<li><a href=\"/burp-cert.pem.cer\">Certificate in PEM format</a></li>\n"
                                    + "<li><a href=\"/burp-private-key.der\">Private key in DER format</a></li>\n"
                                    + "<li><a href=\"/burp-cert.der\">Certificate in DER format</a></li>\n"
                                    + "</ul></div>\n"
                                    + "</body>\n"
                                    + "</html>").setResponseCode(200);
                } else if ("/burp-keycert.pem.cer".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BouncyUtil.exportCertificatePem(cert.getKey(), cert.getValue());
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-keycert.pem.cer\"")
                            .setBody(exportCA).setResponseCode(200);
                } else if ("/burp-cert.pem.cer".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    String exportCA = BouncyUtil.exportCertificatePem(cert.getValue());
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-cert.pem.cer\"")
                            .setBody(exportCA).setResponseCode(200);
                } else if ("/burp-private-key.der".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    byte[] exportCA = BouncyUtil.exportPrivateKeyDer(cert.getKey());
                    Buffer buffer = new Buffer();
                    buffer.write(exportCA);
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-private-key.der\"")
                            .setBody(buffer).setResponseCode(200);
                } else if ("/burp-cert.der".equals(request.getPath())) {
                    Map.Entry<Key, X509Certificate> cert = getExportCerticate();
                    byte[] exportCA = BouncyUtil.exportCertificateDer(cert.getValue());
                    Buffer buffer = new Buffer();
                    buffer.write(exportCA);
                    return new MockResponse()
                            .addHeader("Content-Type", "application/octet-stream; " + "charset=utf-8")
                            .addHeader("Content-Disposition", "attachment; filename=\"burp-cert.der\"")
                            .setBody(buffer).setResponseCode(200);
                }
            } catch (IOException ex) {
                return new MockResponse().setResponseCode(500).setBody(StringUtil.getStackTrace(ex));
            }
            return new MockResponse().setResponseCode(404);
        }
    };

    private Map.Entry<Key, X509Certificate> getExportCerticate() {
        Map.Entry<Key, X509Certificate> cert = null;
        HashMap<String, Map.Entry<Key, X509Certificate>> mapCert = null;
        try {
            if (this.rdoBurpCA.isSelected()) {
                KeyStore ks = BurpPreferences.loadCACeart();
                mapCert = CertUtil.loadFromKeyStore(ks, BurpPreferences.getCAPassword());
            } else {
                CertificateItem item = getEditItem();
                if (item == null) {
                    JOptionPane.showMessageDialog(this, BUNDLE.getString("view.certificate.noselect"), "Certificate", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    mapCert = CertUtil.loadFromKeyStore(item.getClientCertificate(), item.getClientCertificatePasswd(), item.getStoreType());
                }
            }
            if (mapCert != null) {
                for (String ailias : mapCert.keySet()) {
                    cert = mapCert.get(ailias);
                    break;
                }
            }
        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return cert;
    }

    private final ImportCertificatetDlg importCertificatetDlg = new ImportCertificatetDlg(null, true);

    private final CertificateItem certProp = new CertificateItem();

    private void showImportCertificatetDlg() {
        this.importCertificatetDlg.setLocationRelativeTo(this);
        this.importCertificatetDlg.setVisible(true);
        if (this.importCertificatetDlg.getModalResult() == JOptionPane.OK_OPTION) {
            CertificateItem prop = this.importCertificatetDlg.getProperty();
            this.certProp.setProperty(prop);
            this.setEditItem(this.certProp, false);
        }
    }

    private File currentCertificateDirectory = null;

    private void btnExportCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportCAActionPerformed
        Map.Entry<Key, X509Certificate> cert = this.getExportCerticate();
        if (cert != null) {
            try {
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                filechooser.setCurrentDirectory(this.currentCertificateDirectory);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoConvertPairPEM.isSelected()) {
                        BouncyUtil.storeCertificatePem(cert.getKey(), cert.getValue(), saveFile);
                    } else if (this.rdoConvertCertificatePEM.isSelected()) {
                        BouncyUtil.storeCertificatePem(cert.getValue(), saveFile);
                    } else if (this.rdoConvertCertificateDER.isSelected()) {
                        BouncyUtil.storeCertificateDer(cert.getValue(), saveFile);
                    } else if (this.rdoConvertPrivateDER.isSelected()) {
                        BouncyUtil.storeCertificateDer(cert.getKey(), saveFile);
                    }
                    this.currentCertificateDirectory = saveFile.getParentFile();
                    //String output = CertUtil.exportToPem(cert.getKey(), cert.getValue());
                    //FileUtil.bytesToFile(StringUtil.getBytesRaw(output), pemFile);
                }
            } catch (IOException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
    }//GEN-LAST:event_btnExportCAActionPerformed

    private void btnProvidedServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvidedServerActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            if (this.mockServer != null) {
                startMockServer((int) this.spnListenPort.getValue());
            }
        } else {
            this.stopMockServer();
        }
    }//GEN-LAST:event_btnProvidedServerActionPerformed

    private void chkProvidedServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkProvidedServerStateChanged
        SwingUtil.setContainerEnable(this.pnlListenPort, this.chkProvidedServer.isSelected());
        if (!this.chkProvidedServer.isSelected()) {
            this.btnProvidedServer.setSelected(false);
            btnProvidedServerActionPerformed(null);
        }
    }//GEN-LAST:event_chkProvidedServerStateChanged

    private void spnListenPortStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnListenPortStateChanged

    }//GEN-LAST:event_spnListenPortStateChanged

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        if (this.btnProvidedServer.isSelected()) {
            SwingUtil.systemClipboardCopy(this.mockServer.url("/").url().toExternalForm());
        }
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnSelectExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExecuteActionPerformed
        this.showImportCertificatetDlg();
    }//GEN-LAST:event_btnSelectExecuteActionPerformed

    private void rdoCustomCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCustomCAActionPerformed
//        SwingUtil.setContainerEnable(this.pnlCertificateExports, this.rdoCustomCA.isSelected());
        this.tableCertificate.setEnabled(this.rdoCustomCA.isSelected());
    }//GEN-LAST:event_rdoCustomCAActionPerformed

    private void rdoBurpCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoBurpCAActionPerformed
        rdoCustomCAActionPerformed(evt);
    }//GEN-LAST:event_rdoBurpCAActionPerformed

    private void btnExportIssuerCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportIssuerCAActionPerformed
        try {
            org.bouncycastle.asn1.x500.X500NameBuilder subjectDN = new org.bouncycastle.asn1.x500.X500NameBuilder();
            StringBuilder errorMessage = new StringBuilder();
            if (!this.txtCommonName.getText().trim().isEmpty()) {
                subjectDN.addRDN(BCStyle.CN, this.txtCommonName.getText().trim());
            }
            else {
                if (!errorMessage.isEmpty()) errorMessage.append("/");
                errorMessage.append("CN");
            }
            if (!this.txtOrganizationName.getText().trim().isEmpty()) {
                subjectDN.addRDN(BCStyle.O, this.txtOrganizationName.getText().trim());
            }
            else {
                if (!errorMessage.isEmpty()) errorMessage.append("/");
                errorMessage.append("O");
            }
            if (!this.txtLoccalityName.getText().isEmpty()) {
                subjectDN.addRDN(BCStyle.L, this.txtLoccalityName.getText().trim());
            }
            else {
               if (!errorMessage.isEmpty()) errorMessage.append("/");
                errorMessage.append("L");
            }
            if (!this.txtCountry.getText().trim().isEmpty()) {
                subjectDN.addRDN(BCStyle.C, this.txtCountry.getText().trim());
            }
            else {
                if (!errorMessage.isEmpty()) errorMessage.append("/");
                errorMessage.append("C");
            }
            if (errorMessage.length() > 0) {
                JOptionPane.showMessageDialog(this, String.format("Empty is %s", errorMessage.toString()), "Certificate", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
                keyGen.initialize(2048);
                KeyPair caKeyPair = keyGen.generateKeyPair();
                X509Certificate issuerCA = BouncyUtil.createRootCA(caKeyPair, subjectDN.build(), (int)spnYear.getValue());
                JFileChooser filechooser = new JFileChooser();
                filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int selected = filechooser.showSaveDialog(this);
                if (selected == JFileChooser.APPROVE_OPTION) {
                    File saveFile = filechooser.getSelectedFile();
                    if (this.rdoExportIssuPairPEM.isSelected()) {
                        BouncyUtil.storeCertificatePem(caKeyPair.getPrivate(), issuerCA, saveFile);
                    } else if (this.rdoExportIssuPairPKCS12.isSelected()) {
                        if (this.txtPKCS12Password.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Empty is password", "Certificate", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else {
                            CertUtil.storeToPKCS12(saveFile, this.txtPKCS12Password.getText(), "caCert", caKeyPair.getPrivate(), issuerCA);
                        }
                    }
                }
            }
        } catch (NoSuchAlgorithmException | CertificateException | IOException | KeyStoreException | UnrecoverableKeyException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_btnExportIssuerCAActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnExportCA;
    private javax.swing.JButton btnExportIssuerCA;
    private javax.swing.ButtonGroup btnGrpCA;
    private javax.swing.ButtonGroup btnGrpExportCertificate;
    private javax.swing.ButtonGroup btnGrpExportIssuerCA;
    private javax.swing.ButtonGroup btnGrpFormat;
    private javax.swing.JToggleButton btnProvidedServer;
    private javax.swing.JButton btnSelectExecute;
    private javax.swing.JCheckBox chkProvidedServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCommonName;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblListenPort;
    private javax.swing.JLabel lblLoccalityName;
    private javax.swing.JLabel lblOrganizationName;
    private javax.swing.JPanel pnlCertificate;
    private javax.swing.JPanel pnlCertificateCA;
    private javax.swing.JPanel pnlCertificateExports;
    private javax.swing.JPanel pnlConvertFormat;
    private javax.swing.JPanel pnlGenerateCA;
    private javax.swing.JPanel pnlListenPort;
    private javax.swing.JPanel pnlSelectCertificate;
    private javax.swing.JPanel pnlServerCertificate;
    private javax.swing.JPanel pnlServerEnable;
    private javax.swing.JRadioButton rdoBurpCA;
    private javax.swing.JRadioButton rdoConvertCertificateDER;
    private javax.swing.JRadioButton rdoConvertCertificatePEM;
    private javax.swing.JRadioButton rdoConvertPairPEM;
    private javax.swing.JRadioButton rdoConvertPrivateDER;
    private javax.swing.JRadioButton rdoCustomCA;
    private javax.swing.JRadioButton rdoExportIssuPairPEM;
    private javax.swing.JRadioButton rdoExportIssuPairPKCS12;
    private javax.swing.JScrollPane scrollCertificate;
    private javax.swing.JSpinner spnListenPort;
    private javax.swing.JSpinner spnYear;
    private javax.swing.JTabbedPane tabGenerate;
    private javax.swing.JTable tableCertificate;
    private javax.swing.JTextField txtCommonName;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtLoccalityName;
    private javax.swing.JTextField txtOrganizationName;
    private javax.swing.JTextField txtPKCS12Password;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Certificate";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    private CertificateItem getEditItem() {
        CertificateItem item = null;
        Object editRows[] = SwingUtil.editItem(this.tableCertificate);
        if (editRows != null) {
            item = CertificateItem.fromObjects(editRows);
        }
        return item;
    }

    private void setEditItem(CertificateItem item, boolean update) {
        Object[] rows = CertificateItem.toObjects(item);
        SwingUtil.addOrUpdateItem(this.tableCertificate, rows, update);
    }

    private MockWebServer mockServer = new MockWebServer();

    protected void startMockServer(int port) {
        try {
            this.mockServer.start(port);
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    protected void stopMockServer() {
        try {
            this.mockServer.shutdown();
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

}
