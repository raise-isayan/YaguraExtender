package yagura.view;

import extension.helpers.SwingUtil;
import yagura.model.SendToArgsProperty;
import extension.view.base.CustomTableModel;
import extension.view.base.JMultilineLabel;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author isayan
 */
public class SendToArgParamsPanel extends javax.swing.JPanel {

    private final static Logger logger = Logger.getLogger(SendToArgParamsPanel.class.getName());

    /**
     * Creates new form SendToArgs
     */
    public SendToArgParamsPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chkOverrideSendToArgs = new javax.swing.JCheckBox();
        pnlSendToArgs = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSendToArgs = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        pnlHelpNote = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(550, 600));
        setLayout(new java.awt.BorderLayout());

        chkOverrideSendToArgs.setText("override send to args");
        chkOverrideSendToArgs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkOverrideSendToArgsStateChanged(evt);
            }
        });
        add(chkOverrideSendToArgs, java.awt.BorderLayout.NORTH);

        pnlSendToArgs.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnlSendToArgs.setPreferredSize(new java.awt.Dimension(500, 200));

        tableSendToArgs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Args"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSendToArgs.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tableSendToArgs);
        tableSendToArgs.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnEdit.setText("Multi Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSendToArgsLayout = new javax.swing.GroupLayout(pnlSendToArgs);
        pnlSendToArgs.setLayout(pnlSendToArgsLayout);
        pnlSendToArgsLayout.setHorizontalGroup(
            pnlSendToArgsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToArgsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlSendToArgsLayout.setVerticalGroup(
            pnlSendToArgsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToArgsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSendToArgsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(pnlSendToArgs, java.awt.BorderLayout.CENTER);

        pnlHelpNote.setMaximumSize(new java.awt.Dimension(32767, 32767));
        pnlHelpNote.setPreferredSize(new java.awt.Dimension(500, 250));
        pnlHelpNote.setLayout(new java.awt.BorderLayout());
        add(pnlHelpNote, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new javax.swing.JFrame();
                SendToArgParamsPanel panel = new SendToArgParamsPanel();
                frame.add(panel);
                frame.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

    private final String FORMAT_NOTE = "%H: will be replaced with the host\n" +
                                        "%P: will be replaced with the port\n" +
                                        "%T: will be replaced with the protocol\n" +
                                        "%U: will be replaced with the url\n" +
                                        "%A: will be replaced with the url path\n" +
                                        "%Q: will be replaced with the url query\n" +
                                        "%C: will be replaced with the cookies\n" +
                                        "%M: will be replaced with the HTTP-method\n" +
                                        "%S: will be replaced with the selected text\n" +
                                        "%F: will be replaced with the path to a temporary file containing the selected text\n" +
                                        "%R: will be replaced with the path to a temporary file containing the content of the focused request/response\n" +
                                        "%N: will be replaced with the notes";


    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        this.showMultiLineDlg();
    }//GEN-LAST:event_btnEditActionPerformed

    private void chkOverrideSendToArgsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkOverrideSendToArgsStateChanged
        SwingUtil.setContainerEnable(this.pnlSendToArgs, this.chkOverrideSendToArgs.isSelected());
    }//GEN-LAST:event_chkOverrideSendToArgsStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JCheckBox chkOverrideSendToArgs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlHelpNote;
    private javax.swing.JPanel pnlSendToArgs;
    private javax.swing.JTable tableSendToArgs;
    // End of variables declaration//GEN-END:variables

    private CustomTableModel modelSendToArgs;

    private void customizeComponents() {
        this.modelSendToArgs = new CustomTableModel(this.tableSendToArgs.getModel());
        this.tableSendToArgs.setModel(this.modelSendToArgs);
        JMultilineLabel ml = new JMultilineLabel();
        ml.setText(FORMAT_NOTE);
        this.pnlHelpNote.add(ml, BorderLayout.CENTER);
    }

    public SendToArgsProperty getSendToOverrideProperty() {
        SendToArgsProperty prop = new SendToArgsProperty();
        prop.setUseOverride(this.chkOverrideSendToArgs.isSelected());
        List<String> argsList = this.getEditItemList();
        prop.setArgsList(argsList);
        return prop;
    }

    public void setProperty(SendToArgsProperty prop) {
        this.chkOverrideSendToArgs.setSelected(prop.isUseOverride());
        this.setEditItemList(prop.getArgsList());
    }

    private String getEditItem() {
        String item = null;
        Object editCols[] = SwingUtil.editItem(this.tableSendToArgs);
        if (editCols != null) {
            item = (String)editCols[0];
        }
        return item;
    }

    private void setEditItem(String item, boolean update) {
        Object[] cols = new Object[] { item };
        SwingUtil.addOrUpdateItem(this.tableSendToArgs, cols, update);
    }

    private void removeItem() {
        SwingUtil.removeItem(this.tableSendToArgs);
    }

    private List<String> getEditItemList() {
       List<String> argsList = new ArrayList<>();
        for (int i = 0; i < this.modelSendToArgs.getRowCount(); i++) {
            Object rows[] = this.modelSendToArgs.getRows(i);
            argsList.add((String)rows[0]);
        }
        return argsList;
    }

    private void setEditItemList(final List<String> argsList) {
        this.modelSendToArgs.removeAll();
        for (int i = 0; i < argsList.size(); i++) {
            Object editCols[] = new Object [] { argsList.get(i) } ;
            this.modelSendToArgs.addRow(editCols);
        }
    }

    private final MultiItemDlg multiItemDlg = new MultiItemDlg(null, true);

    private void showMultiLineDlg() {
        try {
            List<String> ml = getEditItemList();
            this.multiItemDlg.setProtocolMode(false);
            this.multiItemDlg.setLocationRelativeTo(this);
            this.multiItemDlg.setMultiLine(ml.toArray(String[]::new));
            this.multiItemDlg.setVisible(true);
            if (this.multiItemDlg.getModalResult() == JOptionPane.OK_OPTION) {
                String[] lines = this.multiItemDlg.getMultiLine();
                this.setEditItemList(List.of(lines));
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }


}
