package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.proxy.ProxyHttpRequestResponse;
import extension.burp.BurpConfig;
import extension.burp.BurpExtensionImpl;
import static extension.burp.BurpExtensionImpl.api;
import extension.burp.BurpUtil;
import extension.burp.FilterProperty;
import extension.burp.MessageHighlightColor;
import extension.helpers.ConvertUtil;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.view.base.CustomDialog;
import extension.view.base.JavaSyntaxDocument;
import extension.view.layout.VerticalFlowLayout;
import java.net.HttpURLConnection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author isayan
 */
public class ResultFilterDlg extends CustomDialog {

    private final static Logger logger = Logger.getLogger(ResultFilterDlg.class.getName());
    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form ResultFilterDlg
     */
    public ResultFilterDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        tabbetFilter = new javax.swing.JTabbedPane();
        pnlSettings = new javax.swing.JPanel();
        pnlColum = new javax.swing.JPanel();
        pnlAnnotations = new javax.swing.JPanel();
        pnlAnnotation = new javax.swing.JPanel();
        chkShowOnlyComment = new javax.swing.JCheckBox();
        chkShowOnlyHighlight = new javax.swing.JCheckBox();
        pnlHighlightColor = new javax.swing.JPanel();
        chkWhite = new javax.swing.JCheckBox();
        chkRed = new javax.swing.JCheckBox();
        chkOrange = new javax.swing.JCheckBox();
        chkYellow = new javax.swing.JCheckBox();
        chkGreen = new javax.swing.JCheckBox();
        chkCyan = new javax.swing.JCheckBox();
        chkBlue = new javax.swing.JCheckBox();
        chkPink = new javax.swing.JCheckBox();
        chkMagenta = new javax.swing.JCheckBox();
        chkGray = new javax.swing.JCheckBox();
        pnlBottom = new javax.swing.JPanel();
        pnlListenerPort = new javax.swing.JPanel();
        txtLiistenerPort = new javax.swing.JTextField();
        lblListenerPort = new javax.swing.JLabel();
        pnlCenter = new javax.swing.JPanel();
        pnlHttp = new javax.swing.JPanel();
        pnlExtension = new javax.swing.JPanel();
        txtHide = new javax.swing.JTextField();
        chkHide = new javax.swing.JCheckBox();
        chkShowOnly = new javax.swing.JCheckBox();
        txtShowOnly = new javax.swing.JTextField();
        pnlFilterSearchItem = new javax.swing.JPanel();
        txtMethod = new javax.swing.JTextField();
        chkReqRegExp = new javax.swing.JCheckBox();
        chkReqIgnoreCase = new javax.swing.JCheckBox();
        txtRequest = new javax.swing.JTextField();
        lblMethod = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        lblRequest = new javax.swing.JLabel();
        lblPath = new javax.swing.JLabel();
        txtResponse = new javax.swing.JTextField();
        lblResponse = new javax.swing.JLabel();
        chkResRegExp = new javax.swing.JCheckBox();
        chkResIgnoreCase = new javax.swing.JCheckBox();
        pnlHeader = new javax.swing.JPanel();
        pnlFilterByRequest = new javax.swing.JPanel();
        chkShowOnlyinscopeItem = new javax.swing.JCheckBox();
        chkHideItemsWithoutResponses = new javax.swing.JCheckBox();
        chkShowOnlyParameterizedRequests = new javax.swing.JCheckBox();
        chkShowOnlyEditedMessage = new javax.swing.JCheckBox();
        pnlStatus = new javax.swing.JPanel();
        chkStat2xx = new javax.swing.JCheckBox();
        chkStat3xx = new javax.swing.JCheckBox();
        chkStat4xx = new javax.swing.JCheckBox();
        chkStat5xx = new javax.swing.JCheckBox();
        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        btnConvertBambda = new javax.swing.JButton();
        btnImportBambda = new javax.swing.JButton();
        pnlName = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setMinimumSize(new java.awt.Dimension(540, 450));
        pnlMain.setName(""); // NOI18N
        pnlMain.setPreferredSize(new java.awt.Dimension(540, 520));
        pnlMain.setLayout(new java.awt.BorderLayout());

        tabbetFilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbetFilterStateChanged(evt);
            }
        });

        pnlSettings.setLayout(new java.awt.BorderLayout());

        pnlColum.setLayout(new java.awt.BorderLayout());

        pnlAnnotations.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by Annotations"));
        pnlAnnotations.setLayout(new java.awt.BorderLayout());

        pnlAnnotation.setLayout(new javax.swing.BoxLayout(pnlAnnotation, javax.swing.BoxLayout.PAGE_AXIS));

        chkShowOnlyComment.setText("Show only comment");
        chkShowOnlyComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyCommentActionPerformed(evt);
            }
        });
        pnlAnnotation.add(chkShowOnlyComment);

        chkShowOnlyHighlight.setText("Show only highlight");
        chkShowOnlyHighlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyHighlightActionPerformed(evt);
            }
        });
        pnlAnnotation.add(chkShowOnlyHighlight);

        pnlAnnotations.add(pnlAnnotation, java.awt.BorderLayout.NORTH);

        pnlHighlightColor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Highlight Color")));
        pnlHighlightColor.setMinimumSize(new java.awt.Dimension(151, 500));
        pnlHighlightColor.setPreferredSize(new java.awt.Dimension(151, 500));
        pnlHighlightColor.setLayout(new javax.swing.BoxLayout(pnlHighlightColor, javax.swing.BoxLayout.Y_AXIS));

        chkWhite.setText("white (none)");
        pnlHighlightColor.add(chkWhite);

        chkRed.setText("red");
        pnlHighlightColor.add(chkRed);

        chkOrange.setText("orange");
        pnlHighlightColor.add(chkOrange);

        chkYellow.setText("yellow");
        chkYellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkYellowActionPerformed(evt);
            }
        });
        pnlHighlightColor.add(chkYellow);

        chkGreen.setText("green");
        pnlHighlightColor.add(chkGreen);

        chkCyan.setText("cyan");
        pnlHighlightColor.add(chkCyan);

        chkBlue.setText("blue");
        pnlHighlightColor.add(chkBlue);

        chkPink.setText("pink");
        pnlHighlightColor.add(chkPink);

        chkMagenta.setText("magenta");
        pnlHighlightColor.add(chkMagenta);

        chkGray.setText("gray");
        pnlHighlightColor.add(chkGray);

        pnlAnnotations.add(pnlHighlightColor, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.BorderLayout());

        pnlListenerPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by listener "));

        lblListenerPort.setText("Port");

        javax.swing.GroupLayout pnlListenerPortLayout = new javax.swing.GroupLayout(pnlListenerPort);
        pnlListenerPort.setLayout(pnlListenerPortLayout);
        pnlListenerPortLayout.setHorizontalGroup(
            pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenerPortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLiistenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        pnlListenerPortLayout.setVerticalGroup(
            pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListenerPortLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlListenerPortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListenerPort)
                    .addComponent(txtLiistenerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlBottom.add(pnlListenerPort, java.awt.BorderLayout.SOUTH);

        pnlAnnotations.add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pnlColum.add(pnlAnnotations, java.awt.BorderLayout.CENTER);

        pnlSettings.add(pnlColum, java.awt.BorderLayout.EAST);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        pnlHttp.setMinimumSize(new java.awt.Dimension(217, 300));
        pnlHttp.setName(""); // NOI18N
        pnlHttp.setPreferredSize(new java.awt.Dimension(500, 300));
        pnlHttp.setLayout(new javax.swing.BoxLayout(pnlHttp, javax.swing.BoxLayout.PAGE_AXIS));

        pnlExtension.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filter by extension")));

        chkHide.setText("hide:");
        chkHide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkHideStateChanged(evt);
            }
        });

        chkShowOnly.setText("show only:");
        chkShowOnly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkShowOnlyStateChanged(evt);
            }
        });
        chkShowOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyActionPerformed(evt);
            }
        });

        txtShowOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowOnlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlExtensionLayout = new javax.swing.GroupLayout(pnlExtension);
        pnlExtension.setLayout(pnlExtensionLayout);
        pnlExtensionLayout.setHorizontalGroup(
            pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkShowOnly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkHide, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtShowOnly)
                    .addComponent(txtHide, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(251, Short.MAX_VALUE))
        );
        pnlExtensionLayout.setVerticalGroup(
            pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExtensionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkShowOnly)
                    .addComponent(txtShowOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlExtensionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkHide))
                .addContainerGap())
        );

        pnlHttp.add(pnlExtension);

        pnlFilterSearchItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by Search Item"));
        pnlFilterSearchItem.setMinimumSize(new java.awt.Dimension(663, 400));
        pnlFilterSearchItem.setPreferredSize(new java.awt.Dimension(663, 400));

        chkReqRegExp.setSelected(true);
        chkReqRegExp.setText("RegExp");
        chkReqRegExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReqRegExpActionPerformed(evt);
            }
        });

        chkReqIgnoreCase.setText("IgnoreCase");
        chkReqIgnoreCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReqIgnoreCaseActionPerformed(evt);
            }
        });

        lblMethod.setText("Method:");

        lblRequest.setText("Request:");

        lblPath.setText("Path:");

        lblResponse.setText("Response:");

        chkResRegExp.setSelected(true);
        chkResRegExp.setText("RegExp");
        chkResRegExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkResRegExpActionPerformed(evt);
            }
        });

        chkResIgnoreCase.setText("IgnoreCase");

        javax.swing.GroupLayout pnlFilterSearchItemLayout = new javax.swing.GroupLayout(pnlFilterSearchItem);
        pnlFilterSearchItem.setLayout(pnlFilterSearchItemLayout);
        pnlFilterSearchItemLayout.setHorizontalGroup(
            pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMethod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblResponse, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(lblRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFilterSearchItemLayout.createSequentialGroup()
                        .addComponent(txtResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkResRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkResIgnoreCase))
                    .addGroup(pnlFilterSearchItemLayout.createSequentialGroup()
                        .addComponent(txtRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReqRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReqIgnoreCase)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        pnlFilterSearchItemLayout.setVerticalGroup(
            pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterSearchItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMethod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPath)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRequest)
                    .addComponent(txtRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkReqRegExp)
                    .addComponent(chkReqIgnoreCase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkResRegExp)
                        .addComponent(chkResIgnoreCase))
                    .addGroup(pnlFilterSearchItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblResponse)))
                .addContainerGap())
        );

        pnlHttp.add(pnlFilterSearchItem);

        pnlCenter.add(pnlHttp, java.awt.BorderLayout.CENTER);

        pnlHeader.setLayout(new java.awt.BorderLayout());

        pnlFilterByRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter by request type"));
        pnlFilterByRequest.setLayout(new javax.swing.BoxLayout(pnlFilterByRequest, javax.swing.BoxLayout.Y_AXIS));

        chkShowOnlyinscopeItem.setText("Show only in-scope items");
        pnlFilterByRequest.add(chkShowOnlyinscopeItem);

        chkHideItemsWithoutResponses.setText("Hide items without responses");
        pnlFilterByRequest.add(chkHideItemsWithoutResponses);

        chkShowOnlyParameterizedRequests.setText("Show only parameterized requests");
        chkShowOnlyParameterizedRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyParameterizedRequestsActionPerformed(evt);
            }
        });
        pnlFilterByRequest.add(chkShowOnlyParameterizedRequests);

        chkShowOnlyEditedMessage.setText("Show only edited message");
        chkShowOnlyEditedMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyEditedMessageActionPerformed(evt);
            }
        });
        pnlFilterByRequest.add(chkShowOnlyEditedMessage);

        pnlHeader.add(pnlFilterByRequest, java.awt.BorderLayout.CENTER);

        pnlStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status Filter"));
        pnlStatus.setMaximumSize(new java.awt.Dimension(133, 110));
        pnlStatus.setMinimumSize(new java.awt.Dimension(133, 110));
        pnlStatus.setPreferredSize(new java.awt.Dimension(200, 130));
        pnlStatus.setRequestFocusEnabled(false);
        pnlStatus.setLayout(new javax.swing.BoxLayout(pnlStatus, javax.swing.BoxLayout.Y_AXIS));

        chkStat2xx.setText("2xx [success]");
        pnlStatus.add(chkStat2xx);

        chkStat3xx.setText("3xx [redirection]");
        pnlStatus.add(chkStat3xx);

        chkStat4xx.setText("4xx [request error]");
        pnlStatus.add(chkStat4xx);

        chkStat5xx.setText("5xx [server error]");
        chkStat5xx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStat5xxActionPerformed(evt);
            }
        });
        pnlStatus.add(chkStat5xx);

        pnlHeader.add(pnlStatus, java.awt.BorderLayout.EAST);

        pnlCenter.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlSettings.add(pnlCenter, java.awt.BorderLayout.CENTER);

        tabbetFilter.addTab("Settings", pnlSettings);

        pnlMain.add(tabbetFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnConvertBambda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_switch.png"))); // NOI18N
        btnConvertBambda.setText("Convert to Bambda");
        btnConvertBambda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertBambdaActionPerformed(evt);
            }
        });

        btnImportBambda.setText("Import Bambda");
        btnImportBambda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportBambdaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnConvertBambda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImportBambda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 457, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK)
                    .addComponent(btnConvertBambda)
                    .addComponent(btnImportBambda))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        lblName.setText("Name:");

        javax.swing.GroupLayout pnlNameLayout = new javax.swing.GroupLayout(pnlName);
        pnlName.setLayout(pnlNameLayout);
        pnlNameLayout.setHorizontalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(484, Short.MAX_VALUE))
        );
        pnlNameLayout.setVerticalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(pnlName, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final EditorKit javaStyleEditorKit = new StyledEditorKit() {
        @Override
        public Document createDefaultDocument() {
            return new JavaSyntaxDocument();
        }
    };

    private javax.swing.JPanel pnlBambda = new javax.swing.JPanel();
    private javax.swing.JScrollPane scrollBabda = new javax.swing.JScrollPane();
    private javax.swing.JEditorPane txtBambda = new javax.swing.JEditorPane();

    private void customizeComponents() {
        this.scrollBabda.setViewportView(this.txtBambda);

        this.txtBambda.setEditorKitForContentType("text/java", this.javaStyleEditorKit);
        this.txtBambda.setContentType("text/java");

        this.pnlBambda.setLayout(new java.awt.BorderLayout());
        this.scrollBabda.setViewportView(this.txtBambda);
        this.pnlBambda.add(scrollBabda, java.awt.BorderLayout.CENTER);
        this.tabbetFilter.addTab("Bambda", this.pnlBambda);

        this.pnlFilterByRequest.setLayout(new VerticalFlowLayout());
        this.pnlAnnotation.setLayout(new VerticalFlowLayout());
        this.pnlHighlightColor.setLayout(new VerticalFlowLayout());
        this.pnlStatus.setLayout(new VerticalFlowLayout());

        this.chkShowOnlyHighlightActionPerformed(null);
    }

    private void txtShowOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowOnlyActionPerformed

    }//GEN-LAST:event_txtShowOnlyActionPerformed

    private void chkShowOnlyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkShowOnlyStateChanged
        this.chkHide.setEnabled(!this.chkShowOnly.isSelected());
    }//GEN-LAST:event_chkShowOnlyStateChanged

    private void chkStat5xxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStat5xxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkStat5xxActionPerformed

    private void chkShowOnlyCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyCommentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyCommentActionPerformed

    private void chkShowOnlyParameterizedRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyParameterizedRequestsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyParameterizedRequestsActionPerformed

    private void chkShowOnlyHighlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyHighlightActionPerformed
        SwingUtil.setContainerEnable(this.pnlHighlightColor, this.chkShowOnlyHighlight.isSelected());
    }//GEN-LAST:event_chkShowOnlyHighlightActionPerformed

    private void chkReqRegExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReqRegExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReqRegExpActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if (this.getEditMode() && this.getFilterName().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.resultfilter.ok.name.empty"), "ResultFilter", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void chkResRegExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkResRegExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkResRegExpActionPerformed

    private void chkShowOnlyEditedMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyEditedMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyEditedMessageActionPerformed

    private void chkShowOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkShowOnlyActionPerformed

    private void chkYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkYellowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkYellowActionPerformed

    private void chkReqIgnoreCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReqIgnoreCaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReqIgnoreCaseActionPerformed

    private void btnConvertBambdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertBambdaActionPerformed
        FilterProperty filter = this.getProperty();
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(filter.build());
    }//GEN-LAST:event_btnConvertBambdaActionPerformed

    private void tabbetFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbetFilterStateChanged
        this.btnConvertBambda.setVisible(this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Settings"));
    }//GEN-LAST:event_tabbetFilterStateChanged

    private void chkHideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkHideStateChanged
        this.chkShowOnly.setEnabled(!this.chkHide.isSelected());
    }//GEN-LAST:event_chkHideStateChanged

    private void btnImportBambdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportBambdaActionPerformed
        String bambda = BurpConfig.getBambda(BurpExtension.api());
        this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        this.txtBambda.setText(bambda);
    }//GEN-LAST:event_btnImportBambdaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultFilterDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultFilterDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultFilterDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultFilterDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ResultFilterDlg dialog = new ResultFilterDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConvertBambda;
    private javax.swing.JButton btnImportBambda;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox chkBlue;
    private javax.swing.JCheckBox chkCyan;
    private javax.swing.JCheckBox chkGray;
    private javax.swing.JCheckBox chkGreen;
    private javax.swing.JCheckBox chkHide;
    private javax.swing.JCheckBox chkHideItemsWithoutResponses;
    private javax.swing.JCheckBox chkMagenta;
    private javax.swing.JCheckBox chkOrange;
    private javax.swing.JCheckBox chkPink;
    private javax.swing.JCheckBox chkRed;
    private javax.swing.JCheckBox chkReqIgnoreCase;
    private javax.swing.JCheckBox chkReqRegExp;
    private javax.swing.JCheckBox chkResIgnoreCase;
    private javax.swing.JCheckBox chkResRegExp;
    private javax.swing.JCheckBox chkShowOnly;
    private javax.swing.JCheckBox chkShowOnlyComment;
    private javax.swing.JCheckBox chkShowOnlyEditedMessage;
    private javax.swing.JCheckBox chkShowOnlyHighlight;
    private javax.swing.JCheckBox chkShowOnlyParameterizedRequests;
    private javax.swing.JCheckBox chkShowOnlyinscopeItem;
    private javax.swing.JCheckBox chkStat2xx;
    private javax.swing.JCheckBox chkStat3xx;
    private javax.swing.JCheckBox chkStat4xx;
    private javax.swing.JCheckBox chkStat5xx;
    private javax.swing.JCheckBox chkWhite;
    private javax.swing.JCheckBox chkYellow;
    private javax.swing.JLabel lblListenerPort;
    private javax.swing.JLabel lblMethod;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPath;
    private javax.swing.JLabel lblRequest;
    private javax.swing.JLabel lblResponse;
    private javax.swing.JPanel pnlAnnotation;
    private javax.swing.JPanel pnlAnnotations;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlColum;
    private javax.swing.JPanel pnlExtension;
    private javax.swing.JPanel pnlFilterByRequest;
    private javax.swing.JPanel pnlFilterSearchItem;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlHighlightColor;
    private javax.swing.JPanel pnlHttp;
    private javax.swing.JPanel pnlListenerPort;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlName;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JTabbedPane tabbetFilter;
    private javax.swing.JTextField txtHide;
    private javax.swing.JTextField txtLiistenerPort;
    private javax.swing.JTextField txtMethod;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtRequest;
    private javax.swing.JTextField txtResponse;
    private javax.swing.JTextField txtShowOnly;
    // End of variables declaration//GEN-END:variables

    public void setProperty(FilterProperty filterProp) {
        if (filterProp.getFilterMode() == FilterProperty.FilterMode.SETTING) {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        } else {
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Bambda"));
        }
        this.txtLiistenerPort.setText(filterProp.getListenerPort() > -1 ? Integer.toString(filterProp.getListenerPort()) : "");
        this.chkShowOnlyinscopeItem.setSelected(filterProp.isShowOnlyScopeItems());
        this.chkHideItemsWithoutResponses.setSelected(filterProp.isHideItemsWithoutResponses());
        this.chkShowOnlyParameterizedRequests.setSelected(filterProp.isShowOnlyParameterizedRequests());
        this.chkShowOnlyEditedMessage.setSelected(filterProp.isShowOnlyEditedMessage());

        this.chkShowOnly.setSelected(filterProp.getShowOnly());
        this.txtShowOnly.setText(filterProp.getShowOnlyExtension());
        this.chkHide.setSelected(filterProp.getHide());
        this.txtHide.setText(filterProp.getHideExtension());

        this.chkStat2xx.getModel().setSelected(filterProp.getStat2xx());
        this.chkStat3xx.getModel().setSelected(filterProp.getStat3xx());
        this.chkStat4xx.getModel().setSelected(filterProp.getStat4xx());
        this.chkStat5xx.getModel().setSelected(filterProp.getStat5xx());

        this.chkShowOnlyComment.setSelected(filterProp.getShowOnlyComment());
        this.chkShowOnlyHighlight.setSelected(filterProp.getShowOnlyHighlightColors());
        this.setHighlightColors(filterProp.getHighlightColors());

        this.txtMethod.setText(filterProp.getMethod());
        this.txtPath.setText(filterProp.getPath());
        this.txtRequest.setText(filterProp.getRequest());
        this.chkReqRegExp.setSelected(filterProp.isRequestRegex());
        this.chkReqIgnoreCase.setSelected(filterProp.isRequestIgnoreCase());
        this.txtResponse.setText(filterProp.getResponse());
        this.chkResRegExp.setSelected(filterProp.isResponseRegex());
        this.chkResIgnoreCase.setSelected(filterProp.isResponseIgnoreCase());
        this.txtBambda.setText(filterProp.getBambdaQuery());

        this.chkShowOnlyHighlightActionPerformed(null);
    }

    public FilterProperty getProperty() {
        FilterProperty filterProp = new FilterProperty();
        if (this.tabbetFilter.getSelectedIndex() == this.tabbetFilter.indexOfTab("Settings")) {
            filterProp.setFilterMode(FilterProperty.FilterMode.SETTING);
        } else {
            filterProp.setFilterMode(FilterProperty.FilterMode.BAMBDA);
        }
        filterProp.setListenerPort(ConvertUtil.parseIntDefault(this.txtLiistenerPort.getText(), -1));
        filterProp.setShowOnlyScopeItems(this.chkShowOnlyinscopeItem.isSelected());
        filterProp.setHideItemsWithoutResponses(this.chkHideItemsWithoutResponses.isSelected());
        filterProp.setShowOnlyParameterizedRequests(this.chkShowOnlyParameterizedRequests.isSelected());
        filterProp.setShowOnlyEditedMessage(this.chkShowOnlyEditedMessage.isSelected());

        filterProp.setShowOnly(this.chkShowOnly.isSelected());
        filterProp.setShowOnlyExtension(this.txtShowOnly.getText());
        filterProp.setHide(this.chkHide.isSelected());
        filterProp.setHideExtension(this.txtHide.getText());

        filterProp.setStat2xx(this.chkStat2xx.getModel().isSelected());
        filterProp.setStat3xx(this.chkStat3xx.getModel().isSelected());
        filterProp.setStat4xx(this.chkStat4xx.getModel().isSelected());
        filterProp.setStat5xx(this.chkStat5xx.getModel().isSelected());

        filterProp.setShowOnlyComment(this.chkShowOnlyComment.isSelected());
        filterProp.setShowOnlyHighlightColors(this.chkShowOnlyHighlight.isSelected());
        filterProp.setHighlightColors(this.getHighlightColors());

        filterProp.setMethod(this.txtMethod.getText());
        filterProp.setPath(this.txtPath.getText());
        filterProp.setRequest(this.txtRequest.getText());
        filterProp.setRequestRegex(this.chkReqRegExp.isSelected());
        filterProp.setRequestIgnoreCase(this.chkReqIgnoreCase.isSelected());
        filterProp.setResponse(this.txtResponse.getText());
        filterProp.setResponseRegex(this.chkResRegExp.isSelected());
        filterProp.setResponseIgnoreCase(this.chkResIgnoreCase.isSelected());
        filterProp.setBambda(this.txtBambda.getText());
        return filterProp;
    }

    public void setShowOnlyHighlightColors(boolean highlightColors) {
        this.chkShowOnlyHighlight.setSelected(highlightColors);
    }

    public EnumSet<MessageHighlightColor> getHighlightColors() {
        EnumSet<MessageHighlightColor> colors = EnumSet.noneOf(MessageHighlightColor.class);
        if (this.chkWhite.isSelected()) {
            colors.add(MessageHighlightColor.WHITE);
        }
        if (this.chkRed.isSelected()) {
            colors.add(MessageHighlightColor.RED);
        }
        if (this.chkOrange.isSelected()) {
            colors.add(MessageHighlightColor.ORANGE);
        }
        if (this.chkYellow.isSelected()) {
            colors.add(MessageHighlightColor.YELLOW);
        }
        if (this.chkGreen.isSelected()) {
            colors.add(MessageHighlightColor.GREEN);
        }
        if (this.chkCyan.isSelected()) {
            colors.add(MessageHighlightColor.CYAN);
        }
        if (this.chkBlue.isSelected()) {
            colors.add(MessageHighlightColor.BLUE);
        }
        if (this.chkPink.isSelected()) {
            colors.add(MessageHighlightColor.PINK);
        }
        if (this.chkMagenta.isSelected()) {
            colors.add(MessageHighlightColor.MAGENTA);
        }
        if (this.chkGray.isSelected()) {
            colors.add(MessageHighlightColor.GRAY);
        }
        return colors;
    }

    public void setHighlightColors(EnumSet<MessageHighlightColor> colors) {
        this.chkWhite.setSelected(colors.contains(MessageHighlightColor.WHITE));
        this.chkRed.setSelected(colors.contains(MessageHighlightColor.RED));
        this.chkOrange.setSelected(colors.contains(MessageHighlightColor.ORANGE));
        this.chkYellow.setSelected(colors.contains(MessageHighlightColor.YELLOW));
        this.chkGreen.setSelected(colors.contains(MessageHighlightColor.GREEN));
        this.chkCyan.setSelected(colors.contains(MessageHighlightColor.CYAN));
        this.chkBlue.setSelected(colors.contains(MessageHighlightColor.BLUE));
        this.chkPink.setSelected(colors.contains(MessageHighlightColor.PINK));
        this.chkMagenta.setSelected(colors.contains(MessageHighlightColor.MAGENTA));
        this.chkGray.setSelected(colors.contains(MessageHighlightColor.GRAY));
    }

    public String getFilterName() {
        return this.txtName.getText();
    }

    public void setFilterName(String name) {
        this.txtName.setText(name);
    }

    public void setBambaMode(boolean bamba) {
        this.tabbetFilter.remove(this.pnlBambda);
        if (bamba) {
            this.tabbetFilter.addTab("Bambda", this.pnlBambda);
            this.tabbetFilter.setSelectedIndex(this.tabbetFilter.indexOfTab("Settings"));
        }
        this.btnConvertBambda.setVisible(bamba);
        this.btnImportBambda.setVisible(bamba);
    }

    public boolean getEditMode() {
        return (this.pnlName.getParent() !=  null);
    }

    public void setEditMode(boolean edit) {
        getContentPane().remove(this.pnlName);
        if (edit) {
            getContentPane().add(this.pnlName, java.awt.BorderLayout.NORTH);
        }
    }

    public static class PropertyRowFilter extends RowFilter<Object, Object> {

        private final FilterProperty filterProp;

        public PropertyRowFilter(FilterProperty filterProp) {
            this.filterProp = filterProp;
        }

        @Override
        public boolean include(RowFilter.Entry<? extends Object, ? extends Object> entry) {
            boolean allFilter = false;
            try {
                ProxyHttpRequestResponse item = (ProxyHttpRequestResponse) entry.getValue(0);
                boolean showOnlyScopFilter = true;
                // Show only in-scope items
                if (this.filterProp.isShowOnlyScopeItems()) {
                    showOnlyScopFilter = BurpExtensionImpl.helpers().isInScope(item.request().url());
                }
                // Hide items without responses
                boolean hideItemsWithoutResponses = true;
                if (this.filterProp.isHideItemsWithoutResponses()) {
                    hideItemsWithoutResponses = (item.response() != null);
                }
                // chkShowOnlyParameterizedRequests
                boolean parameterizedRequests = true;
                if (this.filterProp.isShowOnlyParameterizedRequests()) {
                    parameterizedRequests = item.request().hasParameters(HttpParameterType.URL) || item.request().hasParameters(HttpParameterType.BODY);
                }
                // Show only edited message
                boolean editedMessage = true;
                if (this.filterProp.isShowOnlyEditedMessage()) {
                    editedMessage = item.edited();
                }

                // Status Filter
                boolean statusFilter = false;
                if (showOnlyScopFilter) {
                    // Response Status がない場合は無条件で含める
                    if (!item.hasResponse()) {
                        statusFilter = true;
                    }
                    else {
                        if (item.response().statusCode() == 0) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat2xx() && (HttpURLConnection.HTTP_OK <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_MULT_CHOICE)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat3xx() && (HttpURLConnection.HTTP_MULT_CHOICE <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_BAD_REQUEST)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat4xx() && (HttpURLConnection.HTTP_BAD_REQUEST <= item.response().statusCode() && item.response().statusCode() < HttpURLConnection.HTTP_INTERNAL_ERROR)) {
                            statusFilter = true;
                        }
                        if (this.filterProp.getStat5xx() && (HttpURLConnection.HTTP_INTERNAL_ERROR <= item.response().statusCode() && item.response().statusCode() < 600)) {
                            statusFilter = true;
                        }
                    }
                }
                // Highlight Color
                boolean colorFilter = true;
                if (statusFilter && showOnlyScopFilter) {
                    // cololr
                    if (this.filterProp.getShowOnlyHighlightColors()) {
                        EnumSet<MessageHighlightColor> colors = this.filterProp.getHighlightColors();
                        MessageHighlightColor hc = MessageHighlightColor.valueOf(item.annotations().highlightColor());
                        colorFilter = colors.contains(hc);
                    }
                }
                // Comment Filter
                boolean commentFilter = true;
                if (statusFilter && showOnlyScopFilter) {
                    // comment
                    if (this.filterProp.getShowOnlyComment()) {
                        commentFilter = (item.annotations().hasNotes());
                    }
                }
                boolean matchFilter = true;
                if (statusFilter && showOnlyScopFilter && colorFilter) {
                    // showOnly Filter
                    if (this.filterProp.getShowOnly()) {
                        Pattern patternShowOnly = Pattern.compile(BurpUtil.parseFilterPattern(this.filterProp.getShowOnlyExtension()));
                        Matcher matchShowOnly = patternShowOnly.matcher(item.request().pathWithoutQuery());
                        if (!matchShowOnly.find()) {
                            matchFilter = false;
                        }
                    } else {
                        // Hide Filter
                        if (this.filterProp.getHide()) {
                            Pattern patternHide = Pattern.compile(BurpUtil.parseFilterPattern(this.filterProp.getHideExtension()));
                            Matcher matchHide = patternHide.matcher(item.request().pathWithoutQuery());
                            if (matchHide.find()) {
                                matchFilter = false;
                            }
                        }
                    }
                }
                // request method
                boolean requestMethod = true;
                if (!this.filterProp.getMethod().isEmpty()) {
                    requestMethod = item.request().method().equals(this.filterProp.getMethod().toUpperCase());
                }
                // request path
                boolean requestURL = true;
                if (!this.filterProp.getPath().isEmpty()) {
                    requestURL = item.request().path().contains(this.filterProp.getPath());
                }
                // request
                boolean request = true;
                if (!this.filterProp.getRequest().isEmpty()) {
                    if (this.filterProp.isRequestRegex()) {
                        request = item.request().contains(Pattern.compile(this.filterProp.getRequest(), this.filterProp.isRequestIgnoreCase() ? Pattern.DOTALL : Pattern.DOTALL | Pattern.CASE_INSENSITIVE));
                    }
                    else {
                        request = item.request().contains(this.filterProp.getRequest(), this.filterProp.isRequestIgnoreCase());
                    }
                }
                // response
                boolean response = true;
                if (!this.filterProp.getResponse().isEmpty()) {
                    if (item.hasResponse()) {
                        if (this.filterProp.isResponseRegex()) {
                            response = item.response().contains(this.filterProp.getResponse(), this.filterProp.isResponseIgnoreCase());
                        }
                        else {
                            response = item.response().contains(Pattern.compile(this.filterProp.getResponse(), this.filterProp.isResponseIgnoreCase() ? Pattern.DOTALL : Pattern.DOTALL | Pattern.CASE_INSENSITIVE));
                        }
                    }
                }
                // ListenerPort
                boolean listenerPort = true;
                if (this.filterProp.getListenerPort() > -1) {
                    listenerPort = this.filterProp.getListenerPort() == item.listenerPort();
                }
                // 条件のAND
                allFilter = (statusFilter && colorFilter && commentFilter && matchFilter && showOnlyScopFilter && hideItemsWithoutResponses && parameterizedRequests && editedMessage && requestMethod && requestURL && request && response && listenerPort);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
            return allFilter;
        }

    }

    public static class PropertyRowSorter<M extends TableModel> extends TableRowSorter<M> {

        public PropertyRowSorter(M model) {
            super(model);
        }

        private final NumberComparator numberComparator = new NumberComparator();

        @Override
        public Comparator<?> getComparator(int column) {
            if (column == 1) {
                return numberComparator;
            } else {
                return super.getComparator(column);
            }
        }
    }

    private static class NumberComparator implements Comparator {

        @SuppressWarnings("unchecked")
        @Override
        public int compare(Object o1, Object o2) {
            try {
                int parseIntA = Integer.parseInt(o1.toString());
                int parseIntB = Integer.parseInt(o2.toString());
                return parseIntA - parseIntB;
            } catch (NumberFormatException e) {
                if (o1 instanceof Comparator comparator) {
                    return comparator.compare(o1, o2);
                } else {
                    return StringUtil.compareToString(o1.toString(), o2.toString());
                }
            }
        }
    }

}
