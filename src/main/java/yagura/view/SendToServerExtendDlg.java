package yagura.view;

import extension.helpers.SwingUtil;
import extension.view.base.CustomDialog;
import extension.view.base.CustomTableModel;
import java.net.Proxy;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import yagura.model.CertificateItem;
import yagura.model.HttpExtendProperty;
import yagura.model.SendToExtendProperty;
import yagura.model.SendToParameterProperty;

/**
 *
 * @author isayan
 */
public class SendToServerExtendDlg extends CustomDialog {

    private final static Logger logger = Logger.getLogger(SendToServerExtendDlg.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form NewDialog
     *
     * @param parent
     * @param modal
     */
    public SendToServerExtendDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpHttpClientType = new javax.swing.ButtonGroup();
        btnGrpFormat = new javax.swing.ButtonGroup();
        btnGrpReqComment = new javax.swing.ButtonGroup();
        btnGrpReqNumber = new javax.swing.ButtonGroup();
        btnGrpReqName = new javax.swing.ButtonGroup();
        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        tabbetSendToExtend = new javax.swing.JTabbedPane();
        pnlConnections = new javax.swing.JPanel();
        pnlUseClient = new javax.swing.JPanel();
        rdoCustomClient = new javax.swing.JRadioButton();
        rdoBurpClient = new javax.swing.JRadioButton();
        pnlUseCustomClient = new javax.swing.JPanel();
        pnlCustomAuthorization = new javax.swing.JPanel();
        lblAuthorizationType = new javax.swing.JLabel();
        cmbAuthorizationType = new javax.swing.JComboBox<>();
        lblAuthorizationUser = new javax.swing.JLabel();
        txtAuthorizationUser = new javax.swing.JTextField();
        lblAuthorizationPasswd = new javax.swing.JLabel();
        txtAuthorizationPasswd = new javax.swing.JPasswordField();
        pnlCustomProxy = new javax.swing.JPanel();
        lblProtocol = new javax.swing.JLabel();
        lblProxyHost = new javax.swing.JLabel();
        lblProxyUser = new javax.swing.JLabel();
        lblProxyPasswd = new javax.swing.JLabel();
        txtProxyPasswd = new javax.swing.JPasswordField();
        txtProxyUser = new javax.swing.JTextField();
        txtProxyHost = new javax.swing.JTextField();
        cmbProtocol = new javax.swing.JComboBox<>();
        lblProxyPort = new javax.swing.JLabel();
        spnProxyPort = new javax.swing.JSpinner();
        pnlCertificate = new javax.swing.JPanel();
        pnlClientCertififate = new javax.swing.JPanel();
        pnlUseCertificate = new javax.swing.JPanel();
        chkClientCertififate = new javax.swing.JCheckBox();
        btnSelectExecute = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCertificate = new javax.swing.JTable();
        pnlServerCerficate = new javax.swing.JPanel();
        chkIgnoreValidateCertification = new javax.swing.JCheckBox();
        pnlSendToParameter = new javax.swing.JPanel();
        pnlSendToOverride = new javax.swing.JPanel();
        chkUseReqComment = new javax.swing.JCheckBox();
        chkUseReqName = new javax.swing.JCheckBox();
        rdoReqNameResponseTitle = new javax.swing.JRadioButton();
        rdoReqNameHistoryComment = new javax.swing.JRadioButton();
        rdoReqCommentHistoryComment = new javax.swing.JRadioButton();
        rdoReqCommentResponseTitle = new javax.swing.JRadioButton();
        chkOverrideSendToParameter = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(375, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        pnlConnections.setLayout(new java.awt.BorderLayout());

        btnGrpHttpClientType.add(rdoCustomClient);
        rdoCustomClient.setSelected(true);
        rdoCustomClient.setText("Use Custom http client");
        rdoCustomClient.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoCustomClientStateChanged(evt);
            }
        });

        btnGrpHttpClientType.add(rdoBurpClient);
        rdoBurpClient.setText("Use Burp http client (with burp settings)");
        rdoBurpClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoBurpClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUseClientLayout = new javax.swing.GroupLayout(pnlUseClient);
        pnlUseClient.setLayout(pnlUseClientLayout);
        pnlUseClientLayout.setHorizontalGroup(
            pnlUseClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUseClientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUseClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoBurpClient)
                    .addComponent(rdoCustomClient))
                .addContainerGap(333, Short.MAX_VALUE))
        );
        pnlUseClientLayout.setVerticalGroup(
            pnlUseClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUseClientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoBurpClient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoCustomClient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlConnections.add(pnlUseClient, java.awt.BorderLayout.NORTH);

        pnlUseCustomClient.setLayout(new java.awt.BorderLayout());

        pnlCustomAuthorization.setBorder(javax.swing.BorderFactory.createTitledBorder("Authorization"));

        lblAuthorizationType.setText("Authorization Type:");

        lblAuthorizationUser.setText("User:");

        lblAuthorizationPasswd.setText("Password:");

        txtAuthorizationPasswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorizationPasswdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCustomAuthorizationLayout = new javax.swing.GroupLayout(pnlCustomAuthorization);
        pnlCustomAuthorization.setLayout(pnlCustomAuthorizationLayout);
        pnlCustomAuthorizationLayout.setHorizontalGroup(
            pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomAuthorizationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAuthorizationPasswd)
                    .addComponent(lblAuthorizationUser)
                    .addComponent(lblAuthorizationType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbAuthorizationType, 0, 228, Short.MAX_VALUE)
                    .addComponent(txtAuthorizationUser)
                    .addComponent(txtAuthorizationPasswd))
                .addGap(213, 213, 213))
        );
        pnlCustomAuthorizationLayout.setVerticalGroup(
            pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomAuthorizationLayout.createSequentialGroup()
                .addGroup(pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthorizationType)
                    .addComponent(cmbAuthorizationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthorizationUser)
                    .addComponent(txtAuthorizationUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomAuthorizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthorizationPasswd)
                    .addComponent(txtAuthorizationPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlUseCustomClient.add(pnlCustomAuthorization, java.awt.BorderLayout.NORTH);
        pnlCustomAuthorization.getAccessibleContext().setAccessibleDescription("");

        pnlCustomProxy.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy"));

        lblProtocol.setText("Protocol:");

        lblProxyHost.setText("Host:");

        lblProxyUser.setText("User:");

        lblProxyPasswd.setText("Password:");

        txtProxyPasswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProxyPasswdActionPerformed(evt);
            }
        });

        lblProxyPort.setText("port:");

        spnProxyPort.setModel(new javax.swing.SpinnerNumberModel(8080, 0, 65535, 1));
        spnProxyPort.setEditor(new javax.swing.JSpinner.NumberEditor(spnProxyPort, "#"));

        javax.swing.GroupLayout pnlCustomProxyLayout = new javax.swing.GroupLayout(pnlCustomProxy);
        pnlCustomProxy.setLayout(pnlCustomProxyLayout);
        pnlCustomProxyLayout.setHorizontalGroup(
            pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomProxyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProtocol)
                    .addComponent(lblProxyHost)
                    .addGroup(pnlCustomProxyLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProxyPasswd)
                            .addComponent(lblProxyUser))))
                .addGap(50, 50, 50)
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProxyHost)
                    .addComponent(txtProxyPasswd, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                    .addComponent(txtProxyUser, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbProtocol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProxyPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCustomProxyLayout.setVerticalGroup(
            pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomProxyLayout.createSequentialGroup()
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProtocol)
                    .addComponent(cmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyHost)
                    .addComponent(txtProxyHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProxyPort)
                    .addComponent(spnProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyUser)
                    .addComponent(txtProxyUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProxyPasswd)
                    .addComponent(txtProxyPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pnlUseCustomClient.add(pnlCustomProxy, java.awt.BorderLayout.CENTER);

        pnlCertificate.setLayout(new java.awt.BorderLayout());

        pnlClientCertififate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Client Certificate")));
        pnlClientCertififate.setLayout(new java.awt.BorderLayout());

        chkClientCertififate.setText("use Client Certififate");

        btnSelectExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/folder_page.png"))); // NOI18N
        btnSelectExecute.setMaximumSize(new java.awt.Dimension(30, 30));
        btnSelectExecute.setMinimumSize(new java.awt.Dimension(30, 30));
        btnSelectExecute.setPreferredSize(new java.awt.Dimension(30, 30));
        btnSelectExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectExecuteActionPerformed(evt);
            }
        });

        tableCertificate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "StoreType", "Certificate", "CertificatePassword", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableCertificate);
        if (tableCertificate.getColumnModel().getColumnCount() > 0) {
            tableCertificate.getColumnModel().getColumn(1).setResizable(false);
            tableCertificate.getColumnModel().getColumn(2).setResizable(false);
            tableCertificate.getColumnModel().getColumn(3).setResizable(false);
            tableCertificate.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout pnlUseCertificateLayout = new javax.swing.GroupLayout(pnlUseCertificate);
        pnlUseCertificate.setLayout(pnlUseCertificateLayout);
        pnlUseCertificateLayout.setHorizontalGroup(
            pnlUseCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUseCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUseCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlUseCertificateLayout.createSequentialGroup()
                        .addComponent(chkClientCertififate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectExecute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 386, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlUseCertificateLayout.setVerticalGroup(
            pnlUseCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUseCertificateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUseCertificateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkClientCertififate)
                    .addComponent(btnSelectExecute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlClientCertififate.add(pnlUseCertificate, java.awt.BorderLayout.NORTH);

        pnlCertificate.add(pnlClientCertififate, java.awt.BorderLayout.PAGE_START);

        pnlServerCerficate.setBorder(javax.swing.BorderFactory.createTitledBorder("Server Cerficate"));
        pnlServerCerficate.setToolTipText("");

        chkIgnoreValidateCertification.setText("ignore Validate Certification");

        javax.swing.GroupLayout pnlServerCerficateLayout = new javax.swing.GroupLayout(pnlServerCerficate);
        pnlServerCerficate.setLayout(pnlServerCerficateLayout);
        pnlServerCerficateLayout.setHorizontalGroup(
            pnlServerCerficateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerCerficateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkIgnoreValidateCertification)
                .addContainerGap(387, Short.MAX_VALUE))
        );
        pnlServerCerficateLayout.setVerticalGroup(
            pnlServerCerficateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerCerficateLayout.createSequentialGroup()
                .addComponent(chkIgnoreValidateCertification)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlCertificate.add(pnlServerCerficate, java.awt.BorderLayout.PAGE_END);
        pnlServerCerficate.getAccessibleContext().setAccessibleName("Server Certificate");

        pnlUseCustomClient.add(pnlCertificate, java.awt.BorderLayout.SOUTH);

        pnlConnections.add(pnlUseCustomClient, java.awt.BorderLayout.CENTER);

        tabbetSendToExtend.addTab("Connections", pnlConnections);

        pnlSendToOverride.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        chkUseReqComment.setText("use request comment");

        chkUseReqName.setText("use request name");
        chkUseReqName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUseReqNameActionPerformed(evt);
            }
        });

        btnGrpReqName.add(rdoReqNameResponseTitle);
        rdoReqNameResponseTitle.setSelected(true);
        rdoReqNameResponseTitle.setText("response title tag");

        btnGrpReqName.add(rdoReqNameHistoryComment);
        rdoReqNameHistoryComment.setText("history comment");

        btnGrpReqComment.add(rdoReqCommentHistoryComment);
        rdoReqCommentHistoryComment.setSelected(true);
        rdoReqCommentHistoryComment.setText("history comment");

        btnGrpReqComment.add(rdoReqCommentResponseTitle);
        rdoReqCommentResponseTitle.setText("response title tag");

        javax.swing.GroupLayout pnlSendToOverrideLayout = new javax.swing.GroupLayout(pnlSendToOverride);
        pnlSendToOverride.setLayout(pnlSendToOverrideLayout);
        pnlSendToOverrideLayout.setHorizontalGroup(
            pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToOverrideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkUseReqComment)
                    .addComponent(chkUseReqName)
                    .addGroup(pnlSendToOverrideLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSendToOverrideLayout.createSequentialGroup()
                                .addComponent(rdoReqCommentHistoryComment)
                                .addGap(30, 30, 30)
                                .addComponent(rdoReqCommentResponseTitle))
                            .addGroup(pnlSendToOverrideLayout.createSequentialGroup()
                                .addComponent(rdoReqNameHistoryComment)
                                .addGap(30, 30, 30)
                                .addComponent(rdoReqNameResponseTitle)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSendToOverrideLayout.setVerticalGroup(
            pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToOverrideLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkUseReqName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoReqNameHistoryComment)
                    .addComponent(rdoReqNameResponseTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUseReqComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSendToOverrideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoReqCommentHistoryComment)
                    .addComponent(rdoReqCommentResponseTitle))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        chkOverrideSendToParameter.setText("override sendto parameter");
        chkOverrideSendToParameter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkOverrideSendToParameterStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlSendToParameterLayout = new javax.swing.GroupLayout(pnlSendToParameter);
        pnlSendToParameter.setLayout(pnlSendToParameterLayout);
        pnlSendToParameterLayout.setHorizontalGroup(
            pnlSendToParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkOverrideSendToParameter)
                .addContainerGap(405, Short.MAX_VALUE))
            .addGroup(pnlSendToParameterLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(pnlSendToOverride, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlSendToParameterLayout.setVerticalGroup(
            pnlSendToParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSendToParameterLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(chkOverrideSendToParameter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSendToOverride, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(319, Short.MAX_VALUE))
        );

        tabbetSendToExtend.addTab("SendToParameter", pnlSendToParameter);

        getContentPane().add(tabbetSendToExtend, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private CustomTableModel modelCertificate = null;

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        String proxyProtocol = (String) this.cmbProtocol.getSelectedItem();
        String proxyHost = this.txtProxyHost.getText().trim();
        if (!Proxy.Type.DIRECT.name().equals(proxyProtocol)) {
            if (proxyHost.isEmpty()) {
                JOptionPane.showMessageDialog(this, BUNDLE.getString("view.sendto.add.proxyhost.empty"), "SendTo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.setModalResult(JOptionPane.OK_OPTION);
                this.closeDialog(null);
            }
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void txtProxyPasswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProxyPasswdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProxyPasswdActionPerformed

    private void rdoBurpClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoBurpClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoBurpClientActionPerformed

    private void rdoCustomClientStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoCustomClientStateChanged
        SwingUtil.setContainerEnable(this.pnlUseCustomClient, this.rdoCustomClient.isSelected());
    }//GEN-LAST:event_rdoCustomClientStateChanged

    private void txtAuthorizationPasswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorizationPasswdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorizationPasswdActionPerformed

    private void btnSelectExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectExecuteActionPerformed
        this.showImportCertificatetDlg();
    }//GEN-LAST:event_btnSelectExecuteActionPerformed

    private void chkOverrideSendToParameterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkOverrideSendToParameterStateChanged
        SwingUtil.setContainerEnable(this.pnlSendToOverride, this.chkOverrideSendToParameter.isSelected());
    }//GEN-LAST:event_chkOverrideSendToParameterStateChanged

    private void chkUseReqNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUseReqNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkUseReqNameActionPerformed

    private final ImportCertificatetDlg importCertificatetDlg = new ImportCertificatetDlg(null, true);

    private final CertificateItem certProp = new CertificateItem();

    private void showImportCertificatetDlg() {
        this.importCertificatetDlg.setLocationRelativeTo(this);
        this.importCertificatetDlg.setVisible(true);
        if (this.importCertificatetDlg.getModalResult() == JOptionPane.OK_OPTION) {
            CertificateItem prop = this.importCertificatetDlg.getProperty();
            this.clearItem();
            this.certProp.setProperty(prop);
            this.setEditItem(this.certProp, false);
            this.chkClientCertififate.setEnabled(this.modelCertificate.getRowCount() > 0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SendToServerExtendDlg dialog = new SendToServerExtendDlg(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.ButtonGroup btnGrpFormat;
    private javax.swing.ButtonGroup btnGrpHttpClientType;
    private javax.swing.ButtonGroup btnGrpReqComment;
    private javax.swing.ButtonGroup btnGrpReqName;
    private javax.swing.ButtonGroup btnGrpReqNumber;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSelectExecute;
    private javax.swing.JCheckBox chkClientCertififate;
    private javax.swing.JCheckBox chkIgnoreValidateCertification;
    private javax.swing.JCheckBox chkOverrideSendToParameter;
    private javax.swing.JCheckBox chkUseReqComment;
    private javax.swing.JCheckBox chkUseReqName;
    private javax.swing.JComboBox<String> cmbAuthorizationType;
    private javax.swing.JComboBox<String> cmbProtocol;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAuthorizationPasswd;
    private javax.swing.JLabel lblAuthorizationType;
    private javax.swing.JLabel lblAuthorizationUser;
    private javax.swing.JLabel lblProtocol;
    private javax.swing.JLabel lblProxyHost;
    private javax.swing.JLabel lblProxyPasswd;
    private javax.swing.JLabel lblProxyPort;
    private javax.swing.JLabel lblProxyUser;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlCertificate;
    private javax.swing.JPanel pnlClientCertififate;
    private javax.swing.JPanel pnlConnections;
    private javax.swing.JPanel pnlCustomAuthorization;
    private javax.swing.JPanel pnlCustomProxy;
    private javax.swing.JPanel pnlSendToOverride;
    private javax.swing.JPanel pnlSendToParameter;
    private javax.swing.JPanel pnlServerCerficate;
    private javax.swing.JPanel pnlUseCertificate;
    private javax.swing.JPanel pnlUseClient;
    private javax.swing.JPanel pnlUseCustomClient;
    private javax.swing.JRadioButton rdoBurpClient;
    private javax.swing.JRadioButton rdoCustomClient;
    private javax.swing.JRadioButton rdoReqCommentHistoryComment;
    private javax.swing.JRadioButton rdoReqCommentResponseTitle;
    private javax.swing.JRadioButton rdoReqNameHistoryComment;
    private javax.swing.JRadioButton rdoReqNameResponseTitle;
    private javax.swing.JSpinner spnProxyPort;
    private javax.swing.JTabbedPane tabbetSendToExtend;
    private javax.swing.JTable tableCertificate;
    private javax.swing.JPasswordField txtAuthorizationPasswd;
    private javax.swing.JTextField txtAuthorizationUser;
    private javax.swing.JTextField txtProxyHost;
    private javax.swing.JPasswordField txtProxyPasswd;
    private javax.swing.JTextField txtProxyUser;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.cmbAuthorizationType.addItem(HttpExtendProperty.AuthorizationType.NONE.name());
        this.cmbAuthorizationType.addItem(HttpExtendProperty.AuthorizationType.BASIC.name());
        this.cmbAuthorizationType.addItem(HttpExtendProperty.AuthorizationType.DIGEST.name());
        this.cmbProtocol.addItem(Proxy.Type.DIRECT.name());
        this.cmbProtocol.addItem(Proxy.Type.HTTP.name());
        this.cmbProtocol.addItem(Proxy.Type.SOCKS.name());

        this.modelCertificate = new CustomTableModel(this.tableCertificate.getModel());
        this.tableCertificate.setModel(this.modelCertificate);
        this.tableCertificate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.tableCertificate.setFillsViewportHeight(true);

        // selected
        this.tableCertificate.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableCertificate.getColumnModel().getColumn(0).setPreferredWidth(20);
        this.tableCertificate.getColumnModel().getColumn(0).setMaxWidth(30);

        // StoreType
        this.tableCertificate.getColumnModel().getColumn(1).setMinWidth(40);
        this.tableCertificate.getColumnModel().getColumn(1).setPreferredWidth(80);
        this.tableCertificate.getColumnModel().getColumn(1).setMaxWidth(120);

        //
        this.tableCertificate.getColumnModel().getColumn(2).setMinWidth(0);
        this.tableCertificate.getColumnModel().getColumn(2).setPreferredWidth(0);
        this.tableCertificate.getColumnModel().getColumn(2).setMaxWidth(0);

        // password
        this.tableCertificate.getColumnModel().getColumn(3).setMinWidth(0);
        this.tableCertificate.getColumnModel().getColumn(3).setPreferredWidth(0);
        this.tableCertificate.getColumnModel().getColumn(3).setMaxWidth(0);

        this.chkClientCertififate.setEnabled(this.modelCertificate.getRowCount() > 0);

    }

    private void clearItem() {
        this.certProp.setSelected(false);
        this.modelCertificate.removeAll();
    }

    private CertificateItem getEditItem() {
        CertificateItem item = new CertificateItem();
        Object editRows[] = SwingUtil.editItem(this.tableCertificate);
        if (editRows != null) {
            item = CertificateItem.fromObjects(editRows);
        }
        return item;
    }

    private void setEditItem(CertificateItem item, boolean update) {
        Object[] rows = CertificateItem.toObjects(item);
        SwingUtil.addOrUpdateItem(this.tableCertificate, rows, update);
    }

    public HttpExtendProperty.HttpClientType getHttpClientType() {
        return this.rdoCustomClient.isSelected() ? HttpExtendProperty.HttpClientType.CUSTOM : HttpExtendProperty.HttpClientType.BURP;
    }

    public void setProperty(SendToExtendProperty prop) {
        this.setProperty(prop.getSendToParameterProperty());
        this.setProperty(prop.getHttpExtendProperty());
    }

    public void setProperty(SendToParameterProperty prop) {

        this.chkOverrideSendToParameter.setSelected(prop.isUseOverride());
        this.chkUseReqName.setSelected(prop.isUseReqName());
        if (prop.getReqName() == SendToParameterProperty.SendToParameterType.HISTORY_COMMENT) {
            this.rdoReqNameHistoryComment.setSelected(true);
        } else {
            this.rdoReqNameResponseTitle.setSelected(true);
        }

        this.chkUseReqComment.setSelected(prop.isUseReqComment());
        if (prop.getReqComment() == SendToParameterProperty.SendToParameterType.HISTORY_COMMENT) {
            this.rdoReqCommentHistoryComment.setSelected(true);
        } else {
            this.rdoReqCommentResponseTitle.setSelected(true);
        }

//        this.chkUseReqNum.setSelected(prop.isUseReqNum());
//        if (prop.getReqNum() == SendToParameterProperty.SendToParameterType.HISTORY_NUMBER) {
//            this.rdoReqNameHistoryNumber.setSelected(true);
//        }
    }

    public void setProperty(HttpExtendProperty prop) {
        HttpExtendProperty.HttpClientType httpClientType = prop.getHttpClientType();
        HttpExtendProperty.AuthorizationType authorizationType = prop.getAuthorizationType();

        this.rdoBurpClient.setSelected(HttpExtendProperty.HttpClientType.BURP.equals(httpClientType));

        this.clearItem();
        this.chkClientCertififate.setSelected(prop.isUseClientCertificate());
        if (this.chkClientCertififate.isSelected()) {
            CertificateItem item = prop.getClientCertificateItem();
            setEditItem(item, false);
        }
        this.chkClientCertififate.setEnabled(this.modelCertificate.getRowCount() > 0);

        String authorizationUser = prop.getAuthorizationUser();
        String authorizationPasswd = prop.getAuthorizationPasswd();
        this.cmbAuthorizationType.setSelectedItem(authorizationType.name());
        this.txtAuthorizationUser.setText(authorizationUser);
        this.txtAuthorizationPasswd.setText(authorizationPasswd);

        Proxy.Type proxyProtocol = prop.getProxyProtocol();
        String proxyHost = prop.getProxyHost();
        int proxyPort = prop.getProxyPort();
        String proxyUser = prop.getProxyUser();
        String proxyPasswd = prop.getProxyPasswd();
        boolean ignoreValidateCertification = prop.isIgnoreValidateCertification();

        this.cmbProtocol.setSelectedItem(proxyProtocol.name());
        this.txtProxyHost.setText(proxyHost);
        this.spnProxyPort.setValue(proxyPort);
        this.txtProxyUser.setText(proxyUser);
        this.txtProxyPasswd.setText(proxyPasswd);
        this.chkIgnoreValidateCertification.setSelected(ignoreValidateCertification);
        if (HttpExtendProperty.HttpClientType.CUSTOM.equals(httpClientType)) {
            this.rdoCustomClient.setSelected(true);
        } else {
            this.rdoBurpClient.setSelected(true);
        }
    }

    public SendToParameterProperty getSendToOverrideProperty() {
        SendToParameterProperty prop = new SendToParameterProperty();

        prop.setUseOverride(this.chkOverrideSendToParameter.isSelected());
        prop.setUseReqName(this.chkUseReqName.isSelected());
        prop.setReqName(this.rdoReqNameHistoryComment.isSelected() ? SendToParameterProperty.SendToParameterType.HISTORY_COMMENT : SendToParameterProperty.SendToParameterType.RESPONSE_TITLE);

        prop.setUseReqComment(this.chkUseReqComment.isSelected());
        prop.setReqComment(this.rdoReqCommentHistoryComment.isSelected() ? SendToParameterProperty.SendToParameterType.HISTORY_COMMENT : SendToParameterProperty.SendToParameterType.RESPONSE_TITLE);

//        prop.setUseReqNum(this.chkUseReqNum.isSelected());
//        prop.setReqNum(SendToParameterProperty.SendToParameterType.HISTORY_NUMBER);
        return prop;
    }

    public HttpExtendProperty getHttpExtendProperty() {
        HttpExtendProperty prop = new HttpExtendProperty();
        prop.setHttpClientType(this.getHttpClientType());

        prop.setUseClientCertificate(this.chkClientCertififate.isSelected());
        if (prop.isUseClientCertificate()) {
            prop.setClientCertificateStoreType(this.certProp.getStoreType());
            prop.setClientCertificate(this.certProp.getClientCertificate());
            prop.setClientCertificatePasswd(this.certProp.getClientCertificatePasswd());
        }

        prop.setIgnoreValidateCertification(this.chkIgnoreValidateCertification.isSelected());

        prop.setAuthorizationType(HttpExtendProperty.AuthorizationType.valueOf((String) this.cmbAuthorizationType.getSelectedItem()));
        prop.setAuthorizationUser(this.txtAuthorizationUser.getText());
        prop.setAuthorizationPasswd(String.valueOf(this.txtAuthorizationPasswd.getPassword()));

        prop.setProxyProtocol(Proxy.Type.valueOf((String) (String) this.cmbProtocol.getSelectedItem()));
        prop.setProxyHost(this.txtProxyHost.getText());
        prop.setProxyPort((int) this.spnProxyPort.getValue());
        prop.setProxyUser(this.txtProxyUser.getText());
        prop.setProxyPasswd(String.valueOf(this.txtProxyPasswd.getPassword()));
        return prop;
    }

    public SendToExtendProperty getProperty() {
        SendToExtendProperty prop = new SendToExtendProperty();
        prop.setProperty(this.getHttpExtendProperty());
        prop.setProperty(this.getSendToOverrideProperty());
        return prop;
    }

}
