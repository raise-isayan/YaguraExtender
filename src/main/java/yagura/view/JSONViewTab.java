package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.core.ToolType;
import burp.api.montoya.http.message.ContentType;
import burp.api.montoya.http.message.MimeType;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;
import burp.api.montoya.ui.Selection;
import burp.api.montoya.ui.editor.extension.EditorCreationContext;
import burp.api.montoya.ui.editor.extension.EditorMode;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedEditor;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpRequestEditor;
import burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpResponseEditor;
import extend.util.external.ExtensionHelper;
import extend.util.external.FormatUtil;
import extension.helpers.HttpMesageHelper;
import extension.helpers.StringUtil;
import java.awt.Component;
import java.awt.Font;
import java.nio.charset.StandardCharsets;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.JTextComponent;
import yagura.model.QuickSearchEvent;
import yagura.model.QuickSearchListener;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class JSONViewTab extends javax.swing.JPanel implements ExtensionProvidedEditor, ExtensionProvidedHttpRequestEditor, ExtensionProvidedHttpResponseEditor {
    private final static Logger logger = Logger.getLogger(JSONViewTab.class.getName());

    private final boolean isRequest;
    private final EditorCreationContext editorCreationContext;
    private HttpRequestResponse httpRequestResponse;

    public JSONViewTab(boolean request) {
        this(ExtensionHelper.newEditorCreationContext(ToolType.EXTENSIONS, EditorMode.READ_ONLY), request);
    }

    /**
     * Creates new form JSONView
     * @param editorCreationContext
     * @param isResuest
     */
    public JSONViewTab(EditorCreationContext editorCreationContext, boolean isResuest) {
        this.isRequest = isResuest;
        this.editorCreationContext = editorCreationContext;
        initComponents();
        customizeComponents();
    }

    private final JSONView jsonView = new JSONView(isJsonp());
    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.quickSearchTab.setSelectedTextArea((org.fife.ui.rtextarea.RTextArea)this.jsonView.getTextArea());
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        this.quickSearchTab.addQuickSearchListener(quickSerchStateChanged);

        this.add(jsonView, java.awt.BorderLayout.CENTER);
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);
    }

    public boolean isJsonp() {
        return false;
    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    private final QuickSearchListener quickSerchStateChanged = new QuickSearchListener() {

        @Override
        public void quickBackPerformed(QuickSearchEvent evt) {

        }

        @Override
        public void quickForwardPerformed(QuickSearchEvent evt) {

        }

    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void setMessageEncoding(String encoding) {
        try {
            if (this.httpRequestResponse != null) {
                if (this.isRequest) {
                    String msg = StringUtil.getStringCharset(this.httpRequestResponse.request().body().getBytes(), encoding);
                    this.jsonView.setMessage(msg);
                }
                else {
                    String msg = StringUtil.getStringCharset(this.httpRequestResponse.response().body().getBytes(), encoding);
                    this.jsonView.setMessage(msg);
                }

            } else {
                this.jsonView.setMessage(null);
            }
            this.quickSearchTab.clearViewAndSearch();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    public void setMessageFont(Font font) {
        this.jsonView.setMessageFont(font);
        this.quickSearchTab.setMessageFont(font);
    }

    protected JTextComponent getSelectedTextArea() {
        return this.jsonView.getTextArea();
    }

    public String getSelectedText() {
        JTextComponent area = this.getSelectedTextArea();
        return area.getSelectedText();
    }

    public boolean isExtendVisible() {
        return false;
    }

    public void setMessage(HttpRequestResponse messageInfo) {

    }


    public boolean isEnabledJson(HttpRequestResponse httpRequestResponse, boolean isMessageRequest) {
        UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getEncodingProperty();
        EnumSet<UniversalViewProperty.UniversalView> view = viewProperty.getMessageView();
        if (!view.contains(UniversalViewProperty.UniversalView.JSON)) {
            return false;
        }
        HttpRequest httpRequest = httpRequestResponse.request();
        HttpResponse httpResponse = httpRequestResponse.response();

        if ((isMessageRequest && httpRequest.body().length() > viewProperty.getDispayMaxLength() ||
           (!isMessageRequest && httpResponse.body().length() > viewProperty.getDispayMaxLength()))
           && viewProperty.getDispayMaxLength() != 0) {
            return false;
        }

        this.setLineWrap(viewProperty.isLineWrap());
        boolean mimeJsonType = false;
        byte[] body = new byte[0];

        if (this.isRequest && isMessageRequest) {
            ContentType contentType = httpRequest.contentType();
            mimeJsonType = (contentType == ContentType.JSON);
            body = httpRequest.body().getBytes();
        } else if (!this.isRequest && !isMessageRequest) {
            MimeType mimeType = httpResponse.statedMimeType();
            mimeJsonType = (mimeType == MimeType.JSON);
            body = httpResponse.body().getBytes();
        }
        if (body.length > 0 && mimeJsonType) {
            return FormatUtil.isJson(StringUtil.getBytesRawString(body));
        } else {
            return FormatUtil.isJson(StringUtil.getBytesRawString(body));
        }
    }

    public boolean isEnabledJsonp(HttpRequestResponse httpRequestResponse, boolean isMessageRequest) {
        UniversalViewProperty viewProperty = BurpExtension.getInstance().getProperty().getEncodingProperty();
        EnumSet<UniversalViewProperty.UniversalView> view = BurpExtension.getInstance().getProperty().getEncodingProperty().getMessageView();
        if (!view.contains(UniversalViewProperty.UniversalView.JSONP)) {
            return false;
        }
        HttpRequest httpRequest = httpRequestResponse.request();
        HttpResponse httpResponse = httpRequestResponse.response();

        if ((isMessageRequest && httpRequest.toByteArray().length() > viewProperty.getDispayMaxLength() ||
           (!isMessageRequest && httpResponse.toByteArray().length() > viewProperty.getDispayMaxLength()))
           && viewProperty.getDispayMaxLength() != 0) {
            return false;
        }

        byte[] body = new byte[0];
        if (this.isRequest && isMessageRequest) {
            body = httpRequest.body().getBytes();
        } else if (!this.isRequest && !isMessageRequest) {
            body = httpResponse.body().getBytes();
        }
        return FormatUtil.isJsonp(StringUtil.getBytesRawString(body));
    }

    @Override
    public boolean isModified() {
        return false;
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }

    /**
     * @return the lineWrap
     */
    public boolean isLineWrap() {
        return this.jsonView.isLineWrap();
    }

    /**
     * @param lineWrap the lineWrap to set
     */
    public void setLineWrap(boolean lineWrap) {
        this.jsonView.setLineWrap(lineWrap);
    }


    public HttpRequestResponse getHttpRequestResponse() {
        return this.httpRequestResponse;
    }

   @Override
    public void setRequestResponse(HttpRequestResponse httpRequestResponse) {
        this.httpRequestResponse = httpRequestResponse;
        String guessCharset = null;
        if (this.isRequest) {
            HttpRequest httpRequest = httpRequestResponse.request();
            guessCharset = HttpMesageHelper.getGuessCharset(httpRequest);
        } else {
            HttpResponse httpResponse = httpRequestResponse.response();
            guessCharset = HttpMesageHelper.getGuessCharset(httpResponse);
        }
        if (guessCharset == null) {
            guessCharset = StandardCharsets.ISO_8859_1.name();
        }
        BurpExtension extenderImpl = BurpExtension.getInstance();
        this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
        this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
        encodingItemStateChanged.itemStateChanged(null);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
    }

    @Override
    public HttpRequest getRequest() {
        return this.httpRequestResponse.request();
    }

    @Override
    public HttpResponse getResponse() {
        return this.httpRequestResponse.response();
    }

    @Override
    public boolean isEnabledFor(HttpRequestResponse httpRequestResponse) {
        if (httpRequestResponse == null) {
            return false;
        }
        if (this.isJsonp()) {
            return isEnabledJsonp(httpRequestResponse, this.isRequest);
        }
        else {
            return isEnabledJson(httpRequestResponse, this.isRequest);
        }
    }

    @Override
    public String caption() {
        if (this.isJsonp()) {
            return "JSONP";
        }
        else {
            return "JSON";
        }
    }

    @Override
    public Component uiComponent() {
        return this;
    }

    @Override
    public Selection selectedData() {
        return null;
    }


}
