package yagura.view;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.crypto.ECDSASigner;
import com.nimbusds.jose.crypto.RSASSASigner;
import extend.util.external.jws.JWSUtil;
import extend.util.external.jws.WeakMACSigner;
import java.awt.Component;
import java.util.logging.Logger;
import extension.burp.IBurpTab;
import java.text.ParseException;
import java.util.Comparator;
import javax.swing.DefaultComboBoxModel;
import passive.JWSToken;

/**
 *
 * @author isayan
 */
public class JWSEncoderTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(JWSEncoderTab.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private final JWSToken jwsInstance = new JWSToken();

    /**
     * Creates new form JWTWeakTokenScan
     */
    public JWSEncoderTab() {
        initComponents();
        customizeComponents();
    }

    private final JWSAlgorithm SELECT_ALGO = new JWSAlgorithm("Select algorithm");

    private final DefaultComboBoxModel modelAlgo = new DefaultComboBoxModel();

    private final JWSEditPanel panelJWSEdit = new JWSEditPanel();

    private void customizeComponents() {
        this.txtJsonToken.setEditable(false);
        this.modelAlgo.addElement(SELECT_ALGO);
        for (JWSAlgorithm algo : WeakMACSigner.SUPPORTED_ALGORITHMS.stream().sorted(Comparator.comparing(JWSAlgorithm::getName)).toList()) {
            this.modelAlgo.addElement(algo);
        }
        for (JWSAlgorithm algo : RSASSASigner.SUPPORTED_ALGORITHMS.stream().sorted(Comparator.comparing(JWSAlgorithm::getName)).toList()) {
            this.modelAlgo.addElement(algo);
        }
        for (JWSAlgorithm algo : ECDSASigner.SUPPORTED_ALGORITHMS.stream().sorted(Comparator.comparing(JWSAlgorithm::getName)).toList()) {
            this.modelAlgo.addElement(algo);
        }
        this.cmbAlgo.setModel(this.modelAlgo);
        this.pnlToken.add(this.panelJWSEdit, java.awt.BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJTokenDecoder = new javax.swing.JPanel();
        pnlAction = new javax.swing.JPanel();
        cmbAlgo = new javax.swing.JComboBox<>();
        btnClear = new javax.swing.JButton();
        lblTokenValid = new javax.swing.JLabel();
        btnEncode = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtJsonToken = new javax.swing.JTextArea();
        pnlToken = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlJTokenDecoder.setPreferredSize(new java.awt.Dimension(200, 125));
        pnlJTokenDecoder.setLayout(new java.awt.BorderLayout());

        pnlAction.setPreferredSize(new java.awt.Dimension(125, 125));

        cmbAlgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlgoActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnEncode.setText("Encode");
        btnEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionLayout = new javax.swing.GroupLayout(pnlAction);
        pnlAction.setLayout(pnlActionLayout);
        pnlActionLayout.setHorizontalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTokenValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAlgo, 0, 78, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlActionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnEncode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        pnlActionLayout.setVerticalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlActionLayout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(lblTokenValid, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAlgo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlActionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnEncode)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnClear)
                    .addContainerGap(69, Short.MAX_VALUE)))
        );

        pnlJTokenDecoder.add(pnlAction, java.awt.BorderLayout.LINE_END);

        txtJsonToken.setColumns(20);
        txtJsonToken.setRows(5);
        jScrollPane1.setViewportView(txtJsonToken);

        pnlJTokenDecoder.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(pnlJTokenDecoder, java.awt.BorderLayout.NORTH);

        pnlToken.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlToken.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlToken.setPreferredSize(new java.awt.Dimension(100, 454));
        pnlToken.setLayout(new java.awt.BorderLayout());
        add(pnlToken, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlgoActionPerformed
        int index = this.cmbAlgo.getSelectedIndex();
        if (index > 0) {
            JWSAlgorithm algo = (JWSAlgorithm) this.modelAlgo.getSelectedItem();
            this.panelJWSEdit.setHeaderJSON(JWSUtil.toHeaderJSON(algo), true);
        }
    }//GEN-LAST:event_cmbAlgoActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.lblTokenValid.setText("");
        this.txtJsonToken.setText("");
        this.panelJWSEdit.clearJWS();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncodeActionPerformed
        try {
            this.lblTokenValid.setText("");
            this.txtJsonToken.setText(this.panelJWSEdit.sign());
        } catch (JOSEException ex) {
            this.lblTokenValid.setText(BUNDLE.getString("token.invalid.token"));
        }
    }//GEN-LAST:event_btnEncodeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEncode;
    private javax.swing.JComboBox<String> cmbAlgo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTokenValid;
    private javax.swing.JPanel pnlAction;
    private javax.swing.JPanel pnlJTokenDecoder;
    private javax.swing.JPanel pnlToken;
    private javax.swing.JTextArea txtJsonToken;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "JWT Encoder";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    public void setHeaderJSON(String value, boolean pretty) {
        this.panelJWSEdit.setHeaderJSON(value, pretty);
    }

    public void setPayloadJSON(String value, boolean pretty) {
        this.panelJWSEdit.setPayloadJSON(value, pretty);
    }

    public void setSecretKey(String value) {
        this.panelJWSEdit.setSecretKey(value);
    }

}
