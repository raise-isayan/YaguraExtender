package yagura.view;

import burp.BurpExtension;
import burp.api.montoya.extension.ExtensionUnloadingHandler;
import yagura.model.AutoResponderProperty;
import yagura.model.AutoResponderItem;
import yagura.AutoMockServer;
import extension.burp.IBurpTab;
import extension.burp.MessageType;
import extension.helpers.SwingUtil;
import extension.view.base.CustomTableModel;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.lang.Thread.UncaughtExceptionHandler;
import java.net.BindException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author isayan
 */
public class AutoResponderTab extends javax.swing.JPanel implements IBurpTab, ExtensionUnloadingHandler, UncaughtExceptionHandler {

    private final static Logger logger = Logger.getLogger(AutoResponderTab.class.getName());

    /**
     * Creates new form AutoResponder
     */
    public AutoResponderTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAutoResponderAdd = new javax.swing.JButton();
        btnAutoResponderRemove = new javax.swing.JButton();
        btnAutoResponderEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAutoResponder = new javax.swing.JTable();
        btnEnable = new javax.swing.JToggleButton();
        btnUpArraw = new javax.swing.JButton();
        btnDownArraw = new javax.swing.JButton();
        chkHostNameForceResolv = new javax.swing.JCheckBox();

        btnAutoResponderAdd.setText("Add");
        btnAutoResponderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoResponderAddActionPerformed(evt);
            }
        });

        btnAutoResponderRemove.setText("Remove");
        btnAutoResponderRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoResponderRemoveActionPerformed(evt);
            }
        });

        btnAutoResponderEdit.setText("Edit");
        btnAutoResponderEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoResponderEditActionPerformed(evt);
            }
        });

        tableAutoResponder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "method", "match", "regex", "icase", "body", "mime", "replace"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAutoResponder.getTableHeader().setReorderingAllowed(false);
        tableAutoResponder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableAutoResponderKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tableAutoResponder);

        btnEnable.setText("Enable");
        btnEnable.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnEnableStateChanged(evt);
            }
        });

        btnUpArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_up.png"))); // NOI18N
        btnUpArraw.setText("up");
        btnUpArraw.setHideActionText(true);
        btnUpArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnUpArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpArrawActionPerformed(evt);
            }
        });

        btnDownArraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yagura/resources/arrow_down.png"))); // NOI18N
        btnDownArraw.setText("down");
        btnDownArraw.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnDownArraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownArrawActionPerformed(evt);
            }
        });

        chkHostNameForceResolv.setSelected(true);
        chkHostNameForceResolv.setText("<html>Hostname Resolution<br/> to allow invalid <br/>hostname redirection.</html>");
        chkHostNameForceResolv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHostNameForceResolvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAutoResponderRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAutoResponderAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chkHostNameForceResolv, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEnable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAutoResponderEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpArraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDownArraw, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnEnable, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAutoResponderEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAutoResponderRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAutoResponderAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpArraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDownArraw)
                        .addGap(18, 18, 18)
                        .addComponent(chkHostNameForceResolv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        chkHostNameForceResolv.getAccessibleContext().setAccessibleName("Hostname Resolution to allow invalid hostname redirection");
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String getTabCaption() {
        return "AutoResponder";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    private CustomTableModel modelAutoResponder = null;

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        // AutoResponder
        this.modelAutoResponder = new CustomTableModel(this.tableAutoResponder.getModel());
        this.tableAutoResponder.setModel(this.modelAutoResponder);
        this.btnAutoResponderEdit.setEnabled(this.tableAutoResponder.getSelectedRowCount() > 0);
        this.btnAutoResponderRemove.setEnabled(this.tableAutoResponder.getSelectedRowCount() > 0);

        this.modelAutoResponder.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                firePropertyChange(AutoResponderProperty.AUTO_RESPONDER_PROPERTY, null, getProperty());
            }
        });

        this.tableAutoResponder.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                int rowCount = tableAutoResponder.getSelectedRowCount();
                btnAutoResponderEdit.setEnabled((rowCount > 0));
                btnAutoResponderRemove.setEnabled((rowCount > 0));
            }
        });

        this.tableAutoResponder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        // selected
        this.tableAutoResponder.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableAutoResponder.getColumnModel().getColumn(0).setPreferredWidth(20);
        this.tableAutoResponder.getColumnModel().getColumn(0).setMaxWidth(30);

        // method
        this.tableAutoResponder.getColumnModel().getColumn(1).setMinWidth(40);
        this.tableAutoResponder.getColumnModel().getColumn(1).setPreferredWidth(60);
        this.tableAutoResponder.getColumnModel().getColumn(1).setMaxWidth(80);

        // match
//        this.tableAutoResponder.getColumnModel().getColumn(2).setMinWidth(40);
//        this.tableAutoResponder.getColumnModel().getColumn(2).setPreferredWidth(100);
//        this.tableAutoResponder.getColumnModel().getColumn(2).setMaxWidth(180);
        // regex
        this.tableAutoResponder.getColumnModel().getColumn(3).setMinWidth(20);
        this.tableAutoResponder.getColumnModel().getColumn(3).setPreferredWidth(30);
        this.tableAutoResponder.getColumnModel().getColumn(3).setMaxWidth(40);

        // icase
        this.tableAutoResponder.getColumnModel().getColumn(4).setMinWidth(20);
        this.tableAutoResponder.getColumnModel().getColumn(4).setPreferredWidth(30);
        this.tableAutoResponder.getColumnModel().getColumn(4).setMaxWidth(40);

        // body
        this.tableAutoResponder.getColumnModel().getColumn(5).setMinWidth(20);
        this.tableAutoResponder.getColumnModel().getColumn(5).setPreferredWidth(30);
        this.tableAutoResponder.getColumnModel().getColumn(5).setMaxWidth(40);

        // mime
//        this.tableAutoResponder.getColumnModel().getColumn(6).setMinWidth(40);
//        this.tableAutoResponder.getColumnModel().getColumn(6).setPreferredWidth(100);
//        this.tableAutoResponder.getColumnModel().getColumn(6).setMaxWidth(180);
//        // replace
//        this.tableAutoResponder.getColumnModel().getColumn(7).setMinWidth(40);
//        this.tableAutoResponder.getColumnModel().getColumn(7).setPreferredWidth(100);
//        this.tableAutoResponder.getColumnModel().getColumn(7).setMaxWidth(180);
    }

    public AutoResponderProperty getProperty() {
        AutoResponderProperty autoResponderProperty = new AutoResponderProperty();
        autoResponderProperty.setAutoResponderEnable(this.btnEnable.isSelected());
        autoResponderProperty.setForceHostNameResolv(this.chkHostNameForceResolv.isSelected());
        autoResponderProperty.setAutoResponderItemList(this.getAutoResponderItemList());
        return autoResponderProperty;
    }

    public void setProperty(AutoResponderProperty autoResponderProperty) {
        this.setAutoResponderItemList(autoResponderProperty.getAutoResponderItemList());
        this.btnEnable.setSelected(autoResponderProperty.getAutoResponderEnable());
        this.chkHostNameForceResolv.setSelected(autoResponderProperty.isHostNameForceResolv());
    }

    private void btnAutoResponderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoResponderAddActionPerformed
        this.showAutoResponderItemDlg(false);
    }//GEN-LAST:event_btnAutoResponderAddActionPerformed

    private void btnAutoResponderRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoResponderRemoveActionPerformed
        SwingUtil.removeItem(this.tableAutoResponder);
    }//GEN-LAST:event_btnAutoResponderRemoveActionPerformed

    private void btnAutoResponderEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoResponderEditActionPerformed
        this.showAutoResponderItemDlg(true);
    }//GEN-LAST:event_btnAutoResponderEditActionPerformed

    private final AutoMockServer mockServer = new AutoMockServer();

    public AutoMockServer getMockServer() {
        return this.mockServer;
    }

    private void tableAutoResponderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableAutoResponderKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_SPACE) {
            int[] rowSelect = this.tableAutoResponder.getSelectedRows();
            for (int i = 0; i < rowSelect.length; i++) {
                int rowIndex = this.tableAutoResponder.convertRowIndexToModel(rowSelect[i]);
                DefaultTableModel modelTable = (DefaultTableModel) this.tableAutoResponder.getModel();
                Object[] editRows = new Object[this.tableAutoResponder.getColumnCount()];
                for (int k = 0; k < editRows.length; k++) {
                    editRows[k] = modelTable.getValueAt(rowIndex, this.tableAutoResponder.convertColumnIndexToModel(k));
                }
                AutoResponderItem item = AutoResponderItem.fromObjects(editRows);
                item.setSelected(!item.isSelected());
                editRows = AutoResponderItem.toObjects(item);
                SwingUtil.updateItem(this.tableAutoResponder, editRows, rowSelect[i]);
            }
        }
    }//GEN-LAST:event_tableAutoResponderKeyTyped

    private void btnEnableStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnEnableStateChanged
        this.enableRule();
        firePropertyChange(AutoResponderProperty.AUTO_RESPONDER_PROPERTY, null, getProperty());
    }//GEN-LAST:event_btnEnableStateChanged

    private void btnUpArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpArrawActionPerformed
        int index = this.tableAutoResponder.getSelectedRow();
        index = this.modelAutoResponder.moveUp(index);
        this.tableAutoResponder.getSelectionModel().setSelectionInterval(index, index);
        firePropertyChange(AutoResponderProperty.AUTO_RESPONDER_PROPERTY, null, getProperty());
    }//GEN-LAST:event_btnUpArrawActionPerformed

    private void btnDownArrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownArrawActionPerformed
        int index = this.tableAutoResponder.getSelectedRow();
        index = this.modelAutoResponder.moveDn(index);
        this.tableAutoResponder.getSelectionModel().setSelectionInterval(index, index);
        firePropertyChange(AutoResponderProperty.AUTO_RESPONDER_PROPERTY, null, getProperty());
    }//GEN-LAST:event_btnDownArrawActionPerformed

    private void chkHostNameForceResolvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHostNameForceResolvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkHostNameForceResolvActionPerformed

    protected void enableRule() {
        if (this.btnEnable.isSelected()) {
            try {
                this.startMockServer();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "AutoResponder", JOptionPane.ERROR_MESSAGE);
                BurpExtension.helpers().issueAlert("AutoResponder", ex.getMessage(), MessageType.ERROR);
                this.btnEnable.setSelected(false);
                logger.log(Level.SEVERE, ex.getMessage(), ex);
            }
        } else {
            this.stopMockServer();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAutoResponderAdd;
    private javax.swing.JButton btnAutoResponderEdit;
    private javax.swing.JButton btnAutoResponderRemove;
    private javax.swing.JButton btnDownArraw;
    private javax.swing.JToggleButton btnEnable;
    private javax.swing.JButton btnUpArraw;
    private javax.swing.JCheckBox chkHostNameForceResolv;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAutoResponder;
    // End of variables declaration//GEN-END:variables

    private final AutoResponderItemDlg autoResponderDlg = new AutoResponderItemDlg(null, true);

    private void showAutoResponderItemDlg(boolean editMode) {
        try {
            this.autoResponderDlg.setLocationRelativeTo(this);
            if (editMode) {
                this.autoResponderDlg.setItem(getEditItem());
            } else {
                AutoResponderItem item = new AutoResponderItem();
                this.autoResponderDlg.setItem(item);
            }
            this.autoResponderDlg.setVisible(true);
            if (this.autoResponderDlg.getModalResult() == JOptionPane.OK_OPTION) {
                AutoResponderItem item = this.autoResponderDlg.getItem();
                this.setEditItem(item, editMode);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    private AutoResponderItem getEditItem() {
        AutoResponderItem item = new AutoResponderItem();
        Object editRows[] = SwingUtil.editItem(this.tableAutoResponder);
        if (editRows != null) {
            item = AutoResponderItem.fromObjects(editRows);
        }
        return item;
    }

    private void setEditItem(AutoResponderItem item, boolean update) {
        Object[] rows = AutoResponderItem.toObjects(item);
        SwingUtil.addOrUpdateItem(this.tableAutoResponder, rows, update);
    }

    public void setAutoResponderItemList(List<AutoResponderItem> list) {
        if (list != null) {
            this.modelAutoResponder.beginUpdate();
            this.modelAutoResponder.removeAll();
            Object editRows[] = new Object[0];
            for (int i = 0; i < list.size(); i++) {
                AutoResponderItem alertItem = list.get(i);
                editRows = AutoResponderItem.toObjects(alertItem);
                this.modelAutoResponder.addRow(editRows);
            }
            this.modelAutoResponder.endUpdate();
        }
    }

    public List<AutoResponderItem> getAutoResponderItemList() {
        javax.swing.JTable srcTable = this.tableAutoResponder;
        List<AutoResponderItem> list = new ArrayList<>();
        for (int i = 0; i < srcTable.getRowCount(); i++) {
            Object editRows[] = this.modelAutoResponder.getRows(i);
            list.add(AutoResponderItem.fromObjects(editRows));
        }
        return list;
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        if (e instanceof BindException) {
            this.btnEnable.setSelected(false);
            JOptionPane.showMessageDialog(this, e.getMessage(), "AutoResponder", JOptionPane.ERROR_MESSAGE);
            BurpExtension.helpers().issueAlert("AutoResponder", e.getMessage(), MessageType.ERROR);
        } else {
            BurpExtension.helpers().issueAlert("AutoResponder", e.getMessage(), MessageType.ERROR);
        }
    }

    protected void startMockServer() {
        this.mockServer.startServer(0);
    }

    protected void stopMockServer() {
        this.mockServer.stopServer();
    }

    @Override
    public void extensionUnloaded() {
        this.stopMockServer();
    }

}
