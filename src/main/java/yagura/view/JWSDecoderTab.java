package yagura.view;

import burp.BurpExtension;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.Payload;
import java.awt.Component;
import java.util.logging.Logger;
import extension.burp.IBurpTab;
import java.text.ParseException;
import passive.JWSToken;

/**
 *
 * @author isayan
 */
public class JWSDecoderTab extends javax.swing.JPanel implements IBurpTab {

    private final static Logger logger = Logger.getLogger(JWSDecoderTab.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private final JWSToken jwsInstance = new JWSToken();

    /**
     * Creates new form JWTWeakTokenScan
     */
    public JWSDecoderTab() {
        initComponents();
        customizeComponents();
    }

    private final JWSViewPanel panelJWSView = new JWSViewPanel();

    private void customizeComponents() {
        this.pnlToken.add(this.panelJWSView, java.awt.BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJTokenDecoder = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        txtJsonToken = new javax.swing.JTextArea();
        pnlAction = new javax.swing.JPanel();
        lblTokenValid = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnDecode = new javax.swing.JButton();
        btnSendToEncode = new javax.swing.JButton();
        pnlToken = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlJTokenDecoder.setPreferredSize(new java.awt.Dimension(125, 125));
        pnlJTokenDecoder.setLayout(new java.awt.BorderLayout());

        txtJsonToken.setColumns(20);
        txtJsonToken.setLineWrap(true);
        txtJsonToken.setRows(5);
        txtJsonToken.setPreferredSize(new java.awt.Dimension(212, 80));
        jScrollPane.setViewportView(txtJsonToken);

        pnlJTokenDecoder.add(jScrollPane, java.awt.BorderLayout.CENTER);

        pnlAction.setPreferredSize(new java.awt.Dimension(125, 125));
        pnlAction.setRequestFocusEnabled(false);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDecode.setText("Decode");
        btnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeActionPerformed(evt);
            }
        });

        btnSendToEncode.setText("To Encode");
        btnSendToEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToEncodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionLayout = new javax.swing.GroupLayout(pnlAction);
        pnlAction.setLayout(pnlActionLayout);
        pnlActionLayout.setHorizontalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSendToEncode, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlActionLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnDecode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTokenValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );
        pnlActionLayout.setVerticalGroup(
            pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlActionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSendToEncode)
                .addGap(50, 50, 50))
            .addGroup(pnlActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlActionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnDecode)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnClear)
                    .addGap(18, 18, 18)
                    .addComponent(lblTokenValid)
                    .addGap(63, 63, 63)))
        );

        pnlJTokenDecoder.add(pnlAction, java.awt.BorderLayout.EAST);

        add(pnlJTokenDecoder, java.awt.BorderLayout.NORTH);

        pnlToken.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlToken.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlToken.setPreferredSize(new java.awt.Dimension(100, 454));
        pnlToken.setLayout(new java.awt.BorderLayout());
        add(pnlToken, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeActionPerformed
        JWSToken token = jwsInstance.parseToken(this.txtJsonToken.getText().trim(), true);
        if (token != null) {
            this.lblTokenValid.setText("");
            this.panelJWSView.setJWS(token);
        } else {
            this.btnClearActionPerformed(null);
            this.lblTokenValid.setText(BUNDLE.getString("token.invalid.token"));
        }
    }//GEN-LAST:event_btnDecodeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.lblTokenValid.setText("");
        this.txtJsonToken.setText("");
        this.panelJWSView.clearJWS();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSendToEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToEncodeActionPerformed
        try {
            JWSHeader header = this.panelJWSView.getHeader();
            Payload payload = this.panelJWSView.getPayload();
            BurpExtension.getInstance().sendToJWSEncoder(header.toBase64URL().decodeToString(), payload.toBase64URL().decodeToString(), null);
        } catch (ParseException ex) {
        }
    }//GEN-LAST:event_btnSendToEncodeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecode;
    private javax.swing.JButton btnSendToEncode;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblTokenValid;
    private javax.swing.JPanel pnlAction;
    private javax.swing.JPanel pnlJTokenDecoder;
    private javax.swing.JPanel pnlToken;
    private javax.swing.JTextArea txtJsonToken;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "JWT Decoder";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    public void setHeaderJSON(String value, boolean pretty) {
        this.panelJWSView.setHeaderJSON(value, pretty);
    }

    public void setPayloadJSON(String value, boolean pretty) {
        this.panelJWSView.setPayloadJSON(value, pretty);
    }

    public void setSignature(String value) {
        this.panelJWSView.setSignature(value);
    }

}
