package yagura.view;

import burp.BurpExtender;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IMessageEditorTabFactory;
import burp.IResponseInfo;
import extend.view.base.HttpMessage;
import extend.view.base.HttpResponse;
import extend.util.BurpWrap;
import extend.util.ConvertUtil;
import extend.util.external.TransUtil;
import extend.util.Util;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.text.ParseException;
import java.util.EnumSet;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class HtmlCommetViewTab extends javax.swing.JPanel implements IMessageEditorTabFactory, IMessageEditorTab {
    private final static Logger logger = Logger.getLogger(HtmlCommetViewTab.class.getName());

    /**
     * Creates new form HtmlCommetViewTab
     */
    public HtmlCommetViewTab() {
        initComponents();
        customizeComponents();
    }

    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

//    private final EditorKit htmlStyleEditorKit = new StyledEditorKit() {
//        @Override
//        public Document createDefaultDocument() {
//            return new HTMLSyntaxDocument();
//        }
//    };

    private org.fife.ui.rtextarea.RTextScrollPane scrollHtmlComment;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtHtmlComment;        
    
    private void customizeComponents() {

        /*** UI design start ***/

        this.txtHtmlComment = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea(); 
        this.scrollHtmlComment = new org.fife.ui.rtextarea.RTextScrollPane(this.txtHtmlComment);

        this.txtHtmlComment.setCodeFoldingEnabled(true);
        this.txtHtmlComment.setClearWhitespaceLinesEnabled(true);
        this.txtHtmlComment.setHighlightCurrentLine(true);       
        this.txtHtmlComment.setCurrentLineHighlightColor(SystemColor.textHighlight);
        this.txtHtmlComment.setBackground(SystemColor.text);
        this.txtHtmlComment.setEditable(false);
//        scrollURaw.setViewportView(txtURaw);

        add(this.scrollHtmlComment, java.awt.BorderLayout.CENTER);

        /*** UI design end ***/

        this.quickSearchTab.setSelectedTextArea(this.txtHtmlComment);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        this.quickSearchTab.getUniqCheckBox().setVisible(true);
        this.quickSearchTab.getUniqCheckBox().addItemListener(encodingItemStateChanged);

//        this.txtHtmlComment.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
//        this.txtHtmlComment.setContentType("text/html");

        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);
    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageEncoding(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    public void setMessageFont(Font font) {
        this.txtHtmlComment.setFont(font);
    }

    private HttpMessage message = null;

    public void setMessageEncoding(String encoding) {
        try {
            if (this.message == null) {
                return;
            }
            final boolean uniq = this.quickSearchTab.getUniqCheckBox().isSelected();

            this.txtHtmlComment.setText("");
            if (this.message != null) {
                SwingWorker swText = new SwingWorker<String, Object>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        publish("...");
                        String comments[] = TransUtil.extractHTMLComments(Util.decodeMessage(message.getBodyBytes(), encoding), uniq);
                        return TransUtil.join("\r\n", comments);
                    }

                    protected void process(List<Object> chunks) {
                        txtHtmlComment.setText("Heavy Processing" + ConvertUtil.repeat("...", chunks.size()));
                    }

                    protected void done() {
                        try {
                            txtHtmlComment.setText(get());
                            txtHtmlComment.setCaretPosition(0);
                            quickSearchTab.clearViewAndSearch();
                        } catch (InterruptedException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        } catch (ExecutionException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        }
                    }
                };
                swText.execute();                    
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void setMessage(byte[] content, boolean isRequest) {
        try {
            BurpExtender extenderImpl = BurpExtender.getInstance();
            String guessCharset = null;
            HttpMessage httpmessage = null;
            if (!isRequest) {
                HttpResponse response = HttpResponse.parseHttpResponse(content);
                httpmessage = response;
                guessCharset = response.getGuessCharset();
                this.message = httpmessage;
            }
            this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
            this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
            encodingItemStateChanged.itemStateChanged(null);
            this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        } catch (ParseException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public byte[] getMessage() {
        if (this.message != null) {
            return this.message.getMessageBytes();
        } else {
            return new byte[]{};
        }
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

    public String getSelectedText() {
        String selectText = this.txtHtmlComment.getSelectedText();
        return selectText;
    }

    @Override
    public IMessageEditorTab createNewInstance(IMessageEditorController controller, boolean editable) {
        this.txtHtmlComment.setEditable(false);
        return this;
    }

    @Override
    public String getTabCaption() {
        return "HTML Comment";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isMessageRequest) {
        if (content == null || content.length == 0) {
            return false;
        }
        EnumSet<UniversalViewProperty.UniversalView> view = BurpExtender.getInstance().getProperty().getEncodingProperty().getMessageView();
        if (!view.contains(UniversalViewProperty.UniversalView.HTML_COMMENT)) {
            return false;
        }
        boolean mimeHTMLType = false;
        byte[] body = new byte[0];
        if (!isMessageRequest) {
            IResponseInfo resInfo = BurpExtender.getHelpers().analyzeResponse(content);
            String mimeType = resInfo.getInferredMimeType();
            mimeHTMLType = ("HTML".equals(mimeType) || "XML".equals(mimeType));
            body = BurpWrap.getResponseBody(resInfo, content);
        }
        if (body.length > 0 && mimeHTMLType) {
            return TransUtil.extractHTMLComments(Util.getRawStr(body), false).length  > 0;
        } else {
            return false;
        }
    }

    public void clearView() {
        this.quickSearchTab.clearView();
    }
        
}
