package yagura.view;

import burp.BurpExtension;
import extension.burp.FilterProperty;
import extension.helpers.StringUtil;
import extension.view.base.JavaSyntaxDocument;
import java.util.List;
import java.util.Locale;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticListener;
import yagura.dynamic.BambdaTemplete;
import yagura.dynamic.SimpleJavaCompilerEngine;

/**
 *
 * @author isayan
 */
public class FilterBambdaPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterBanbdaPanel
     */
    public FilterBambdaPanel() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFunction = new javax.swing.JPanel();
        lblFunction = new javax.swing.JLabel();
        splitComple = new javax.swing.JSplitPane();
        plnCompleError = new javax.swing.JPanel();
        lblErrorMessage = new javax.swing.JLabel();
        scrollErrorMessage = new javax.swing.JScrollPane();
        txtErrorMessage = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        pnlFunction.setLayout(new java.awt.BorderLayout());

        lblFunction.setText("Function");
        pnlFunction.add(lblFunction, java.awt.BorderLayout.CENTER);

        add(pnlFunction, java.awt.BorderLayout.NORTH);

        splitComple.setDividerLocation(150);
        splitComple.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        plnCompleError.setLayout(new java.awt.BorderLayout());

        lblErrorMessage.setText("Message");
        plnCompleError.add(lblErrorMessage, java.awt.BorderLayout.NORTH);

        scrollErrorMessage.setViewportView(txtErrorMessage);

        plnCompleError.add(scrollErrorMessage, java.awt.BorderLayout.CENTER);

        splitComple.setBottomComponent(plnCompleError);

        add(splitComple, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final EditorKit javaStyleEditorKit = new StyledEditorKit() {
        @Override
        public Document createDefaultDocument() {
            return new JavaSyntaxDocument();
        }
    };

    private final javax.swing.JScrollPane scrollBabda = new javax.swing.JScrollPane();
    private final javax.swing.JEditorPane txtBambda = new javax.swing.JEditorPane();

    private void customizeComponents() {
        this.txtBambda.setEditorKitForContentType("text/java", this.javaStyleEditorKit);
        this.txtBambda.setContentType("text/java");
        this.scrollBabda.setViewportView(this.txtBambda);
        this.splitComple.setTopComponent(this.scrollBabda);
        this.splitComple.setOneTouchExpandable(true);
        this.setFilterCategory(FilterProperty.FilterCategory.HTTP);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblFunction;
    private javax.swing.JPanel plnCompleError;
    private javax.swing.JPanel pnlFunction;
    private javax.swing.JScrollPane scrollErrorMessage;
    private javax.swing.JSplitPane splitComple;
    private javax.swing.JTextPane txtErrorMessage;
    // End of variables declaration//GEN-END:variables

    private FilterProperty.FilterCategory filterCategory = FilterProperty.FilterCategory.HTTP;

    private Diagnostic diagnosticReport = null;

    private final DiagnosticListener listener = new DiagnosticListener() {

        @Override
        public void report(Diagnostic diagnostic) {
            diagnosticReport = diagnostic;
            lblErrorMessage.setText(String.format(COMPAILATION_MESSAGE_FMT, diagnostic.getLineNumber()));
            txtErrorMessage.setText(diagnostic.getMessage(Locale.getDefault()));
        }

    };

    public FilterProperty.FilterCategory getFilterCategory() {
        return this.filterCategory;
    }

    public void setFilterCategory(FilterProperty.FilterCategory filterCategory) {
        this.filterCategory = filterCategory;
        this.clearReport();
    }

    private final static String COMPAILATION_MESSAGE_FMT = "Compilation errors(%d)";

    private final SimpleJavaCompilerEngine engine = new SimpleJavaCompilerEngine();

    public Diagnostic getReport() {
        return this.diagnosticReport;
    }

    public String getReportString() {
        return this.txtErrorMessage.getText();
    }

    public void clearReport() {
        this.diagnosticReport = null;
        this.lblFunction.setText(BambdaTemplete.getFunctionMessage(this.filterCategory));
        this.lblErrorMessage.setText("");
        this.txtErrorMessage.setText("");
        this.splitComple.setDividerLocation(this.getPreferredSize().height);
    }

    public void setCode(String code) {
        this.txtBambda.setText(code);
    }

    public String getCode() {
        return this.txtBambda.getText();
    }

    public BambdaTemplete source() {
        String className = StringUtil.randomIdent(32);
        return BambdaTemplete.create(className, this.getCode(), this.filterCategory);
    }

    public Class compile(BambdaTemplete templete) {
        this.engine.setExtensionClassLoactions(List.of(BurpExtension.api().extension().filename()));
        return this.engine.compile(templete.getFunctionName(), templete.getContent(), listener);
    }

}
