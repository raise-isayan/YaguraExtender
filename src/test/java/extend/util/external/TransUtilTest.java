package extend.util.external;

import extend.util.external.TransUtil.EncodePattern;
import extension.helpers.ConvertUtil;
import extension.helpers.MatchUtil;
import extension.helpers.SmartCodec;
import extension.helpers.StringUtil;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import org.apache.commons.codec.digest.Blake3;
import org.apache.commons.codec.digest.Sha2Crypt;
import org.apache.commons.codec.digest.UnixCrypt;

/**
 *
 * @author isayan
 */
public class TransUtilTest {

    private final static Logger logger = Logger.getLogger(TransUtilTest.class.getName());

    public TransUtilTest() {
    }

    @BeforeAll
    public static void setUpClass() throws Exception {
    }

    @AfterAll
    public static void tearDownClass() throws Exception {
    }

    @BeforeEach
    public void setUp() {
    }

    @AfterEach
    public void tearDown() {
    }

    @Test
    public void testCharset() {
        System.out.println("char:" + StandardCharsets.ISO_8859_1);
    }

    @Test
    public void testHexDump() {
        String output = ">あいうえお<";
        byte row[] = StringUtil.getBytesRaw(output);
        System.out.println(row.length);
//        TransUtil.hexDump();
    }

    @Test
    public void testNewLine() {
        System.out.println(TransUtil.newLine("\r\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 76));
    }

    @Test
    public void testDecodeTest() {
        try {
            String paramValue = SmartCodec.toUrlDecode("%82%a0%82%a2%82%a4%82%a6%82%a8", "Shift_JIS");
            System.out.println("paramValue:" + paramValue);
            String encodeHex = TransUtil.toByteHex1Encode(StringUtil.getBytesCharset(paramValue, "Shift_JIS"), SmartCodec.ENCODE_PATTERN_ALPHANUM, false);
            System.out.println(String.format("%s", new Object[]{encodeHex}));
        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            fail(ex.getMessage());
        }
    }

    /**
     * Test of getSmartDecode method, of class TransUtil.
     */
    @Test
    public void testGetSmartDecode() {
        System.out.println("getSmartDecode");
        assertEquals(EncodePattern.URL_STANDARD, TransUtil.getSmartDecode("%21%22%23%24%25%26%27%28%29%3d%7e%7c%60%7b%7d*%2b%3c%3e%3f_%5cabcedf"));
        assertEquals(EncodePattern.URL_STANDARD, TransUtil.getSmartDecode("%21%22%23%24%25%26%27%28%29%3D%7E%7C%60%7B%7D*%2B%3C%3E%3F_%5cabcedf"));
        assertEquals(EncodePattern.URL_STANDARD, TransUtil.getSmartDecode("%3d%3d"));

        assertEquals(EncodePattern.URL_UNICODE, TransUtil.getSmartDecode("%u3042%u3044%u3046%u3048%u304a"));
        assertEquals(EncodePattern.URL_UNICODE, TransUtil.getSmartDecode("%U3042%U3044%U3046%U3048%U304A"));

        assertEquals(EncodePattern.BYTE_HEX1, TransUtil.getSmartDecode("\\x82\\xa0\\x82\\xa2\\x82\\xa4\\x82\\xa6\\x82\\xa8"));
        assertEquals(EncodePattern.BYTE_HEX1, TransUtil.getSmartDecode("\\x82\\xA0\\x82\\xA2\\x82\\xA4\\x82\\xA6\\x82\\xA8"));

        assertEquals(EncodePattern.BASE64, TransUtil.getSmartDecode("gqmCq4Ktgq+CsQ=="));
        assertEquals(EncodePattern.BASE64, TransUtil.getSmartDecode("pKukraSvpLGksw=="));
        assertEquals(EncodePattern.BASE64, TransUtil.getSmartDecode("44GL44GN44GP44GR44GT"));
        assertEquals(EncodePattern.BASE64, TransUtil.getSmartDecode(""));
        assertEquals(EncodePattern.BASE64, TransUtil.getSmartDecode(""));
        assertEquals(EncodePattern.HTML, TransUtil.getSmartDecode("&#33;&#34;&#35;&#36;&#37;&#38;&#39;&#40;&#41;&#61;&#126;&#124;&#96;&#123;&#125;&#42;&#43;&#60;&#62;&#63;&#95;&#92;&#97;&#98;&#99;&#101;&#100;&#102;"));

        assertEquals(EncodePattern.HTML, TransUtil.getSmartDecode("&#x21;&#x22;&#x23;&#x24;&#x25;&#x26;&#x27;&#x28;&#x29;&#x3d;&#x7e;&#x7c;&#x60;&#x7b;&#x7d;&#x2a;&#x2b;&#x3c;&#x3e;&#x3f;&#x5f;&#x5c;&#x61;&#x62;&#x63;&#x65;&#x64;&#x66;"));
        assertEquals(EncodePattern.HTML, TransUtil.getSmartDecode("&#X21;&#X22;&#X23;&#X24;&#X25;&#X26;&#X27;&#X28;&#X29;&#X3D;&#X7E;&#X7C;&#X60;&#X7B;&#X7D;&#X2A;&#X2B;&#X3C;&#X3E;&#X3F;&#X5F;&#X5C;&#X61;&#X62;&#X63;&#X65;&#X64;&#X66;"));

        assertEquals(EncodePattern.HTML, TransUtil.getSmartDecode("<html><h4>&#12510;&#12523;&#12481;&#12496;&#12452;&#12488;&#12486;&#12473;&#12488;</h4></html>"));

        assertEquals(EncodePattern.UNICODE, TransUtil.getSmartDecode("\\u3042\\u3044\\u3046\\u3048\\u304a"));
        assertEquals(EncodePattern.UNICODE, TransUtil.getSmartDecode("\\U3042\\U3044\\U3046\\U3048\\U304A"));

        assertEquals(null, TransUtil.getSmartDecode("<<<<<"));

    }

    /**
     * Test of toSmartDecode method, of class TransUtil.
     */
    @Test
    public void testToSmartDecode() {
        try {
            System.out.println("toSmartDecode");
            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("%21%22%23%24%25%26%27%28%29%3d%7e%7c%60%7b%7d*%2b%3c%3e%3f_%5cabcedf"));
            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("%21%22%23%24%25%26%27%28%29%3D%7E%7C%60%7B%7D*%2B%3C%3E%3F_%5cabcedf"));

//            assertEquals("入口", TransUtil.toSmartDecode("%93%fc%8c%fb"));
//            assertEquals("入口", TransUtil.toSmartDecode("%93%FC%8C%FB"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("%82%a0%82%a2%82%a4%82%a6%82%a8"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("%82%A0%82%A2%82%A4%82%A6%82%A8"));

            assertEquals("あいうえお", TransUtil.toSmartDecode("%a4%a2%a4%a4%a4%a6%a4%a8%a4%aa"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("%A4%A2%A4%A4%A4%A6%A4%A8%A4%AA"));

            assertEquals("あいうえお", TransUtil.toSmartDecode("%e3%81%82%e3%81%84%e3%81%86%e3%81%88%e3%81%8a"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A"));

            assertEquals("かきくけこ", TransUtil.toSmartDecode("gqmCq4Ktgq+CsQ=="));
            assertEquals("かきくけこ", TransUtil.toSmartDecode("pKukraSvpLGksw=="));
            assertEquals("かきくけこ", TransUtil.toSmartDecode("44GL44GN44GP44GR44GT"));

            assertEquals("かきくけこ", TransUtil.toSmartDecode("gqmCq\r\n4Ktgq+CsQ=="));

            System.out.println("getSmartDecode:" + TransUtil.getSmartDecode("&#33;&#34;&#35;&#36;&#37;&#38;&#39;&#40;&#41;&#61;&#126;&#124;&#96;&#123;&#125;&#42;&#43;&#60;&#62;&#63;&#95;&#92;&#97;&#98;&#99;&#101;&#100;&#102;"));

            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("&#33;&#34;&#35;&#36;&#37;&#38;&#39;&#40;&#41;&#61;&#126;&#124;&#96;&#123;&#125;&#42;&#43;&#60;&#62;&#63;&#95;&#92;&#97;&#98;&#99;&#101;&#100;&#102;"));

            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("&#x21;&#x22;&#x23;&#x24;&#x25;&#x26;&#x27;&#x28;&#x29;&#x3d;&#x7e;&#x7c;&#x60;&#x7b;&#x7d;&#x2a;&#x2b;&#x3c;&#x3e;&#x3f;&#x5f;&#x5c;&#x61;&#x62;&#x63;&#x65;&#x64;&#x66;"));
            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("&#X21;&#X22;&#X23;&#X24;&#X25;&#X26;&#X27;&#X28;&#X29;&#X3D;&#X7E;&#X7C;&#X60;&#X7B;&#X7D;&#X2A;&#X2B;&#X3C;&#X3E;&#X3F;&#X5F;&#X5C;&#X61;&#X62;&#X63;&#X65;&#X64;&#X66;"));

            assertEquals("<html><h4>マルチバイトテスト</h4></html>", TransUtil.toSmartDecode("<html><h4>&#12510;&#12523;&#12481;&#12496;&#12452;&#12488;&#12486;&#12473;&#12488;</h4></html>"));

            StringBuffer charset = new StringBuffer("Shift_JIS");
            assertEquals("あいうえお", TransUtil.toSmartDecode("\\x82\\xa0\\x82\\xa2\\x82\\xa4\\x82\\xa6\\x82\\xa8", EncodePattern.BYTE_HEX1, false, charset));
            assertEquals("Shift_JIS", charset.toString());
            assertEquals("!\"#$%&'()=~|`{}*+<>?_\\abcedfあいうえお!\"#$%&'()=~|`{}*+<>?_\\abcedf", TransUtil.toSmartDecode("!\"#$%&'()=~|`{}*+<>?_\\abcedf\\x82\\xa0\\x82\\xa2\\x82\\xa4\\x82\\xa6\\x82\\xa8!\"#$%&'()=~|`{}*+<>?_\\abcedf", EncodePattern.BYTE_HEX1, false, charset));
            assertEquals("Shift_JIS", charset.toString());

            charset = new StringBuffer();
            assertEquals("あいうえお", TransUtil.toSmartDecode("\\x82\\xa0\\x82\\xa2\\x82\\xa4\\x82\\xa6\\x82\\xa8", EncodePattern.BYTE_HEX1, false, charset));
            assertEquals("Shift_JIS", charset.toString());

            charset = new StringBuffer("8859_1");
            byte b[] = new byte[]{(byte) 0x82, (byte) 0xa0, (byte) 0x82, (byte) 0xa2, (byte) 0x82, (byte) 0xa4, (byte) 0x82, (byte) 0xa6, (byte) 0x82, (byte) 0xa8};
            assertEquals(new String(b, "8859_1"), TransUtil.toSmartDecode("\\x82\\xa0\\x82\\xa2\\x82\\xa4\\x82\\xa6\\x82\\xa8", EncodePattern.BYTE_HEX1, false, charset));
            assertEquals("8859_1", charset.toString());

            byte o[] = new byte[]{(byte) 0202, (byte) 0240, (byte) 0202, (byte) 0242, (byte) 0202, (byte) 0244, (byte) 0202, (byte) 0246, (byte) 0202, (byte) 0250, (byte) 012};
            assertEquals(new String(o, "8859_1"), TransUtil.toSmartDecode("\\202\\240\\202\\242\\202\\244\\202\\246\\202\\250\\12", EncodePattern.BYTE_OCT, false, charset));
            assertEquals("8859_1", charset.toString());

            assertEquals("あいうえお", TransUtil.toSmartDecode("\\u3042\\u3044\\u3046\\u3048\\u304a"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("\\U3042\\U3044\\U3046\\U3048\\U304A"));

            assertEquals("あいうえお", TransUtil.toSmartDecode("%u3042%u3044%u3046%u3048%u304a"));
            assertEquals("あいうえお", TransUtil.toSmartDecode("%U3042%U3044%U3046%U3048%U304A"));
        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            fail(ex.getMessage());
        }

    }

    @Test
    public void testBase64() {

        assertEquals("!\"#$%&'()=~", TransUtil.toBase64Decode("ISIjJCUmJygpPX4=", StandardCharsets.ISO_8859_1));
        assertEquals("qwertyuiopASDFGHJKL", TransUtil.toBase64Decode("cXdlcnR5dWlvcEFTREZHSEpLTA==", StandardCharsets.ISO_8859_1));

        assertEquals(ConvertUtil.toBase64Encode("12345667890q", StandardCharsets.ISO_8859_1, false), TransUtil.toBase64Encode("12345667890q", StandardCharsets.ISO_8859_1, false));
        assertEquals(ConvertUtil.toBase64Encode("!\"#$%&'()=", StandardCharsets.ISO_8859_1, false), TransUtil.toBase64Encode("!\"#$%&'()=", StandardCharsets.ISO_8859_1, false));
        assertEquals(ConvertUtil.toBase64Encode("qwertyuiopASDFGHJKL", StandardCharsets.ISO_8859_1, false), TransUtil.toBase64Encode("qwertyuiopASDFGHJKL", StandardCharsets.ISO_8859_1, false));

        assertEquals("", TransUtil.toBase64Encode("", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zg==", TransUtil.toBase64Encode("f", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zm8=", TransUtil.toBase64Encode("fo", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zm9v", TransUtil.toBase64Encode("foo", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zm9vYg==", TransUtil.toBase64Encode("foob", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zm9vYmE=", TransUtil.toBase64Encode("fooba", StandardCharsets.ISO_8859_1, true));
        assertEquals("Zm9vYmFy", TransUtil.toBase64Encode("foobar", StandardCharsets.ISO_8859_1, true));

        assertEquals("", TransUtil.toBase64Encode("", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zg", TransUtil.toBase64Encode("f", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zm8", TransUtil.toBase64Encode("fo", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zm9v", TransUtil.toBase64Encode("foo", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zm9vYg", TransUtil.toBase64Encode("foob", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zm9vYmE", TransUtil.toBase64Encode("fooba", StandardCharsets.ISO_8859_1, false));
        assertEquals("Zm9vYmFy", TransUtil.toBase64Encode("foobar", StandardCharsets.ISO_8859_1, false));

    }

    @Test
    public void testBaseN() {

        assertEquals("", TransUtil.toBase32Encode("", StandardCharsets.ISO_8859_1, true));
        assertEquals("MY======", TransUtil.toBase32Encode("f", StandardCharsets.ISO_8859_1, true));
        assertEquals("MZXQ====", TransUtil.toBase32Encode("fo", StandardCharsets.ISO_8859_1, true));
        assertEquals("MZXW6===", TransUtil.toBase32Encode("foo", StandardCharsets.ISO_8859_1, true));
        assertEquals("MZXW6YQ=", TransUtil.toBase32Encode("foob", StandardCharsets.ISO_8859_1, true));
        assertEquals("MZXW6YTB", TransUtil.toBase32Encode("fooba", StandardCharsets.ISO_8859_1, true));
        assertEquals("MZXW6YTBOI======", TransUtil.toBase32Encode("foobar", StandardCharsets.ISO_8859_1, true));

        assertEquals("", TransUtil.toBase32Encode("", StandardCharsets.ISO_8859_1, false));
        assertEquals("MY", TransUtil.toBase32Encode("f", StandardCharsets.ISO_8859_1, false));
        assertEquals("MZXQ", TransUtil.toBase32Encode("fo", StandardCharsets.ISO_8859_1, false));
        assertEquals("MZXW6", TransUtil.toBase32Encode("foo", StandardCharsets.ISO_8859_1, false));
        assertEquals("MZXW6YQ", TransUtil.toBase32Encode("foob", StandardCharsets.ISO_8859_1, false));
        assertEquals("MZXW6YTB", TransUtil.toBase32Encode("fooba", StandardCharsets.ISO_8859_1, false));
        assertEquals("MZXW6YTBOI", TransUtil.toBase32Encode("foobar", StandardCharsets.ISO_8859_1, false));

        assertEquals("", TransUtil.toBase16Encode("", StandardCharsets.ISO_8859_1, true));
        assertEquals("66", TransUtil.toBase16Encode("f", StandardCharsets.ISO_8859_1, true));
        assertEquals("666F", TransUtil.toBase16Encode("fo", StandardCharsets.ISO_8859_1, true));
        assertEquals("666F6F", TransUtil.toBase16Encode("foo", StandardCharsets.ISO_8859_1, true));
        assertEquals("666F6F62", TransUtil.toBase16Encode("foob", StandardCharsets.ISO_8859_1, true));
        assertEquals("666F6F6261", TransUtil.toBase16Encode("fooba", StandardCharsets.ISO_8859_1, true));
        assertEquals("666F6F626172", TransUtil.toBase16Encode("foobar", StandardCharsets.ISO_8859_1, true));

        assertEquals("", TransUtil.toBase16Encode("", StandardCharsets.ISO_8859_1, false));
        assertEquals("66", TransUtil.toBase16Encode("f", StandardCharsets.ISO_8859_1, false));
        assertEquals("666F", TransUtil.toBase16Encode("fo", StandardCharsets.ISO_8859_1, false));
        assertEquals("666F6F", TransUtil.toBase16Encode("foo", StandardCharsets.ISO_8859_1, false));
        assertEquals("666F6F62", TransUtil.toBase16Encode("foob", StandardCharsets.ISO_8859_1, false));
        assertEquals("666F6F6261", TransUtil.toBase16Encode("fooba", StandardCharsets.ISO_8859_1, false));
        assertEquals("666F6F626172", TransUtil.toBase16Encode("foobar", StandardCharsets.ISO_8859_1, false));

    }

    /**
     * Test of toLocalDate method, of class TransUtil.
     */
    @Test
    public void toLocalDate() {
        for (int i = -12; i <= 12; i++) {
            ZoneOffset offset = ZoneOffset.ofHours(i);
            System.out.println("x:" + i + " " + offset.getId());
        }
    }

    /**
     * Test of toSmartDecode method, of class TransUtil.
     */
    @Test
    public void testToSmartDecode_unmatch() {
        assertEquals("<<<<<<<<<<<", TransUtil.toSmartDecode("<<<<<<<<<<<"));
    }

    /**
     * Test of toMd5Sum method, of class TransUtil.
     */
    @Test
    public void testToMd5Sum() {
        System.out.println("toMd5Sum");
        assertEquals("098f6bcd4621d373cade4e832627b4f6", TransUtil.toMd5Sum("test", false));
        assertEquals("d41d8cd98f00b204e9800998ecf8427e", TransUtil.toMd5Sum("", false));
    }

    /**
     * Test of toSHA1Sum method, of class TransUtil.
     */
    @Test
    public void testToSHA1Sum() {
        System.out.println("toSHA1Sum");
        assertEquals("a94a8fe5ccb19ba61c4c0873d391e987982fbbd3", TransUtil.toSHA1Sum("test", false));
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", TransUtil.toSHA1Sum("", false));
    }

    /**
     * Test of toSHA256Sum method, of class TransUtil.
     */
    @Test
    public void testToSHA256Sum() {
        System.out.println("toSHA256Sum");
        assertEquals("9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", TransUtil.toSHA256Sum("test", false));
        assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", TransUtil.toSHA256Sum("", false));
    }

    /**
     * Test of toSHA384Sum method, of class TransUtil.
     */
    @Test
    public void testToSHA384Sum() {
        System.out.println("toSHA384Sum");
        assertEquals("768412320f7b0aa5812fce428dc4706b3cae50e02a64caa16a782249bfe8efc4b7ef1ccb126255d196047dfedf17a0a9", TransUtil.toSHA384Sum("test", false));
        assertEquals("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", TransUtil.toSHA384Sum("", false));
    }

    /**
     * Test of toSHA512Sum method, of class TransUtil.
     */
    @Test
    public void testToSHA512Sum() {
        System.out.println("toSHA512Sum");
        assertEquals("ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff", TransUtil.toSHA512Sum("test", false));
        assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", TransUtil.toSHA512Sum("", false));
    }

    /**
     * Test of UTF7Decode method, of class TransUtil.
     */
    @Test
    public void testToUTF7Decode() {
        System.out.println("toUTF7Decode");
        assertEquals("<", TransUtil.toUTF7Decode("+ADw-"));
        assertEquals("<script>", TransUtil.toUTF7Decode("+ADw-script+AD4-"));
        assertEquals("+", TransUtil.toUTF7Decode("+-"));
    }

    /**
     * Test of UTF7Decode method, of class TransUtil.
     */
    @Test
    public void testTotoUTF7Encode() {
        System.out.println("toUTF7Encode");
        assertEquals("+ADw-", TransUtil.toUTF7Encode("<"));
        assertEquals("+ADw-script+AD4-", TransUtil.toUTF7Encode("<script>"));
        assertEquals("+-", TransUtil.toUTF7Encode("+"));
    }

    /**
     * Test of testToHexEncode method, of class TransUtil.
     */
    @Test
    public void testToHexEncode() {
        try {
            System.out.println("testToHex1Encode");
            assertEquals("6162636465660d0a21226768692324256a6b66", TransUtil.toByteHexEncode(StringUtil.getBytesRaw("abcdef\r\n!\"ghi#$%jkf"), false));
            assertEquals("6162636465660D0A21226768692324256A6B66", TransUtil.toByteHexEncode(StringUtil.getBytesRaw("abcdef\r\n!\"ghi#$%jkf"), true));

            assertEquals("6162636465660d0a21226768692324256a6b66", TransUtil.toByteHexEncode("abcdef\r\n!\"ghi#$%jkf", "8859_1", false));
            assertEquals("6162636465660D0A21226768692324256A6B66", TransUtil.toByteHexEncode("abcdef\r\n!\"ghi#$%jkf", "8859_1", true));

            assertEquals("6162636465660d0a21226768692324256a6b66", TransUtil.toByteHexEncode("abcdef\r\n!\"ghi#$%jkf", StandardCharsets.ISO_8859_1, false));
            assertEquals("6162636465660D0A21226768692324256A6B66", TransUtil.toByteHexEncode("abcdef\r\n!\"ghi#$%jkf", StandardCharsets.ISO_8859_1, true));

            assertEquals("e38182e38184e38186e38188e3818a", TransUtil.toByteHexEncode("あいうえお", StandardCharsets.UTF_8, false));
            assertEquals("E38182E38184E38186E38188E3818A", TransUtil.toByteHexEncode("あいうえお", StandardCharsets.UTF_8, true));

        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            fail(ex.getMessage());
        }
    }

    /**
     * Test of testToHex1Encode method, of class TransUtil.
     */
    @Test
    public void testToHex1Encode() {
        try {
            System.out.println("testToHex1Encode");
            assertEquals("abcdef\\x0d\\x0a\\x21\\x22ghi\\x23\\x24\\x25jkf", TransUtil.toByteHex1Encode("abcdef\r\n!\"ghi#$%jkf", "8859_1", false));
            assertEquals("abcdef\\X0D\\X0A\\X21\\X22ghi\\X23\\X24\\X25jkf", TransUtil.toByteHex1Encode("abcdef\r\n!\"ghi#$%jkf", "8859_1", true));

            assertEquals("abcdef\\x0d\\x0a\\x21\\x22ghi\\x23\\x24\\x25jkf", TransUtil.toByteHex1Encode("abcdef\r\n!\"ghi#$%jkf", StandardCharsets.ISO_8859_1, false));
            assertEquals("abcdef\\X0D\\X0A\\X21\\X22ghi\\X23\\X24\\X25jkf", TransUtil.toByteHex1Encode("abcdef\r\n!\"ghi#$%jkf", StandardCharsets.ISO_8859_1, true));

            assertEquals("\\x61\\x62\\x63\\x64\\x65\\x66\\x0d\\x0a\\x21\\x22\\x67\\x68\\x69\\x23\\x24\\x25\\x6a\\x6b\\x66", TransUtil.toByteHex1Encode(StringUtil.getBytesRaw("abcdef\r\n!\"ghi#$%jkf"), SmartCodec.ENCODE_PATTERN_ALL, false));
            assertEquals("\\X61\\X62\\X63\\X64\\X65\\X66\\X0D\\X0A\\X21\\X22\\X67\\X68\\X69\\X23\\X24\\X25\\X6A\\X6B\\X66", TransUtil.toByteHex1Encode(StringUtil.getBytesRaw("abcdef\r\n!\"ghi#$%jkf"), SmartCodec.ENCODE_PATTERN_ALL, true));

            System.out.println(TransUtil.toByteHex1Encode(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", "8859_1", SmartCodec.ENCODE_PATTERN_JS, false));
            assertEquals(" !\\x22#$\\x25&\\x27()*+,-\\x2e/0123456789\\x3a\\x3b\\x3c=\\x3e?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\x5c\\x5c]\\x5e\\x5f\\x60abcdefghijklmnopqrstuvwxyz{|}~", TransUtil.toByteHex1Encode(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", "8859_1", SmartCodec.ENCODE_PATTERN_JS, false));

        } catch (UnsupportedEncodingException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            fail(ex.getMessage());
        }
    }

    /**
     * Test of toByteHexEncode method, of class TransUtil.
     */
    @Test
    public void testToByteArrayJsEncode() {
        System.out.println("toByteHexEncode");
//        byte [] b1 = new byte[] {(byte)0x0a, (byte)0x0f, (byte)0x25, (byte)0xff};
//        assertEquals("[0x0a,0x0f,0x25,0xff]", TransUtil.toByteArrayJsEncode(b1, false));
//        byte [] b2 = new byte[] {};
//        assertEquals("[]", TransUtil.toByteArrayJsEncode(b2, false));
//        byte [] b3 = new byte[] {(byte)0x00};
//        assertEquals("[0x00]", TransUtil.toByteArrayJsEncode(b3, false));
//
//        byte [] b11 = new byte[] {(byte)0x0a, (byte)0x0f, (byte)0x25, (byte)0xff};
//        assertEquals("[0X0A,0X0F,0X25,0XFF]", TransUtil.toByteArrayJsEncode(b11, true));
//        byte [] b12 = new byte[] {};
//        assertEquals("[]", TransUtil.toByteArrayJsEncode(b12, true));
//        byte [] b13 = new byte[] {(byte)0x00};
//        assertEquals("[0X00]", TransUtil.toByteArrayJsEncode(b13, true));
    }

    /**
     * Test of toByteDecode method, of class TransUtil.
     */
    @Test
    public void testToByteDecode() {
        try {
            System.out.println("toByteDecode");
            assertEquals("abcdef!\"#$%", TransUtil.toByteDecode("abcdef\\x21\\x22\\x23\\x24\\x25", "8859_1"));
            assertEquals("abcdef!\"ghi#$%jkf", TransUtil.toByteDecode("\\x61\\x62\\x63\\x64\\x65\\x66\\x21\\x22\\x67\\x68\\x69\\x23\\x24\\x25\\x6a\\x6b\\x66", "8859_1"));
            assertEquals("abcdef!\"#$%", TransUtil.toByteDecode("abcdef\\041\\042\\043\\044\\045", "8859_1"));

            byte o[] = new byte[]{(byte) 0202, (byte) 0240, (byte) 0202, (byte) 0242, (byte) 0202, (byte) 0244, (byte) 0202, (byte) 0246, (byte) 0202, (byte) 0250, (byte) 012};
            assertEquals(new String(o, StandardCharsets.ISO_8859_1), TransUtil.toByteDecode("\\202\\240\\202\\242\\202\\244\\202\\246\\202\\250\\12", StandardCharsets.ISO_8859_1.name()));
        } catch (UnsupportedEncodingException ex) {
            fail();
        }
    }

    /**
     * Test of toByteHexDecode method, of class TransUtil.
     */
    @Test
    public void testToByteHexDecode() {
        try {
            System.out.println("toByteHexDecode");
            assertEquals("abcdef\r\n!\"ghi#$%jkf", TransUtil.toByteHexDecode("6162636465660d0a21226768692324256a6b66", "8859_1"));
            assertEquals("abcdef\r\n!\"ghi#$%jkf", TransUtil.toByteHexDecode("6162636465660D0A21226768692324256A6B66", "8859_1"));

            assertEquals("あいうえお", TransUtil.toByteHexDecode("e38182e38184e38186e38188e3818a", StandardCharsets.UTF_8.name()));
            assertEquals("あいうえお", TransUtil.toByteHexDecode("E38182E38184E38186E38188E3818A", StandardCharsets.UTF_8.name()));
        } catch (UnsupportedEncodingException ex) {
            fail();
        }
    }

    /**
     * Test of toByteHex2Decode method, of class TransUtil.
     */
    @Test
    public void testToByteHex2Decode() {
        try {
            System.out.println("toByteHex2Decode");
            assertEquals("abcdef!\"#$%", TransUtil.toByteHex2Decode("abcdef\\x21\\x22\\x23\\x24\\x25", "8859_1"));
            assertEquals("abcdef!\"ghi#$%jkf", TransUtil.toByteHex2Decode("\\x61\\x62\\x63\\x64\\x65\\x66\\x21\\x22\\x67\\x68\\x69\\x23\\x24\\x25\\x6a\\x6b\\x66", "8859_1"));

            assertEquals("abcdef!\"#$%", TransUtil.toByteHex2Decode("abcdef\\21\\22\\23\\24\\25", "8859_1"));
            assertEquals("abcdef!\"ghi#$%jkf", TransUtil.toByteHex2Decode("\\61\\62\\63\\64\\65\\66\\21\\22\\67\\68\\69\\23\\24\\25\\6a\\6b\\66", "8859_1"));
        } catch (UnsupportedEncodingException ex) {
            fail();
        }
    }

    /**
     * Test of toBigDec method, of class TransUtil.
     */
    @Test
    public void testToBigDec() {
        System.out.println("toBigDec");
        assertEquals("123456789012345678901234567890123456789012345678901234567890", TransUtil.toBigDec("123456789012345678901234567890123456789012345678901234567890"));
        assertEquals("123456789012345678901234567890123456789012345678901234567890", TransUtil.toBigDec("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("123456789012345678901234567890123456789012345678901234567890", TransUtil.toBigDec("0X13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("123456789012345678901234567890123456789012345678901234567890", TransUtil.toBigDec("0235257240471136036304134774172206743033664471063177431331617605322"));
    }

    /**
     * Test of toBigHex method, of class TransUtil.
     */
    @Test
    public void testToBigHex() {
        System.out.println("toBigHex");
        assertEquals("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2", TransUtil.toBigHex("123456789012345678901234567890123456789012345678901234567890"));
        assertEquals("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2", TransUtil.toBigHex("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2", TransUtil.toBigHex("0X13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2", TransUtil.toBigHex("0235257240471136036304134774172206743033664471063177431331617605322"));
    }

    /**
     * Test of toBigOct method, of class TransUtil.
     */
    @Test
    public void testToBigOct() {
        System.out.println("toBigOct");
        assertEquals("0235257240471136036304134774172206743033664471063177431331617605322", TransUtil.toBigOct("123456789012345678901234567890123456789012345678901234567890"));
        assertEquals("0235257240471136036304134774172206743033664471063177431331617605322", TransUtil.toBigOct("0x13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("0235257240471136036304134774172206743033664471063177431331617605322", TransUtil.toBigOct("0X13aaf504e4bc1e62173f87a4378c37b49c8ccff196ce3f0ad2"));
        assertEquals("0235257240471136036304134774172206743033664471063177431331617605322", TransUtil.toBigOct("0235257240471136036304134774172206743033664471063177431331617605322"));
    }

//    /**
//     * Test of getGuessCode method, of class TransUtil.
//     */
//    @Test
//    public void testGetGuessCode() {
//        try {
//            System.out.println("TransUtil");
//            String str1 = new String(new byte[]{(byte) 0xff}, StandardCharsets.ISO_8859_1);
//            String str2 = new String(new byte[]{(byte) 0x7f}, StandardCharsets.ISO_8859_1);
//            String str3 = new String(new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06}, StandardCharsets.ISO_8859_1);
//            String str4 = new String(new byte[]{(byte) 0x1a, (byte) 0x0a, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0d, (byte) 0x49, (byte) 0x48, (byte) 0x44, (byte) 0x52}, "8859_1");
//            assertEquals(null, HttpUtil.getGuessCode(str1.getBytes(StandardCharsets.ISO_8859_1)));
//            assertEquals(null, HttpUtil.getGuessCode(str2.getBytes(StandardCharsets.ISO_8859_1)));
//            assertEquals(null, HttpUtil.getGuessCode(str3.getBytes(StandardCharsets.ISO_8859_1)));
//            assertEquals(null, HttpUtil.getGuessCode(str4.getBytes(StandardCharsets.ISO_8859_1)));
//
//            assertEquals("US-ASCII", HttpUtil.getGuessCode("0123456ABCDEF".getBytes("UTF-8")));
//            assertEquals("Shift_JIS", HttpUtil.getGuessCode("入口入口入口入口".getBytes("Shift_JIS")));
//            assertEquals("EUC-JP", HttpUtil.getGuessCode("入口入口入口入口".getBytes("EUC-JP")));
//            assertEquals("UTF-8", HttpUtil.getGuessCode("入口入口入口入口".getBytes("UTF-8")));
//            assertEquals("UTF-16", HttpUtil.getGuessCode("ABCDEFGHIJKLMNOPQRSTUVWXYZあいうえおかきくけこ".getBytes("UTF-16BE")));
//            assertEquals("UTF-16", HttpUtil.getGuessCode("ABCDEFGHIJKLMNOPQRSTUVWXYZあいうえおかきくけこ".getBytes("UTF-16LE"))); // UTF-16LE になるのがベスト
//            assertEquals("UTF-16", HttpUtil.getGuessCode("ABCDEFGHIJKLMNOPQRSTUVWXYZあいうえおかきくけこ".getBytes("UTF-16")));
//        } catch (UnsupportedEncodingException ex) {
//            logger.log(Level.SEVERE, null, ex);
//            assertTrue(false);
//        }
//    }
    /**
     * // * Test of generaterList method, of class TransUtil.
     */
    @Test
    public void testGenerater_NumbersList() {
        System.out.println("testGenerater_NumbersList");
        {
            String list[] = TransUtil.generaterList("abc%02d", 4, 11, 2);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc04");
            assertEquals(list[1], "abc06");
            assertEquals(list[2], "abc08");
            assertEquals(list[3], "abc10");
        }
        {
            String list[] = TransUtil.generaterList("abc%02d", 4, 11, -2);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc11");
            assertEquals(list[1], "abc09");
            assertEquals(list[2], "abc07");
            assertEquals(list[3], "abc05");
        }
        {
            String list[] = TransUtil.generaterList("abc%02d", 11, 4, -2);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc11");
            assertEquals(list[1], "abc09");
            assertEquals(list[2], "abc07");
            assertEquals(list[3], "abc05");
        }
        {
            String list[] = TransUtil.generaterList("abc%03x", 8, 20, 4);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc008");
            assertEquals(list[1], "abc00c");
            assertEquals(list[2], "abc010");
            assertEquals(list[3], "abc014");
        }
        {
            String list[] = TransUtil.generaterList("abc%03x", 8, 20, -4);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc014");
            assertEquals(list[1], "abc010");
            assertEquals(list[2], "abc00c");
            assertEquals(list[3], "abc008");
        }
        {
            String list[] = TransUtil.generaterList("abc%03x", 20, 8, -4);
            assertEquals(list.length, 4);
            assertEquals(list[0], "abc014");
            assertEquals(list[1], "abc010");
            assertEquals(list[2], "abc00c");
            assertEquals(list[3], "abc008");
        }
        try {
            String list[] = TransUtil.generaterList("abc%02d", 4, 11, 0);
            fail(); // never loop
        } catch (Exception e) {
            assertTrue(true);
        }
    }

    /**
     * // * Test of generaterList method, of class TransUtil.
     */
    @Test
    public void testGenerater_DateList() {
        System.out.println("testGenerater_DateList");
        {
            String list[] = TransUtil.dateList("yyyy/MM/dd", LocalDate.of(2007, Month.OCTOBER, 28), LocalDate.of(2007, Month.NOVEMBER, 2), 1, TransUtil.DateUnit.DAYS);
            assertEquals(list.length, 6);
            assertEquals(list[0], "2007/10/28");
            assertEquals(list[1], "2007/10/29");
            assertEquals(list[2], "2007/10/30");
            assertEquals(list[3], "2007/10/31");
            assertEquals(list[4], "2007/11/01");
            assertEquals(list[5], "2007/11/02");
        }
        {
            String list[] = TransUtil.dateList("yyyy/MM/dd", LocalDate.of(2007, Month.NOVEMBER, 2), LocalDate.of(2007, Month.OCTOBER, 28), -1, TransUtil.DateUnit.DAYS);
            assertEquals(list.length, 6);
            assertEquals(list[0], "2007/11/02");
            assertEquals(list[1], "2007/11/01");
            assertEquals(list[2], "2007/10/31");
            assertEquals(list[3], "2007/10/30");
            assertEquals(list[4], "2007/10/29");
            assertEquals(list[5], "2007/10/28");
        }
    }

    @Test
    public void testByteBuffer() {
        ByteBuffer buff = ByteBuffer.allocate(10);
        buff.put((byte) 10);
        buff.put((byte) 20);
        buff.put((byte) 30);
        buff.flip();
        byte[] b = buff.array();
        for (int i = 0; i < b.length; i++) {
            System.out.printf("\\%x\n", b[i]);
        }
    }

    private final static Pattern REQUEST_URI = Pattern.compile("^(.*?\\s+)(.*?)(\\s+.*?)");

    @Test
    public void testURI() {
        System.out.println("testURI");
        String requestLine = "GET / HTTP/1.1\r\nHost: example.com\r\n";
        Matcher m = REQUEST_URI.matcher(requestLine);
        StringBuffer sb = new StringBuffer();
        while (m.find()) {
            sb.append(m.group(1));
            m.appendReplacement(sb, "aaaaaaaaaaaaaa");
            sb.append(m.group(3));
        }
        m.appendTail(sb);
        System.out.println(sb.toString());
    }

    @Test
    public void testToRegexEscape() {
        System.out.println("testToRegexEscape");
        String expValue = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        char[] ch = expValue.toCharArray();
        try {
            for (char c : ch) {
                String regex = MatchUtil.toRegexEscape(c);
                Pattern ptn = Pattern.compile(regex);
                assertTrue(ptn.matcher(Character.toString(c)).matches());
            }
        } catch (java.util.regex.PatternSyntaxException ex) {
            fail("toRegexEscape");
        }
    }

//    @Test
//    public void testExtractComment() {
//        System.out.println("testExtractComment");
//        String expValue = "<html><head></head><body>"
//                + "<div><!-- foo --><p>bar<!-- baz --></div><!--qux--></body></html>";
//        {
//            String[] expResult = TransUtil.extractHTMLComments(expValue, true);
//            assertEquals(3, expResult.length);
//            assertEquals("<!-- foo -->", expResult[0]);
//            assertEquals("<!-- baz -->", expResult[1]);
//            assertEquals("<!--qux-->", expResult[2]);
//        }
//
//    }
    @Test
    public void testToConv() {
        System.out.println("testToConv");
        {
            BigDecimal bd = new BigDecimal("44202.782396"); // 2021/01/06 18:46:39 +09:00
            long unix_time = TransUtil.toEpochSecond(bd);
            assertEquals(unix_time, 1609958799L - 60 * 60 * 9);
            LocalDateTime ztm = LocalDateTime.ofEpochSecond(unix_time, 0, ZoneOffset.ofHours(9));
            assertEquals(ztm.getYear(), 2021);
            assertEquals(ztm.getMonthValue(), 1);
            assertEquals(ztm.getDayOfMonth(), 6);
            assertEquals(ztm.getHour(), 18);
            assertEquals(ztm.getMinute(), 46);
            assertEquals(ztm.getSecond(), 39);
            //System.out.println("toDate:" + Date.from(ztm.toInstant()));
        }
        {
            long unix_time = 1609958799L - 60 * 60 * 9;
            BigDecimal bd = TransUtil.toExcelSerial(unix_time);
            System.out.println(bd.toPlainString());
            assertEquals(bd.toPlainString(), "44202.782396");
        }
        {
            Calendar cal = Calendar.getInstance();
//            cal.getTimeZone().
//            long unix_time = 1609958799L;
//            BigDecimal bd = TransUtil.toExcelSerial(unix_time);
//            System.out.println(bd.toPlainString());
//            assertEquals(bd.toPlainString(), "44202.782396");
        }
    }

    @Test
    public void testStringBuilder() {
        System.out.println("testStringBuilder");
        StringBuilder b = new StringBuilder();
        b.append((String) null);
        System.out.println("append:" + b.toString());
    }

    @Test
    public void testOrderdChar() {
        {
            char ord = TransUtil.getOrderdChar(0);
            assertEquals(ord, '0');
        }
        {
            char ord = TransUtil.getOrderdChar(10);
            assertEquals(ord, 'A');
        }
        {
            char ord = TransUtil.getOrderdChar(9 + 26);
            assertEquals(ord, 'Z');
        }
        {
            char ord = TransUtil.getOrderdChar(10 + 26);
            assertEquals(ord, 'a');
        }
        {
            char ord = TransUtil.getOrderdChar(9 + 26 + 26);
            assertEquals(ord, 'z');
        }
        {
            char ord = TransUtil.getOrderdChar(10 + 26 + 26);
            assertEquals(ord, '0');
        }
    }

    @Test
    public void testDateTime() {
        System.out.println("testDateTime");
        Date date = new Date();
        ZonedDateTime cdtm = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());
        System.out.println("testDateTime.current:" + cdtm);
        System.out.println("testDateTime.date.current:" + Date.from(cdtm.toInstant()));
        ZonedDateTime zdtm = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.of("Europe/Paris"));
        System.out.println("testDateTime.zone:" + zdtm);
        System.out.println("testDateTime.date.zone:" + Date.from(zdtm.toInstant()));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd H:mm:ss zzz");
        String s = formatter.format(zdtm);
        System.out.println("testDateTime.format:" + s);
    }

    @Test
    public void testZoneDateTime() {
        System.out.println("testZoneDateTime");
        ZoneId id = ZoneId.of("JST", ZoneId.SHORT_IDS);
        System.out.println(id.getId());
        System.out.println(id.getRules().getOffset(Instant.EPOCH));
        System.out.println(id.getRules().toString());
    }

    @Test
    public void testCovertDate() {
        System.out.println("testCovertDate");
        long unix_time = 1655470800L;
        LocalDateTime udtm = LocalDateTime.ofInstant(Instant.ofEpochSecond(unix_time), ZoneOffset.UTC);
        System.out.println("LocalDateTime(UTC): " + udtm);
        System.out.println("LocalDateTime(UTC): " + udtm.getYear() + "-" + udtm.getMonthValue() + "-" + udtm.getDayOfMonth() + " " + udtm.getHour() + ":" + udtm.getMinute() + ":" + udtm.getSecond());
        LocalDateTime ldtm = LocalDateTime.ofInstant(Instant.ofEpochSecond(unix_time), ZoneId.of("Asia/Tokyo"));
        System.out.println("LocalDateTime(JST): " + ldtm.getYear() + "-" + ldtm.getMonthValue() + "-" + ldtm.getDayOfMonth() + " " + ldtm.getHour() + ":" + ldtm.getMinute() + ":" + ldtm.getSecond());
        Date dateLocal = Date.from(ldtm.toInstant(ZoneOffset.UTC));
        System.out.println("LocalDateTime(Z): " + dateLocal);
        System.out.println("TransUtil.toZoneWithDate: " + TransUtil.toZoneWithDate(ldtm, ZoneOffset.UTC));
        ZonedDateTime zdtm = ZonedDateTime.ofInstant(Instant.ofEpochSecond(unix_time), ZoneOffset.UTC);
        System.out.println("ZoneDateTime: " + zdtm);
        Date dateZone = Date.from(ldtm.toInstant(ZoneOffset.UTC));
        System.out.println("ZoneDateTime(Z): " + dateZone);
        System.out.println("withZoneSameInstant: " + zdtm.withZoneSameInstant(ZoneId.systemDefault()));

        Calendar cl = Calendar.getInstance();
        cl.setTime(dateZone);
        System.out.println("Calendar.toDate: " + cl.getTime());
        System.out.println("Calendar.get: " + cl.get(Calendar.YEAR) + "-" + cl.get(Calendar.MONTH) + "-" + cl.get(Calendar.DAY_OF_MONTH) + " " + cl.get(Calendar.HOUR) + ":" + cl.get(Calendar.MINUTE) + ":" + cl.get(Calendar.SECOND));
        cl.setTimeZone(TimeZone.getTimeZone("GMT"));
        System.out.println("Calendar.toDate: " + cl.getTime());
        System.out.println("Calendar.get: " + cl.get(Calendar.YEAR) + "-" + cl.get(Calendar.MONTH) + "-" + cl.get(Calendar.DAY_OF_MONTH) + " " + cl.get(Calendar.HOUR) + ":" + cl.get(Calendar.MINUTE) + ":" + cl.get(Calendar.SECOND));
        Calendar clz = Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.UTC));
        clz.setTime(dateZone);
        System.out.println("Calendar.get(z): " + cl.get(Calendar.YEAR) + "-" + clz.get(Calendar.MONTH) + "-" + clz.get(Calendar.DAY_OF_MONTH) + " " + clz.get(Calendar.HOUR) + ":" + clz.get(Calendar.MINUTE) + ":" + clz.get(Calendar.SECOND));
    }

    @Test
    public void testToZoneWithDate() {
        System.out.println("testToZoneWithDate");
        long unix_time = 1665835871;
        // 2022/10/15 21:11:11 Asia/Tokyo
        // 2022/10/15 12:11:11 UTC
        Date date = new Date(unix_time * 1000);
        System.out.println("date:" + date.toString());
        ZonedDateTime zdtm = TransUtil.toZoneWithZoneDate(date, ZoneOffset.UTC);
        System.out.println("zdtm:" + zdtm);

    }

    @Test
    public void testCrypt() {
        System.out.println("testCrypt");
        System.out.println(UnixCrypt.crypt("aaa"));
        System.out.println(UnixCrypt.crypt("aaa"));
    }

    @Test
    public void testSha2Crypt() {
        System.out.println("testSha2Crypt");
        System.out.println(Sha2Crypt.sha256Crypt("aaa".getBytes()));
        System.out.println(Sha2Crypt.sha256Crypt("aaa".getBytes()));
    }

    @Test
    public void testTranslate() {
        System.out.println("translate");
        {
            String value = TransUtil.translateHalfWidth2FullWidth("　！”＃＄％＆’（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￥］＾＿‘ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜");
            String except = "　！”＃＄％＆’（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￥］＾＿‘ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateFullWidth2HalfWidth(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ");
            String except = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateFullWidth2HalfWidth("　！”＃＄％＆’（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￥］＾＿‘ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜");
            String except = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateFullWidth2HalfWidth("<ＳＣＲＩＰＴ>alert('警告');<／ＳＣＲＩＰＴ>");
            String except = "<SCRIPT>alert('警告');</SCRIPT>";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateHalfWidth2FullWidth("<ＳＣＲＩＰＴ>alert('警告');<／ＳＣＲＩＰＴ>");
            String except = "＜ＳＣＲＩＰＴ＞ａｌｅｒｔ（’警告’）；＜／ＳＣＲＩＰＴ＞";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateHalfWidth2FullWidth(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ");
            String except = "　！”＃＄％＆’（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￥］＾＿‘ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateHalfWidth2FullWidth("ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｶﾞｷﾞｸﾞｹﾞｺﾞｻﾞｼﾞｽﾞｾﾞｿﾞﾀﾞﾁﾞﾂﾞﾃﾞﾄﾞﾊﾞﾋﾞﾌﾞﾍﾞﾎﾞﾊﾟﾋﾟﾌﾟﾍﾟﾎﾟｳﾞｧｨｩｪｫｯｬｭｮ");
            String except = "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴァィゥェォッャュョ";
            assertEquals(except, value);
        }
        {
            String value = TransUtil.translateFullWidth2HalfWidth("アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴァィゥェォッャュョ");
            String except = "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｶﾞｷﾞｸﾞｹﾞｺﾞｻﾞｼﾞｽﾞｾﾞｿﾞﾀﾞﾁﾞﾂﾞﾃﾞﾄﾞﾊﾞﾋﾞﾌﾞﾍﾞﾎﾞﾊﾟﾋﾟﾌﾟﾍﾟﾎﾟｳﾞｧｨｩｪｫｯｬｭｮ";
            assertEquals(except, value);
        }

    }

    @Test
    public void testBlake3_x32() {
        System.out.println("testBlake3");
        Blake3 hasher = Blake3.initHash();
        hasher.update("Hello, world!".getBytes(StandardCharsets.UTF_8));
        byte[] hash = new byte[32];
        hasher.doFinalize(hash);
        System.out.println(ConvertUtil.toHexString(hash, true));
    }

    @Test
    public void testBlake3_x64() {
        System.out.println("testBlake3");
        Blake3 hasher = Blake3.initHash();
        hasher.update("Hello, world!".getBytes(StandardCharsets.UTF_8));
        byte[] hash = new byte[64];
        hasher.doFinalize(hash);
        System.out.println(ConvertUtil.toHexString(hash, true));
    }

    @Test
    public void testBinary() throws IOException {
        System.out.println("testBinary");
        FileOutputStream fstm = new FileOutputStream("C:\\Windows\\Temp\\output");
        for (int i = 0; i < 256; i++) {
            fstm.write((byte) i);
        }
    }

}
