package yagura.view;

import burp.BurpExtension;
import extension.burp.Confidence;
import extension.burp.MessageHighlightColor;
import extension.burp.NotifyType;
import extension.burp.Severity;
import extension.burp.TargetTool;
import extension.helpers.SwingUtil;
import extension.view.base.CustomDialog;
import yagura.model.MatchAlertItem;
import java.awt.Component;
import java.awt.event.ComponentEvent;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author isayan
 */
public class MatchAlertItemDlg extends CustomDialog {

    private final static Logger logger = Logger.getLogger(MatchAlertItemDlg.class.getName());

    private final static java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    /**
     * Creates new form MatchAlertItemDlg
     *
     * @param parent
     * @param modal
     */
    public MatchAlertItemDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        pnlContaner = new javax.swing.JPanel();
        pnlNotice = new javax.swing.JPanel();
        txtComment = new javax.swing.JTextField();
        chkComment = new javax.swing.JCheckBox();
        cmbAlertColor = new javax.swing.JComboBox();
        chkItemHighlight = new javax.swing.JCheckBox();
        chkTrayMessage = new javax.swing.JCheckBox();
        chkAlertsTab = new javax.swing.JCheckBox();
        pnlScannerIssue = new javax.swing.JPanel();
        chkScannerIssue = new javax.swing.JCheckBox();
        cmbSeverity = new javax.swing.JComboBox<>();
        cmbConfidence = new javax.swing.JComboBox<>();
        txtIssueName = new javax.swing.JTextField();
        chkCaptureGroup = new javax.swing.JCheckBox();
        pnlTarget = new javax.swing.JPanel();
        chkProxy = new javax.swing.JCheckBox();
        chkSpider = new javax.swing.JCheckBox();
        chkIntruder = new javax.swing.JCheckBox();
        chkScanner = new javax.swing.JCheckBox();
        chkRepeater = new javax.swing.JCheckBox();
        chkSequencer = new javax.swing.JCheckBox();
        chkExtension = new javax.swing.JCheckBox();
        pnlMatch = new javax.swing.JPanel();
        lblType = new javax.swing.JLabel();
        cmbAlertType = new javax.swing.JComboBox();
        chkSmartMatch = new javax.swing.JCheckBox();
        lblMatch = new javax.swing.JLabel();
        txtAlertMatch = new javax.swing.JTextField();
        chkRegExp = new javax.swing.JCheckBox();
        chkIgnoreCase = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(421, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        pnlMain.setLayout(new java.awt.BorderLayout());

        pnlNotice.setBorder(javax.swing.BorderFactory.createTitledBorder("Notice"));

        txtComment.setEnabled(false);

        chkComment.setText("notes");
        chkComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCommentActionPerformed(evt);
            }
        });

        cmbAlertColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "red", "orange", "yellow", "green", "cyan", "blue", "pink", "magenta", "gray" }));
        cmbAlertColor.setEnabled(false);
        cmbAlertColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlertColorActionPerformed(evt);
            }
        });

        chkItemHighlight.setText("item highlight");
        chkItemHighlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkItemHighlightActionPerformed(evt);
            }
        });

        chkTrayMessage.setText("tray message");
        chkTrayMessage.setEnabled(false);

        chkAlertsTab.setText("alerts tab");

        chkScannerIssue.setText("scanner issue");
        chkScannerIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkScannerIssueActionPerformed(evt);
            }
        });

        cmbSeverity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HIGH", "MEDIUM", "LOW", "INFORMATION" }));

        cmbConfidence.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CERTAIN", "FIRM", "TENTATIVE" }));

        javax.swing.GroupLayout pnlScannerIssueLayout = new javax.swing.GroupLayout(pnlScannerIssue);
        pnlScannerIssue.setLayout(pnlScannerIssueLayout);
        pnlScannerIssueLayout.setHorizontalGroup(
            pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIssueName)
                    .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                        .addGroup(pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chkScannerIssue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSeverity, 0, 200, Short.MAX_VALUE)
                            .addComponent(cmbConfidence, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 89, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlScannerIssueLayout.setVerticalGroup(
            pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkScannerIssue)
                .addGap(5, 5, 5)
                .addComponent(txtIssueName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSeverity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkCaptureGroup.setText("capture group");
        chkCaptureGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCaptureGroupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNoticeLayout = new javax.swing.GroupLayout(pnlNotice);
        pnlNotice.setLayout(pnlNoticeLayout);
        pnlNoticeLayout.setHorizontalGroup(
            pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNoticeLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlNoticeLayout.createSequentialGroup()
                        .addComponent(chkComment, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkCaptureGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(chkTrayMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                    .addComponent(chkAlertsTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAlertColor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtComment)
                    .addComponent(chkItemHighlight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(pnlScannerIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlNoticeLayout.setVerticalGroup(
            pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNoticeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAlertsTab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkTrayMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkItemHighlight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAlertColor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkComment)
                    .addComponent(chkCaptureGroup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnlScannerIssue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlTarget.setBorder(javax.swing.BorderFactory.createTitledBorder("Target"));

        chkProxy.setText("proxy");

        chkSpider.setText("spider");
        chkSpider.setEnabled(false);
        chkSpider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSpiderActionPerformed(evt);
            }
        });

        chkIntruder.setText("intruder");

        chkScanner.setText("scanner");

        chkRepeater.setText("repeater");

        chkSequencer.setText("sequencer");

        chkExtension.setText("extension");
        chkExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExtensionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTargetLayout = new javax.swing.GroupLayout(pnlTarget);
        pnlTarget.setLayout(pnlTargetLayout);
        pnlTargetLayout.setHorizontalGroup(
            pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTargetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSpider)
                    .addComponent(chkProxy, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkIntruder)
                    .addComponent(chkScanner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkRepeater, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkSequencer, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkExtension, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTargetLayout.setVerticalGroup(
            pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTargetLayout.createSequentialGroup()
                .addGroup(pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkProxy)
                    .addComponent(chkScanner)
                    .addComponent(chkRepeater))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkSpider)
                    .addComponent(chkIntruder)
                    .addComponent(chkSequencer)
                    .addComponent(chkExtension))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        lblType.setText("Type:");

        cmbAlertType.setToolTipText("");

        chkSmartMatch.setText("Smart Match");
        chkSmartMatch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkSmartMatchStateChanged(evt);
            }
        });

        lblMatch.setText("Match:");

        chkRegExp.setSelected(true);
        chkRegExp.setText("RegExp");

        chkIgnoreCase.setText("IgnoreCase");

        javax.swing.GroupLayout pnlMatchLayout = new javax.swing.GroupLayout(pnlMatch);
        pnlMatch.setLayout(pnlMatchLayout);
        pnlMatchLayout.setHorizontalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbAlertType, 0, 362, Short.MAX_VALUE)
                    .addComponent(txtAlertMatch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMatchLayout.createSequentialGroup()
                        .addComponent(chkRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkIgnoreCase))
                    .addComponent(chkSmartMatch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMatchLayout.setVerticalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(cmbAlertType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkSmartMatch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMatch)
                        .addComponent(txtAlertMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkRegExp)
                        .addComponent(chkIgnoreCase)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlContanerLayout = new javax.swing.GroupLayout(pnlContaner);
        pnlContaner.setLayout(pnlContanerLayout);
        pnlContanerLayout.setHorizontalGroup(
            pnlContanerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContanerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContanerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlNotice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlContanerLayout.setVerticalGroup(
            pnlContanerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContanerLayout.createSequentialGroup()
                .addComponent(pnlMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlNotice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pnlMain.add(pnlContaner, java.awt.BorderLayout.LINE_START);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        MatchAlertItem item = getItem();
        if (!item.isValidRegex()) {
            JOptionPane.showMessageDialog(this, BUNDLE.getString("view.matchalert.regex"), "MatchAlert", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setModalResult(JOptionPane.OK_OPTION);
            this.closeDialog(null);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbAlertColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlertColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAlertColorActionPerformed

    private void chkScannerIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkScannerIssueActionPerformed
        this.txtIssueName.setEnabled(this.chkScannerIssue.isSelected());
        this.cmbSeverity.setEnabled(this.chkScannerIssue.isSelected());
        this.cmbConfidence.setEnabled(this.chkScannerIssue.isSelected());
    }//GEN-LAST:event_chkScannerIssueActionPerformed

    private void chkCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCommentActionPerformed
        this.txtComment.setEnabled(this.chkComment.isSelected());
        this.chkCaptureGroup.setEnabled(this.chkComment.isSelected());
    }//GEN-LAST:event_chkCommentActionPerformed

    private void chkItemHighlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkItemHighlightActionPerformed
        this.cmbAlertColor.setEnabled(this.chkItemHighlight.isSelected());
    }//GEN-LAST:event_chkItemHighlightActionPerformed

    private void chkSmartMatchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkSmartMatchStateChanged
        this.chkRegExp.setEnabled(!this.chkSmartMatch.isSelected());
    }//GEN-LAST:event_chkSmartMatchStateChanged

    private void chkCaptureGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCaptureGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCaptureGroupActionPerformed

    private void chkSpiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSpiderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSpiderActionPerformed

    private void chkExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExtensionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkExtensionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (InstantiationException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (IllegalAccessException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                MatchAlertItemDlg dialog = new MatchAlertItemDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox chkAlertsTab;
    private javax.swing.JCheckBox chkCaptureGroup;
    private javax.swing.JCheckBox chkComment;
    private javax.swing.JCheckBox chkExtension;
    private javax.swing.JCheckBox chkIgnoreCase;
    private javax.swing.JCheckBox chkIntruder;
    private javax.swing.JCheckBox chkItemHighlight;
    private javax.swing.JCheckBox chkProxy;
    private javax.swing.JCheckBox chkRegExp;
    private javax.swing.JCheckBox chkRepeater;
    private javax.swing.JCheckBox chkScanner;
    private javax.swing.JCheckBox chkScannerIssue;
    private javax.swing.JCheckBox chkSequencer;
    private javax.swing.JCheckBox chkSmartMatch;
    private javax.swing.JCheckBox chkSpider;
    private javax.swing.JCheckBox chkTrayMessage;
    private javax.swing.JComboBox cmbAlertColor;
    private javax.swing.JComboBox cmbAlertType;
    private javax.swing.JComboBox<String> cmbConfidence;
    private javax.swing.JComboBox<String> cmbSeverity;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblType;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlContaner;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMatch;
    private javax.swing.JPanel pnlNotice;
    private javax.swing.JPanel pnlScannerIssue;
    private javax.swing.JPanel pnlTarget;
    private javax.swing.JTextField txtAlertMatch;
    private javax.swing.JTextField txtComment;
    private javax.swing.JTextField txtIssueName;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        for (String t : MatchAlertItem.getTypes()) {
            this.cmbAlertType.addItem(t);
        }

        this.cmbAlertColor.setModel(new DefaultComboBoxModel(
                new MessageHighlightColor[]{MessageHighlightColor.RED, MessageHighlightColor.ORANGE,
                    MessageHighlightColor.YELLOW, MessageHighlightColor.GREEN, MessageHighlightColor.CYAN,
                    MessageHighlightColor.BLUE, MessageHighlightColor.PINK, MessageHighlightColor.MAGENTA,
                    MessageHighlightColor.GRAY}));

        this.cmbAlertColor.setEnabled(false);

        this.cmbAlertColor.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel l = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                MessageHighlightColor hc = (MessageHighlightColor) value;
                l.setIcon(hc.toIcon());
                l.setIconTextGap(2);
                return l;
            }
        });

        this.txtComment.setEnabled(false);
        this.chkCaptureGroup.setEnabled(false);

        this.txtIssueName.setEnabled(false);
        this.cmbSeverity.setEnabled(false);
        this.cmbConfidence.setEnabled(false);


        // FreeVersion only
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            final BurpExtension extenderImpl = BurpExtension.getInstance();
            public void componentShown(ComponentEvent e) {
                SwingUtil.setContainerEnable(pnlScannerIssue, extenderImpl.getBurpVersion().isProfessional());
            }
        });

    }

    /**
     * @return the item
     */
    public MatchAlertItem getItem() {
        MatchAlertItem item = new MatchAlertItem();
        item.setSmartMatch(this.chkSmartMatch.isSelected());
        item.setRegexp(this.chkRegExp.isSelected());
        item.setIgnoreCase(this.chkIgnoreCase.isSelected());
        item.setCaptureGroup(this.chkCaptureGroup.isSelected());
        item.setType((String) this.cmbAlertType.getSelectedItem());
        item.setMatch(this.txtAlertMatch.getText());

        //item.setNotifyType((MatchItem.NotifyType) this.cmbAlertNotify.getSelectedItem());
        EnumSet<NotifyType> notifys = EnumSet.noneOf(NotifyType.class);
        if (this.chkAlertsTab.isSelected()) {
            notifys.add(NotifyType.ALERTS_TAB);
        }
        if (this.chkTrayMessage.isSelected()) {
            notifys.add(NotifyType.TRAY_MESSAGE);
        }
        if (this.chkItemHighlight.isSelected()) {
            notifys.add(NotifyType.ITEM_HIGHLIGHT);
        }
        if (this.chkComment.isSelected()) {
            notifys.add(NotifyType.COMMENT);
        }
        if (this.chkScannerIssue.isSelected()) {
            notifys.add(NotifyType.SCANNER_ISSUE);
        }
        item.setNotifyTypes(notifys);

        EnumSet<TargetTool> tools = EnumSet.noneOf(TargetTool.class);
        if (this.chkProxy.isSelected()) {
            tools.add(TargetTool.PROXY);
        }
        if (this.chkRepeater.isSelected()) {
            tools.add(TargetTool.REPEATER);
        }
        if (this.chkIntruder.isSelected()) {
            tools.add(TargetTool.INTRUDER);
        }
//        if (this.chkSpider.isSelected()) {
//            tools.add(TargetTool.SPIDER);
//        }
        if (this.chkScanner.isSelected()) {
            tools.add(TargetTool.SCANNER);
        }
        if (this.chkSequencer.isSelected()) {
            tools.add(TargetTool.SEQUENCER);
        }
        if (this.chkExtension.isSelected()) {
            tools.add(TargetTool.EXTENSIONS);
        }
        item.setTargetTools(tools);

        if (item.getNotifyTypes().contains(NotifyType.ITEM_HIGHLIGHT)) {
            item.setHighlightColor((MessageHighlightColor) this.cmbAlertColor.getSelectedItem());
        }
        if (item.getNotifyTypes().contains(NotifyType.COMMENT)) {
            item.setComment(this.txtComment.getText());
        }
        if (item.getNotifyTypes().contains(NotifyType.SCANNER_ISSUE)) {
            item.setIssueName(this.txtIssueName.getText());
            String serverty = (String) this.cmbSeverity.getSelectedItem();
            item.setSeverity(Severity.parseEnum(serverty));
            String confidence = (String) this.cmbConfidence.getSelectedItem();
            item.setConfidence(Confidence.parseEnum(confidence));
        }
        item.recompileRegex(!item.isRegexp());
        return item;
    }

    /**
     * @param item the item to set
     */
    public void setItem(MatchAlertItem item) {
        this.cmbAlertType.setSelectedItem(item.getType());
        this.txtAlertMatch.setText(item.getMatch());
        this.chkSmartMatch.setSelected(item.isSmartMatch());
        this.chkRegExp.setSelected(item.isRegexp());
        this.chkIgnoreCase.setSelected(item.isIgnoreCase());
        this.chkCaptureGroup.setSelected(item.isCaptureGroup());

        EnumSet<NotifyType> notifys = item.getNotifyTypes();
        this.chkAlertsTab.setSelected(notifys.contains(NotifyType.ALERTS_TAB));
        this.chkTrayMessage.setSelected(notifys.contains(NotifyType.TRAY_MESSAGE));
        this.chkItemHighlight.setSelected(notifys.contains(NotifyType.ITEM_HIGHLIGHT));
        this.chkComment.setSelected(notifys.contains(NotifyType.COMMENT));
        this.chkScannerIssue.setSelected(notifys.contains(NotifyType.SCANNER_ISSUE));

        EnumSet<TargetTool> tools = item.getTargetTools();
        this.chkProxy.setSelected(tools.contains(TargetTool.PROXY));
        this.chkRepeater.setSelected(tools.contains(TargetTool.REPEATER));
        this.chkIntruder.setSelected(tools.contains(TargetTool.INTRUDER));
//        this.chkSpider.setSelected(tools.contains(TargetTool.SPIDER));
        this.chkScanner.setSelected(tools.contains(TargetTool.SCANNER));
        this.chkSequencer.setSelected(tools.contains(TargetTool.SEQUENCER));
        this.chkExtension.setSelected(tools.contains(TargetTool.EXTENSIONS));

        if (item.getNotifyTypes().contains(NotifyType.ITEM_HIGHLIGHT)) {
            this.cmbAlertColor.setSelectedItem(item.getHighlightColor());
        }
        chkItemHighlightActionPerformed(null);

        this.txtComment.setText(item.getComment());
        this.chkCommentActionPerformed(null);

        this.txtIssueName.setText(item.getIssueName());
        this.cmbSeverity.setSelectedItem(item.getSeverity().name());
        this.cmbConfidence.setSelectedItem(item.getConfidence().name());
        this.chkScannerIssueActionPerformed(null);

    }
}
