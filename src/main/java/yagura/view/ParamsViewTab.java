package yagura.view;

import burp.BurpExtender;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IParameter;
import burp.IRequestInfo;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumn;
import extend.util.external.TransUtil;
import extension.helpers.HttpMessage;
import extension.helpers.HttpRequest;
import extension.helpers.HttpUtil;
import extension.helpers.StringUtil;
import extension.helpers.SwingUtil;
import extension.view.base.CustomTableModel;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;
import yagura.model.Parameter;
import yagura.model.ParamsView;
import yagura.model.ParamsViewModel;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author raise.isayan
 */
public class ParamsViewTab extends javax.swing.JPanel implements IMessageEditorTab {
    private final static Logger logger = Logger.getLogger(ParamsViewTab.class.getName());

    private boolean textModified = false;
    private boolean editable;
    private IMessageEditorController controller = null;

    /**
     * Creates new form ParamsViewTab
     */
    public ParamsViewTab(IMessageEditorController controller, boolean editable) {
        this.controller = controller;
        this.editable = editable;
        this.editable = false;
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLocation = new javax.swing.JPanel();
        lblLocation = new javax.swing.JLabel();
        btnDecode = new javax.swing.JToggleButton();
        scrollParams = new javax.swing.JScrollPane();
        tableParams = new javax.swing.JTable();
        pnlEdit = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlLocation.setLayout(new java.awt.BorderLayout());

        lblLocation.setText("http://localhost/");
        pnlLocation.add(lblLocation, java.awt.BorderLayout.LINE_START);

        btnDecode.setText("Decode");
        btnDecode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnDecodeStateChanged(evt);
            }
        });
        pnlLocation.add(btnDecode, java.awt.BorderLayout.EAST);

        add(pnlLocation, java.awt.BorderLayout.NORTH);

        tableParams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Type", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableParams.getTableHeader().setReorderingAllowed(false);
        tableParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableParamsKeyTyped(evt);
            }
        });
        scrollParams.setViewportView(tableParams);
        if (tableParams.getColumnModel().getColumnCount() > 0) {
            tableParams.getColumnModel().getColumn(0).setResizable(false);
        }

        add(scrollParams, java.awt.BorderLayout.CENTER);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnUp.setText("up");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setText("down");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditLayout = new javax.swing.GroupLayout(pnlEdit);
        pnlEdit.setLayout(pnlEditLayout);
        pnlEditLayout.setHorizontalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlEditLayout.setVerticalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDown)
                .addContainerGap(297, Short.MAX_VALUE))
        );

        add(pnlEdit, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private final JComboBox<String> cmbParamType = new JComboBox<>();

    private void btnDecodeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnDecodeStateChanged
        this.modelParams.setUrlDeocde(this.btnDecode.isSelected());
        this.tableParams.updateUI();
    }//GEN-LAST:event_btnDecodeStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        this.modelParams.addRow(new ParamsView());
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        SwingUtil.removeItem(this.tableParams);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int index = this.tableParams.getSelectedRow();
        index = this.modelParams.moveUp(index);
        this.tableParams.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        int index = this.tableParams.getSelectedRow();
        index = this.modelParams.moveDn(index);
        this.tableParams.getSelectionModel().setSelectionInterval(index, index);
    }//GEN-LAST:event_btnDownActionPerformed

    private void tableParamsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableParamsKeyTyped
        SwingUtil.systemClipboardCopy(CustomTableModel.tableCopy(tableParams, true));
    }//GEN-LAST:event_tableParamsKeyTyped

    private ParamsViewModel modelParams = null;
    private final QuickSearchTab quickSearchTab = new QuickSearchTab();

    private final Action copyAction = new AbstractAction() {
        public void actionPerformed(ActionEvent evt) {
            SwingUtil.systemClipboardCopy(CustomTableModel.tableCopy(tableParams, true));
        }
    };

    private void customizeComponents() {
        if (!this.editable) {
            this.remove(this.pnlEdit);
        }

        this.modelParams = new ParamsViewModel(this.tableParams.getModel());
        this.tableParams.setModel(this.modelParams);
        this.modelParams.setCellEditable(this.editable);
        this.modelParams.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                textModified = true;
            }
        });
        this.tableParams.getActionMap().put("copy", copyAction);
        this.tableParams.setColumnSelectionAllowed(false);
        this.tableParams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
//        this.tableParams.setCellSelectionEnabled(true);
//        this.tableParams.setRowSelectionAllowed(true);

        //this.quickSearchTab.setSelectedTextArea(this.txtRaw);
        this.quickSearchTab.getSearchPanel().setVisible(false);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.cmbParamType.setMaximumRowCount(10);
        this.cmbParamType.addItem(ParamsView.getType(IParameter.PARAM_URL));
        this.cmbParamType.addItem(ParamsView.getType(IParameter.PARAM_COOKIE));
        this.cmbParamType.addItem(ParamsView.getType(IParameter.PARAM_BODY));

        TableColumn colorColumn = this.tableParams.getColumnModel().getColumn(1);
        colorColumn.setCellEditor(new DefaultCellEditor(this.cmbParamType));

        // Data
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(0);

        // Type
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(30);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(100);

        // Name
        this.tableParams.getColumnModel().getColumn(1).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(1).setPreferredWidth(80);
        this.tableParams.getColumnModel().getColumn(1).setMaxWidth(500);

        // Value
        this.tableParams.getColumnModel().getColumn(2).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(2).setPreferredWidth(300);
        this.tableParams.getColumnModel().getColumn(2).setMaxWidth(8000);

    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                modelParams.setEncoding(encoding);
                tableParams.repaint();
            }
        }
    };


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JToggleButton btnDecode;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JPanel pnlEdit;
    private javax.swing.JPanel pnlLocation;
    private javax.swing.JScrollPane scrollParams;
    private javax.swing.JTable tableParams;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "JParams";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isRequest) {
        if (isRequest) {
            if (content == null || content.length == 0) {
                return false;
            }
            EnumSet<UniversalViewProperty.UniversalView> view = BurpExtender.getInstance().getProperty().getEncodingProperty().getMessageView();
            if (!view.contains(UniversalViewProperty.UniversalView.JPARAM)) {
                return false;
            }
            if (content.length > BurpExtender.getInstance().getProperty().getEncodingProperty().getDispayMaxLength() && BurpExtender.getInstance().getProperty().getEncodingProperty().getDispayMaxLength() != 0) {
                return false;
            }
            IRequestInfo requestInfo = BurpExtender.getHelpers().analyzeRequest(content);
            List<IParameter> params = requestInfo.getParameters();
            boolean isQueryParam = false;
            int count = 0;
            for (IParameter p : params) {
                switch (p.getType()) {
                    case IParameter.PARAM_URL:
                        isQueryParam = true;
                        count++;
                        break;
                    case IParameter.PARAM_COOKIE:
                    case IParameter.PARAM_BODY:
                    case IParameter.PARAM_MULTIPART_ATTR:
                        count++;
                        break;
                }
            }
            this.btnDecode.setSelected(false);
            boolean enabled = (requestInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED) || (requestInfo.getContentType() == IRequestInfo.CONTENT_TYPE_NONE && isQueryParam);
            this.btnDecode.setEnabled(enabled);
            return count > 0;
        }
        return false;
    }

    public void setMessageFont(Font font) {
        this.tableParams.setFont(font);
    }

    private byte[] content = null;
    private IRequestInfo reqInfo = null;

    @Override
    public void setMessage(byte[] content, boolean isRequest) {
        if (content == null) {
            this.clearView();
        } else {
            this.content = content;

            if (isRequest) {
                SwingWorker swParam = new SwingWorker<IRequestInfo, Object>() {
                    @Override
                    protected IRequestInfo doInBackground() throws Exception {
                        final HttpRequest request = HttpRequest.parseHttpRequest(content);
                        final HttpMessage httpmessage = request;
                        final IRequestInfo reqInfo = BurpExtender.getHelpers().analyzeRequest(controller.getHttpService(), content);
                        setLocation(reqInfo);
                        setParams(reqInfo);
                        return reqInfo;
                    }

                    protected void process(List<Object> chunks) {
                    }

                    protected void done() {
                        try {
                            reqInfo = get();
                            String guessCharset = null;
                            final HttpRequest request = HttpRequest.parseHttpRequest(content);
                            HttpMessage httpmessage = request;
                            if (reqInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED) {
                                guessCharset = HttpUtil.getUniversalGuessCode(StringUtil.getBytesRaw(TransUtil.decodeUrl(request.getBody(), StandardCharsets.ISO_8859_1.name())));
                            } else {
                                guessCharset = HttpUtil.getUniversalGuessCode(request.getBodyBytes());
                            }

                            if (guessCharset == null) {
                                guessCharset = StandardCharsets.ISO_8859_1.name();
                            }

                            quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
                            quickSearchTab.renewEncodingList(guessCharset, BurpExtender.getInstance().getSelectEncodingList());
                            encodingItemStateChanged.itemStateChanged(null);
                            quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
                            textModified = false;

                        } catch (InterruptedException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        } catch (ExecutionException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        } catch (UnsupportedEncodingException ex) {
                            logger.log(Level.SEVERE, null, ex);
                        }
                    }
                };
                swParam.execute();

            }

        }
//        try {
//        } catch (ParseException ex) {
//            logger.log(Level.SEVERE, null, ex);
//        } catch (UnsupportedEncodingException ex) {
//            logger.log(Level.SEVERE, null, ex);
//        }
    }

    @Override
    public byte[] getMessage() {
        if (this.content != null) {
            if (this.textModified) {
                List<IParameter> params = this.reqInfo.getParameters();
                byte[] modify = Arrays.copyOf(this.content, this.content.length);
                for (IParameter p : params) {
                    modify = BurpExtender.getHelpers().removeParameter(modify, p);
                }
                for (Parameter p : this.getParams()) {
                    modify = BurpExtender.getHelpers().addParameter(modify, p);
                }
                this.content = Arrays.copyOf(modify, modify.length);
                return this.content;
            } else {
                return this.content;
            }
        } else {
            return new byte[]{};
        }
    }

    public void setLocation(IRequestInfo reqInfo) {
        this.lblLocation.setText(String.format("%s %s", reqInfo.getMethod(), reqInfo.getUrl().getPath()));
    }

    public void setParams(IRequestInfo reqInfo) {
        this.modelParams.removeAll();
        List<IParameter> params = reqInfo.getParameters();
        for (int i = 0; i < params.size(); i++) {
            IParameter p = params.get(i);
            this.modelParams.addRow(new ParamsView(p));
        }
    }

    public List<Parameter> getParams() {
        List<Parameter> params = new ArrayList<>();
        for (int i = 0; i < this.modelParams.getRowCount(); i++) {
            Parameter p = this.modelParams.getData(i);
            params.add(p);
        }
        return params;
    }

    public void addParam(Parameter p) {
        this.modelParams.addRow(new ParamsView(p));
    }

    @Override
    public boolean isModified() {
        return this.textModified;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

    public void clearView() {
        this.modelParams.removeAll();
        this.quickSearchTab.clearView();
        this.modelParams.setCellEditable(false);
        this.content = null;
        this.reqInfo = null;
    }

}
